[
	{
		"title": "test",
		"body": null,
		"springBootConfig": null,
		"status": null,
		"description": null,
		"image": null,
		"featured": false,
		"stackOverflow": null,
		"github": null,
		"site": null,
		"slug": "test",
		"order": null,
		"samples": null,
		"documentation": [
			{
				"version": "2.0.0",
				"api": "",
				"ref": "",
				"status": "",
				"current": false
			},
			{
				"current": false,
				"version": "3.0.0"
			}
		],
		"support": null
	},
	{
		"title": "Spring Web Services",
		"body": "Spring Web Services (Spring-WS) is a product of the Spring community focused on creating document-driven Web services. Spring Web Services aims to facilitate contract-first SOAP service development, allowing for the creation of flexible web services using one of the many ways to manipulate XML payloads. The product is based on Spring itself, which means you can use the Spring concepts such as dependency injection as an integral part of your Web service.\n\nPeople use Spring-WS for many reasons, but most are drawn to it after finding alternative SOAP stacks lacking when it comes to following Web service best practices. Spring-WS makes the best practice an easy practice. This includes practices such as the WS-I basic profile, Contract-First development, and having a loose coupling between contract and implementation. The other key features of Spring Web services are:\n\n[](#features)Features\n---------------------\n\n*   Makes the Best Practice an Easy Practice: Spring Web Services makes enforcing best practices easier. This includes practices such as the WS-I basic profile, Contract-First development, and having a loose coupling between contract and implementation.\n    \n*   Powerful mappings: You can distribute incoming XML request to any object, depending on message payload, SOAP Action header, or an XPath expression.\n    \n*   XML API support: Incoming XML messages can be handled in standard JAXP APIs such as DOM, SAX, and StAX, but also JDOM, dom4j, XOM, or even marshalling technologies.\n    \n*   Flexible XML Marshalling: The Object/XML Mapping module in the Spring Web Services distribution supports JAXB 1 and 2, Castor, XMLBeans, JiBX, and XStream. And because it is a separate module, you can use it in non-Web services code as well.\n    \n*   Reuses your Spring expertise: Spring-WS uses Spring application contexts for all configuration, which should help Spring developers get up-to-speed nice and quickly. Also, the architecture of Spring-WS resembles that of Spring-MVC.\n    \n*   Supports WS-Security: WS-Security allows you to sign SOAP messages, encrypt and decrypt them, or authenticate against them.\n    \n*   Integrates with Acegi Security: The WS-Security implementation of Spring Web Services provides integration with Spring Security. This means you can use your existing configuration for your SOAP service as well.\n    \n*   Built by Maven: This assists you in effectively reusing the Spring Web Services artifacts in your own Maven-based projects.\n    \n*   Apache license. You can confidently use Spring-WS in your project.",
		"springBootConfig": "Spring Boot will automatically:\n\n*   Configure a MessageDispatcherServlet in the servlet container\n    \n*   Scan all `**.wsdl**` **and** `.xsd` documents for WSDL and schema-defined beans",
		"status": "ACTIVE",
		"description": "Facilitates the development of contract-first SOAP web services.",
		"image": "logo-web-services.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-ws",
		"github": "http://github.com/spring-projects/spring-ws",
		"site": "http://spring.io/projects/spring-ws",
		"slug": "spring-ws",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.4.7.RELEASE",
				"api": "https://docs.spring.io/spring-ws/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-ws/docs/{version}/reference/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "4.0.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-ws/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-ws/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "4.0.0-RC1",
				"api": "https://docs.spring.io/spring-ws/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-ws/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			},
			{
				"version": "3.1.4",
				"api": "https://docs.spring.io/spring-ws/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-ws/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "3.1.5-SNAPSHOT",
				"api": "https://docs.spring.io/spring-ws/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-ws/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "3.0.12.RELEASE",
				"api": "https://docs.spring.io/spring-ws/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-ws/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			}
		],
		"support": [
			{
				"branch": "2.4.x",
				"initialDate": "2016-08-29",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2017-08-29",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2018-12-29"
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-05-18",
				"ossEnforcedEnd": "2023-11-18",
				"ossPolicyEnd": "2023-11-18",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-18"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2017-10-30",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2018-10-30",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-05-18"
			}
		]
	},
	{
		"title": "Spring Web Flow",
		"body": "Spring Web Flow builds on Spring MVC and allows implementing the \"flows\" of a web application. A flow encapsulates a sequence of steps that guide a user through the execution of some business task. It spans multiple HTTP requests, has state, deals with transactional data, is reusable, and may be dynamic and long-running in nature.\n\nThe sweet spot for Spring Web Flow are stateful web applications with controlled navigation such as checking in for a flight, applying for a loan, shopping cart checkout, or even adding a confirmation step to a form. What these scenarios have in common is one or more of the following traits:\n\n*   There is a clear start and an end point.\n    \n*   The user must go through a set of screens in a specific order.\n    \n*   The changes are not finalized until the last step.\n    \n*   Once complete it shouldn’t be possible to repeat a transaction accidentally\n    \n\nSpring Web Flow provides a declarative flow definition language for authoring flows on a higher level of abstraction. It allows it to be integrated into a wide range of applications without any changes (to the flow programming model) including Spring MVC, JSF, and even Portlet web applications. The following are common issues observed in stateful web applications with navigation requirements:\n\n*   Visualizing the flow is very difficult.\n    \n*   The application has a lot of code accessing the HTTP session.\n    \n*   Enforcing controlled navigation is important but not possible.\n    \n*   Proper browser back button support seems unattainable.\n    \n*   Browser and server get out of sync with \"Back\" button use.\n    \n*   Multiple browser tabs causes concurrency issues with HTTP session data.\n    \n*   Spring Web Flow provides a solution to the above issues.",
		"springBootConfig": "To use Spring Web Flow, add the following dependency to your application.\n\nMaven\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.webflow</groupId>\n            <artifactId>spring-webflow</artifactId>\n            <version>2.5.1.RELEASE</version>\n        </dependency>\n    </dependencies>\n\nGradle\n\n    dependencies {\n        compile 'org.springframework.webflow:spring-webflow:2.5.1.RELEASE'\n    }",
		"status": "ACTIVE",
		"description": "Supports building web applications that feature controlled navigation, such as checking in for a flight or applying for a loan.",
		"image": "spring-web-flo.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-webflow,spring-webflow-2",
		"github": "http://github.com/spring-projects/spring-webflow",
		"site": "https://spring.io/projects/spring-webflow",
		"slug": "spring-webflow",
		"order": 255,
		"samples": [
			{
				"title": "Spring Web Flow Samples",
				"description": "",
				"url": "https://github.com/spring-projects/spring-webflow-samples",
				"order": 1
			}
		],
		"documentation": [
			{
				"version": "2.5.1.RELEASE",
				"api": "http://docs.spring.io/spring-webflow/docs/2.5.1.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-webflow/docs/2.5.1.RELEASE/reference/html",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.4.5.RELEASE",
				"api": "http://docs.spring.io/spring-webflow/docs/2.4.5.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-webflow/docs/2.4.5.RELEASE/reference/html",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring Vault",
		"body": "[](#introduction)Introduction\n-----------------------------\n\nSpring Vault provides familiar Spring abstractions and client-side support for accessing, storing and revoking secrets. It offers both low-level and high-level abstractions for interacting with Vault, freeing the user from infrastructural concerns.\n\nWith [HashiCorp’s Vault](https://www.vaultproject.io/) you have a central place to manage external secret data for applications across all environments. Vault can manage static and dynamic secrets such as application data, username/password for remote applications/resources and provide credentials for external services such as MySQL, PostgreSQL, Apache Cassandra, Consul, AWS and more.\n\n[](#features)Features\n---------------------\n\n*   Spring configuration support using Java based @Configuration classes.\n    \n*   `VaultTemplate` helper class that increases productivity performing common Vault operations. Includes integrated object mapping between documents and POJOs.\n    \n*   Supported authentication mechanisms:\n    \n    *   Token\n        \n    *   AppRole\n        \n    *   AWS-EC2\n        \n    *   AWS-IAM\n        \n    *   Azure MSI\n        \n    *   Certificates (PKI)\n        \n    *   Cubbyhole\n        \n    *   GCP-GCE\n        \n    *   GCP-IAM\n        \n    *   Kubernetes\n        \n    *   Pivotal CloudFoundry\n        \n    \n*   Annotation-based `@VaultPropertySource` integration\n    \n*   Support for renewable and rotating secrets\n    \n*   Feature Rich Object Mapping integrated with Spring’s Conversion Service\n    \n*   Annotation based mapping metadata but extensible to support other metadata formats\n    \n*   Automatic implementation of Repository interfaces including support for custom query methods.\n    \n\n[](#configure-vaulttemplate)Configure VaultTemplate\n---------------------------------------------------\n\n    @Configuration\n    class VaultConfiguration extends AbstractVaultConfiguration {\n    \n      @Override\n      public VaultEndpoint vaultEndpoint() {\n        return new VaultEndpoint();\n      }\n    \n      @Override\n      public ClientAuthentication clientAuthentication() {\n        return new TokenAuthentication(\"…\");\n      }\n    }\n\n[](#inject-and-use-vaulttemplate)Inject and use VaultTemplate\n-------------------------------------------------------------\n\n    public class Example {\n    \n      // inject the actual template\n      @Autowired\n      private VaultOperations operations;\n    \n      public void writeSecrets(String userId, String password) {\n    \n        Map<String, String> data = new HashMap<String, String>();\n        data.put(\"password\", password);\n    \n        operations.write(userId, data);\n      }\n    \n      public Person readSecrets(String userId) {\n    \n        VaultResponseSupport<Person> response = operations.read(userId, Person.class);\n        return response.getBody();\n        }\n    }\n\n#### [](#vault-propertysource)Vault `PropertySource`\n\n    @VaultPropertySource(value = \"aws/creds/s3\",\n      propertyNamePrefix = \"aws.\"\n      renewal = Renewal.RENEW)\n    public class MyConfig {\n    \n    }\n    \n    public class Example {\n    \n      // inject the actual values\n      @Value(\"${aws.access_key}\")\n      private String awsAccessKey;\n    \n      @Value(\"${aws.secret_key}\")\n      private String awsSecretKey;\n    \n      public InputStream getFileFromS3(String filenname) {\n        // …\n      }\n    }",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Provides familiar Spring abstractions for HashiCorp Vault",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-vault",
		"github": "http://github.com/spring-projects/spring-vault",
		"site": "http://spring.io/projects/spring-vault",
		"slug": "spring-vault",
		"order": 255,
		"samples": [
			{
				"title": "Samples",
				"description": "Spring Vault and Spring Cloud Vault samples",
				"url": "https://github.com/mp911de/spring-cloud-vault-config-samples",
				"order": 1
			},
			{
				"title": "Guide: Retrieve sensitive configuration from Vault",
				"description": "This guide walks you through the process of using Spring Cloud Vault to build an application that retrieves its configuration properties from HashiCorp Vault.",
				"url": "https://spring.io/guides/gs/vault-config/",
				"order": 2
			},
			{
				"title": "Accessing Vault",
				"description": "This guide walks you through the process of using Spring Vault to build an application that loads secrets from HashiCorp Vault, a secrets management tool.",
				"url": "https://spring.io/guides/gs/accessing-vault/",
				"order": 3
			}
		],
		"documentation": [
			{
				"version": "2.2.3.BUILD-SNAPSHOT",
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.2.2.RELEASE",
				"api": "http://docs.spring.io/spring-vault/docs/2.2.2.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-vault/docs/2.2.2.RELEASE/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.3.1",
				"api": "http://docs.spring.io/spring-vault/docs/2.3.1/api/",
				"ref": "http://docs.spring.io/spring-vault/docs/2.3.1/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.4.0-SNAPSHOT",
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.3.2-SNAPSHOT",
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false
			}
		],
		"support": [
			{
				"branch": "2.0.x",
				"initialDate": "2018-02-20",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2019-02-20",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2020-06-20"
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-10-02",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2019-10-02",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2021-02-02"
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-06",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2020-11-06",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-06"
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-12-22",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-12-22",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-04-22"
			}
		]
	},
	{
		"title": "Spring Statemachine",
		"body": "Spring Statemachine is a framework for application developers to use state machine concepts with Spring applications.\n\nSpring Statemachine aims to provide following features:\n\n*   Easy to use flat one level state machine for simple use cases.\n    \n*   Hierarchical state machine structure to ease complex state configuration.\n    \n*   State machine regions to provide even more complex state configurations.\n    \n*   Usage of triggers, transitions, guards and actions.\n    \n*   Type safe configuration adapter.\n    \n*   Builder pattern for easy instantiation for use outside of Spring Application context\n    \n*   Recipes for usual use cases\n    \n*   Distributed state machine based on a Zookeeper\n    \n*   State machine event listeners.\n    \n*   UML Eclipse Papyrus modeling.\n    \n*   Store machine config in a persistent storage.\n    \n*   Spring IOC integration to associate beans with a state machine.\n    \n\nState machines are powerful because behaviour is always guaranteed to be consistent, making it relatively easy to debug. This is because operational rules are written in stone when the machine is started. The idea is that your application may exist in a finite number of states and certain predefined triggers can take your application from one state to the next. Such triggers can be based on either events or timers.\n\nIt is much easier to define high level logic outside of your application and then rely on the state machine to manage state. You can interact with the state machine by sending an event, listening for changes or simply request a current state.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Provides a framework for application developers to use state machine concepts with Spring applications.",
		"image": "spring-statemachine.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-statemachine",
		"github": "http://github.com/spring-projects/spring-statemachine",
		"site": "http://spring.io/projects/spring-statemachine",
		"slug": "spring-statemachine",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.3.1",
				"api": "http://docs.spring.io/spring-statemachine/docs/{version}/api",
				"ref": "http://docs.spring.io/spring-statemachine/docs/{version}/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.4.1",
				"api": "http://docs.spring.io/spring-statemachine/docs/{version}/api",
				"ref": "http://docs.spring.io/spring-statemachine/docs/{version}/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.5.0",
				"api": "http://docs.spring.io/spring-statemachine/docs/{version}/api",
				"ref": "http://docs.spring.io/spring-statemachine/docs/{version}/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "3.0.1",
				"api": "http://docs.spring.io/spring-statemachine/docs/3.0.1/api",
				"ref": "http://docs.spring.io/spring-statemachine/docs/3.0.1/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "3.2.0",
				"api": "http://docs.spring.io/spring-statemachine/docs/3.2.0/api",
				"ref": "http://docs.spring.io/spring-statemachine/docs/3.2.0/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "3.1.0",
				"api": "http://docs.spring.io/spring-statemachine/docs/3.1.0/api",
				"ref": "http://docs.spring.io/spring-statemachine/docs/3.1.0/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			}
		],
		"support": [
			{
				"branch": "3.0.x",
				"initialDate": "2021-03-19",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-03-19",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-07-19"
			},
			{
				"branch": "2.5.x",
				"initialDate": "2021-07-11",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-07-11",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-11-11"
			},
			{
				"branch": "3.1.x",
				"initialDate": "2022-05-04",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-05-04",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-04"
			},
			{
				"branch": "3.2.x",
				"initialDate": "2022-05-05",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-05-05",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-05"
			}
		]
	},
	{
		"title": "Spring Social Twitter",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-social-twitter",
		"site": "http://projects.spring.io/spring-social-twitter",
		"slug": "spring-social-twitter",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-social-twitter/docs/1.1.0.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-social-twitter/docs/1.1.0.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "1.1.0.RELEASE"
			},
			{
				"api": "http://docs.spring.io/spring-social-twitter/docs/1.0.5.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-social-twitter/docs/1.0.5.RELEASE/reference/html",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.0.5.RELEASE"
			}
		],
		"support": []
	},
	{
		"title": "Spring Social TripIt",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-social-tripit",
		"site": "http://projects.spring.io/spring-social-tripit",
		"slug": "spring-social-tripit",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-social-tripit/docs/1.0.0.M3/api/",
				"ref": "http://docs.spring.io/spring-social-tripit/docs/1.0.0.M3/reference/html",
				"status": "PRERELEASE",
				"current": false,
				"version": "1.0.0.M3"
			},
			{
				"api": "http://docs.spring.io/spring-social-tripit/docs/1.0.0.BUILD-SNAPSHOT/api/",
				"ref": "http://docs.spring.io/spring-social-tripit/docs/1.0.0.BUILD-SNAPSHOT/reference/html",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.0.0.BUILD-SNAPSHOT"
			}
		],
		"support": []
	},
	{
		"title": "Spring Social LinkedIn",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-social-linkedin",
		"site": "http://projects.spring.io/spring-social-linkedin",
		"slug": "spring-social-linkedin",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-social-linkedin/docs/1.0.0.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-social-linkedin/docs/1.0.0.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.0.0.RELEASE"
			}
		],
		"support": []
	},
	{
		"title": "Spring Social GitHub",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-social-github",
		"site": "http://projects.spring.io/spring-social-github",
		"slug": "spring-social-github",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-social-github/docs/1.0.0.M4/api/",
				"ref": "http://docs.spring.io/spring-social-github/docs/1.0.0.M4/reference/html",
				"status": "PRERELEASE",
				"current": false,
				"version": "1.0.0.M4"
			},
			{
				"api": "http://docs.spring.io/spring-social-github/docs/1.0.0.BUILD-SNAPSHOT/api/",
				"ref": "http://docs.spring.io/spring-social-github/docs/1.0.0.BUILD-SNAPSHOT/reference/html",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.0.0.BUILD-SNAPSHOT"
			}
		],
		"support": []
	},
	{
		"title": "Spring Social Facebook",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-social-facebook",
		"site": "http://projects.spring.io/spring-social-facebook",
		"slug": "spring-social-facebook",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-social-facebook/docs/2.0.3.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-social-facebook/docs/2.0.3.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.0.3.RELEASE"
			},
			{
				"api": "http://docs.spring.io/spring-social-facebook/docs/1.1.0.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-social-facebook/docs/1.1.0.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.1.0.RELEASE"
			}
		],
		"support": []
	},
	{
		"title": "Spring Social",
		"body": "This project is not supported anymore as of July 2019, see [the dedicated blog post](https://spring.io/blog/2018/07/03/spring-social-end-of-life-announcement).",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "Easily connects your applications with third-party APIs such as Facebook, Twitter, LinkedIn, and more.",
		"image": "spring-social.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-social,spring-social-facebook,spring-social-linkedin,spring-social-google",
		"github": "http://github.com/spring-projects/spring-social",
		"site": "/projects/spring-social",
		"slug": "spring-social",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.0.0.M4",
				"api": "http://docs.spring.io/spring-social/docs/2.0.0.M4/apidocs/",
				"ref": "http://docs.spring.io/spring-social/docs/2.0.0.M4/reference/htmlsingle/",
				"status": "PRERELEASE",
				"current": false
			},
			{
				"version": "1.1.6.RELEASE",
				"api": "http://docs.spring.io/spring-social/docs/1.1.6.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-social/docs/1.1.6.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "1.0.3.RELEASE",
				"api": "http://docs.spring.io/spring-social/docs/1.0.3.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-social/docs/1.0.3.RELEASE/reference/html",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring Shell",
		"body": "Users of the Spring Shell project can easily build a full featured shell ( aka command line) application by depending on the Spring Shell jars and adding their own commands (which come as methods on spring beans). Creating a command line application can be useful e.g. to interact with your project’s REST API, or to work with local file content.\n\n[](#features)Features\n---------------------\n\nSpring Shell’s features include\n\n*   A simple, annotation driven, programming model to contribute custom commands\n    \n*   Use of Spring Boot auto-configuration functionality as the basis for a command plugin strategy\n    \n*   Tab completion, colorization, and script execution\n    \n*   Customization of command prompt, shell history file name, handling of results and errors\n    \n*   Dynamic enablement of commands based on domain specific criteria\n    \n*   Integration with the bean validation API\n    \n*   Already built-in commands, such as clear screen, gorgeous help, exit\n    \n*   ASCII art Tables, with formatting, alignment, fancy borders, etc.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Makes writing and testing RESTful applications easier with CLI-based resource discovery and interaction.",
		"image": "spring-shell.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-shell",
		"github": "http://github.com/spring-projects/spring-shell",
		"site": "https://spring.io/projects/spring-shell",
		"slug": "spring-shell",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.0.1.RELEASE",
				"api": "http://docs.spring.io/spring-shell/docs/2.0.1.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-shell/docs/2.0.1.RELEASE/reference/htmlsingle",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "3.0.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-shell/docs/3.0.0-SNAPSHOT/api/index.html",
				"ref": "https://docs.spring.io/spring-shell/docs/3.0.0-SNAPSHOT/docs/index.html",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.1.3-SNAPSHOT",
				"api": "https://docs.spring.io/spring-shell/docs/2.1.3-SNAPSHOT/api",
				"ref": "https://docs.spring.io/spring-shell/docs/2.1.3-SNAPSHOT/site/reference/htmlsingle",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "3.0.0-M2",
				"api": "https://docs.spring.io/spring-shell/docs/3.0.0-M2/api/index.html",
				"ref": "https://docs.spring.io/spring-shell/docs/3.0.0-M2/docs/index.html",
				"status": "PRERELEASE",
				"current": false
			},
			{
				"version": "2.1.3",
				"api": "https://docs.spring.io/spring-shell/docs/2.1.3/api",
				"ref": "https://docs.spring.io/spring-shell/docs/2.1.3/site/reference/htmlsingle",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			}
		],
		"support": [
			{
				"branch": "2.1.x",
				"initialDate": "2022-07-23",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-07-23",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-11-23"
			}
		]
	},
	{
		"title": "Spring Session for Apache Geode",
		"body": "Spring Session for Apache Geode (SSDG) provides an implementation of the core [Spring Session](https://spring.io/projects/spring-session) framework using [Apache Geode](https://geode.apache.org/) to manage a user’s _Session_ information.\n\nSession state is stored in [Apache Geode](https://geode.apache.org/) by leveraging [Spring Data for Apache Geode](https://spring.io/projects/spring-data-geode). By integrating with [Apache Geode](https://geode.apache.org/), you have the full power of this technology (_Strong Consistency_, _Low Latency_, _High Availability_, _Resiliency_, and so on) at your finger tips in your Spring Boot applications.\n\nIt is even possible to use SSDG when deploying and running your Spring Boot applications in [Pivotal CloudFoundry](https://pivotal.io/platform), using [Pivotal Cloud Cache](https://pivotal.io/pivotal-cloud-cache), which is itself based on Apache Geode.\n\n[](#feature)Features\n--------------------\n\nSpring Session for Apache Geode (SSDG) provides the following features:\n\n*   HTTP and WebSocket Session state management using Apache Geode as the backend.\n    \n*   _Clustered & Distributed Session Management_ - Improves on the availability and resilience of your system architecture.\n    \n*   _Strong Consistency_ - Apache Geode implements strong consistency guarantees, much like a database.\n    \n*   _Custom Expiration Policies_ - For example, support for fixed Session timeouts.\n    \n*   _Custom Data Serialization_ - Enable the (HTTP) Session state to be serialized other than by _Java Serialization_ so that application classes you put into the Session do not need to implement `java.io.Serializable`.\n    \n*   _Custom Change Detection_ - You can decide whether the Session is dirty or not and what gets sent (e.g. the delta) between your Spring Boot application and the Apache Geode cluster in a client/server topology.\n    \n*   _Powerful Pub/Sub mechanics_ - Allows you to register interests or express interests in Session changes based using a query predicate to receive notifications of updates.\n    \n\n[](#build)Adding Spring Session for Apache Geode to your build\n--------------------------------------------------------------\n\nSpring Session for Apache Geode is part of a Maven BOM (Bill of Materials) used to coordinate versions between the core Spring Session projects and this Apache Geode extension. Each BOM release is called a release train and has a naming strategy, for example: `Apple-SR9`, `Bean-SR12`, `Corn-SR6`, `Dragonfruit-SR3`, `2020.0.7`, `2021.0.4`, `2021.1.1`, `2021.2.0-M1`, and `2022.0.0-M1`.\n\n### [](#maven)Using the BOM with Maven\n\n    <dependencyManagement>\n      <dependencies>\n        <dependency>\n          <groupId>org.springframework.session</groupId>\n          <artifactId>spring-session-bom</artifactId>\n          <version>2021.1.1</version>\n          <type>pom</type>\n          <scope>import</scope>\n        </dependency>\n      </dependencies>\n    </dependencyManagement>\n\nThen, you can add the BOM as a dependency to your Spring Boot application Maven POM file:\n\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.session</groupId>\n        <artifactId>spring-session-data-geode</artifactId>\n      </dependency>\n    </dependencies>\n\n### [](#gradle)Using the BOM with Gradle\n\nSince Gradle has no first-class support for Maven BOMs, you may use Spring’s [Dependency Management Plugin](https://plugins.gradle.org/plugin/io.spring.dependency-management).\n\nApply the plugin from Gradle Plugin Portal (update the version if needed):\n\n    plugins {\n      id 'io.spring.dependency-management' version '1.0.11.RELEASE'\n    }\n\nThen use it to import the BOM:\n\n    dependencyManagement {\n      imports {\n        mavenBom 'org.springframework.session:spring-session-bom:2021.1.1'\n      }\n    }\n\nFinally, add a dependency to the project without a version:\n\n    dependencies {\n      compile 'org.springframework.session:spring-session-data-geode'\n    }",
		"springBootConfig": "If you are using Spring Boot, and specifically, [Spring Boot for Apache Geode](https://github.com/spring-projects/spring-boot-data-geode)(SBDG), you can include the **starter** for Spring Session for Apache Geode (SSDG) in your Spring Boot application Maven POM file.\n\nFor example:\n\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.geode</groupId>\n        <artifactId>spring-geode-starter-session</artifactId>\n        <version>1.6.3.RELEASE</version>\n      </dependency>\n    </dependencies>\n\nSee the SBDG [Version Compatibility Matrix](https://github.com/spring-projects/spring-boot-data-geode/wiki/Spring-Boot-for-Apache-Geode-and-Pivotal-GemFire-Version-Compatibility-Matrix) for more details.",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-session",
		"github": "https://github.com/spring-projects/spring-session-data-geode",
		"site": "https://spring.io/projects/spring-session-data-geode",
		"slug": "spring-session-data-geode",
		"order": 256,
		"samples": [
			{
				"url": "https://docs.spring.io/spring-session-data-geode/docs/current/reference/html5/guides/boot-gemfire.html",
				"order": 1,
				"title": "Spring Session for Apache Geode & Spring Boot",
				"description": "Shows how to use Spring Session for Apache Geode in your Spring Boot applications."
			},
			{
				"url": "https://docs.spring.io/spring-session-data-geode/docs/current/reference/html5/guides/boot-gemfire-with-scoped-proxies.html",
				"order": 2,
				"title": "Spring Session for Apache Geode using Scoped Proxies",
				"description": "Shows how Spring Session for Apache Geode works when Scoped Proxies are used in your Spring Boot applications and you have Spring beans with a scope other than 'singleton' (e.g. 'session' or 'request' scoped beans)."
			},
			{
				"url": "https://docs.spring.io/spring-session-data-geode/docs/current/reference/html5/guides/java-gemfire-clientserver.html",
				"order": 3,
				"title": "Configuring Spring Session for Apache Geode client/server using JavaConfig",
				"description": "Shows how to use Spring Session for Apache Geode in a client/server topology configured with JavaConfig."
			},
			{
				"url": "https://docs.spring.io/spring-session-data-geode/docs/current/reference/html5/guides/xml-gemfire-clientserver.html",
				"order": 4,
				"title": "Configuring Spring Session for Apache Geode client/server using XML",
				"description": "Shows how to use Spring Session for Apache Geode in a client/server topology configured with XML."
			},
			{
				"url": "https://docs.spring.io/spring-session-data-geode/docs/current/reference/html5/guides/java-gemfire-p2p.html",
				"order": 5,
				"title": "Configuring Spring Session for Apache Geode P2P using JavaConfig",
				"description": "Shows how to use Spring Session for Apache Geode in a P2P topology configured with JavaConfig."
			},
			{
				"url": "https://docs.spring.io/spring-session-data-geode/docs/current/reference/html5/guides/xml-gemfire-p2p.html",
				"order": 6,
				"title": "Configuring Spring Session for Apache Geode P2P using XML",
				"description": "Shows how to use Spring Session for Apache Geode in a P2P topology configured with XML."
			}
		],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-session-data-geode/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-session-data-geode/docs/{version}/reference/html5/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.0-SNAPSHOT"
			},
			{
				"api": "https://docs.spring.io/spring-session-data-geode/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-session-data-geode/docs/{version}/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.6.1"
			},
			{
				"api": "https://docs.spring.io/spring-session-data-geode/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-session-data-geode/docs/{version}/reference/html5/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.6.2-SNAPSHOT"
			},
			{
				"api": "https://docs.spring.io/spring-session-data-geode/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-session-data-geode/docs/{version}/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.7.0"
      },
			{
				"api": "https://docs.spring.io/spring-session-data-geode/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-session-data-geode/docs/{version}/reference/html5/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.7.1-SNAPSHOT"
			},
			{
				"api": "https://docs.spring.io/spring-session-data-geode/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-session-data-geode/docs/{version}/reference/html5/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-M3"
			}
		],
		"support": []
	},
	{
		"title": "Spring Session",
		"body": "Spring Session provides an API and implementations for managing a user’s session information.\n\n[](#features)Features\n---------------------\n\nSpring Session makes it trivial to support clustered sessions without being tied to an application container specific solution. It also provides transparent integration with:\n\n*   `HttpSession` - allows replacing the HttpSession in an application container (i.e. Tomcat) neutral way, with support for providing session IDs in headers to work with RESTful APIs\n    \n*   `WebSocket` - provides the ability to keep the HttpSession alive when receiving WebSocket messages\n    \n*   `WebSession` - allows replacing the Spring WebFlux’s WebSession in an application container neutral way\n    \n\n[](#modules)Modules\n-------------------\n\nSpring Session consists of the following modules:\n\n*   Spring Session Core - provides core Spring Session functionalities and APIs\n    \n*   Spring Session Data Redis - provides SessionRepository and ReactiveSessionRepository implementation backed by Redis and configuration support\n    \n*   Spring Session JDBC - provides SessionRepository implementation backed by a relational database and configuration support\n    \n*   Spring Session Hazelcast - provides SessionRepository implementation backed by Hazelcast and configuration support\n    \n\n[](#adding-spring-session-to-your-build)Adding Spring Session to your build\n---------------------------------------------------------------------------\n\nThis project uses a Maven BOM (Bill of Materials) and a **release train** to coordinate versions, e.g. `2121.1.1`, `2020.0.3`, etc.\n\n### [](#using-the-bom-with-maven)Using the BOM with Maven\n\nWith Maven, you need to import the BOM first:\n\n    <dependencyManagement>\n      <dependencies>\n        <dependency>\n          <groupId>org.springframework.session</groupId>\n          <artifactId>spring-session-bom</artifactId>\n          <version>2021.1.1</version>\n          <type>pom</type>\n          <scope>import</scope>\n        </dependency>\n      </dependencies>\n    </dependencyManagement>\n\n*   This example is using `2021.1.1`, but you plug in the release train version you need.\n    \n*   Notice the use of the `<dependencyManagement>` section and the `import` scope.\n    \n\nNext, add your dependencies to the project without a `<version>`:\n\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.session</groupId>\n        <artifactId>spring-session-data-redis</artifactId>\n      </dependency>\n    </dependencies>\n\n### [](#using-the-bom-with-gradle)Using the BOM with Gradle\n\nSince Gradle has no first-class support for Maven BOMs, you can use Spring’s [Dependency management plugin](https://plugins.gradle.org/plugin/io.spring.dependency-management).\n\nApply the plugin from Gradle Plugin Portal (update the version if needed):\n\n    plugins {\n      id 'io.spring.dependency-management' version '1.0.11.RELEASE'\n    }\n\nThen use it to import the BOM:\n\n    dependencyManagement {\n      imports {\n        mavenBom 'org.springframework.session:spring-session-bom:2021.1.1'\n      }\n    }\n\nFinally, add a dependency to the project without a version:\n\n    dependencies {\n      compile 'org.springframework.session:spring-session-data-redis'\n    }\n\n[](#feedback)Feedback\n---------------------\n\nYou can use the [GitHub issue tracker](https://github.com/spring-projects/spring-session/issues) to report bugs or enhancements in Spring Session.\n\nIf you have a general usage question, please ask on [Stack Overflow](https://stackoverflow.com/) using the [spring-session](https://stackoverflow.com/tags/spring-session) tag.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Provides an API and implementations for managing a user’s session information.",
		"image": "logo-session.png",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-session",
		"github": "https://github.com/spring-projects/spring-session-bom",
		"site": "https://spring.io/projects/spring-session",
		"slug": "spring-session",
		"order": 9,
		"samples": [
			{
				"title": "Spring Boot Integration",
				"description": "",
				"url": "https://docs.spring.io/spring-session/reference/guides/boot-redis.html",
				"order": 1
			},
			{
				"title": "Spring Security Integration",
				"description": "",
				"url": "https://docs.spring.io/spring-session/reference/guides/java-security.html",
				"order": 2
			},
			{
				"title": "RESTful APIs",
				"description": "",
				"url": "https://docs.spring.io/spring-session/reference/guides/java-rest.html",
				"order": 3
			},
			{
				"title": "WebSocket Integration",
				"description": "",
				"url": "https://docs.spring.io/spring-session/reference/guides/boot-websocket.html",
				"order": 4
			}
		],
		"documentation": [
			{
				"version": "2020.0.7",
				"api": "https://docs.spring.io/spring-session/docs/2.4.6/api/",
				"ref": "https://docs.spring.io/spring-session/docs/2.4.6/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2021.1.3",
				"api": "https://docs.spring.io/spring-session/docs/2.6.3/api/",
				"ref": "https://docs.spring.io/spring-session/reference/2.6.3/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2021.0.6",
				"api": "https://docs.spring.io/spring-session/docs/2.5.6/api/",
				"ref": "https://docs.spring.io/spring-session/docs/2.5.6/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2021.2.0",
				"api": "https://docs.spring.io/spring-session/docs/2.7.0/api/",
				"ref": "https://docs.spring.io/spring-session/reference/2.7.0/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "3.0.0-RC2",
				"api": "https://docs.spring.io/spring-session/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-session/reference/{version}/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "2021.2.x",
				"initialDate": "2022-05-18",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-05-18",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-18"
			},
			{
				"branch": "2021.1.x",
				"initialDate": "2021-11-17",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-11-17",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-17"
			},
			{
				"branch": "2021.0.x",
				"initialDate": "2021-05-19",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-05-19",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-09-19"
			},
			{
				"branch": "2020.0.x",
				"initialDate": "2020-10-29",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-10-29",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2022-11-22",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-11-22",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-22"
			}
		]
	},
	{
		"title": "Spring Security SAML",
		"body": "Spring SAML Extension allows seamless inclusion of SAML 2.0 Service Provider capabilities in Spring applications. All products supporting SAML 2.0 in Identity Provider mode (e.g. ADFS 2.0, Shibboleth, OpenAM/OpenSSO, Ping Federate, Okta) can be used to connect with Spring SAML Extension.\n\nThis library is being superseded by the [SAML feature set in Spring Security Core](https://docs.spring.io/spring-security/site/docs/5.2.1.RELEASE/reference/htmlsingle/#saml2)",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "https://github.com/spring-projects/spring-security-saml",
		"site": "https://spring.io/projects/spring-security-saml",
		"slug": "spring-security-saml",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "1.0.11.BUILD-SNAPSHOT",
				"api": "http://docs.spring.io/spring-security-saml/docs/1.0.x/api/",
				"ref": "http://docs.spring.io/spring-security-saml/docs/1.0.x/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "1.0.10.RELEASE",
				"api": "http://docs.spring.io/spring-security-saml/docs/1.0.x/api/",
				"ref": "http://docs.spring.io/spring-security-saml/docs/1.0.x/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			}
		],
		"support": [
			{
				"branch": "1.0.x",
				"initialDate": "2014-08-04",
				"ossEnforcedEnd": "2019-11-08",
				"ossPolicyEnd": "2019-11-08",
				"commercialEnforcedEnd": "2021-10-06",
				"commercialPolicyEnd": "2021-03-08"
			}
		]
	},
	{
		"title": "Spring Security OAuth",
		"body": "[](#end-of-life-notice)End of Life Notice\n-----------------------------------------\n\nThe Spring Security OAuth project has reached end of life and is no longer actively maintained by VMware, Inc.\n\nThis project has been replaced by the OAuth2 support provided by [Spring Security](https://docs.spring.io/spring-security/reference/servlet/oauth2/index.html) and [Spring Authorization Server](https://spring.io/projects/spring-authorization-server).",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "Spring Security OAuth provides support for using Spring Security with OAuth (1a) and OAuth2 using standard Spring and Spring Security programming models and configuration idioms.",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-security-oauth2",
		"github": "https://github.com/spring-projects/spring-security-oauth",
		"site": "https://spring.io/projects/spring-security-oauth",
		"slug": "spring-security-oauth",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.5.2.RELEASE",
				"api": "",
				"ref": "",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			}
		],
		"support": [
			{
				"branch": "2.5.x",
				"initialDate": "2020-05-28",
				"ossEnforcedEnd": "2022-05-28",
				"ossPolicyEnd": "2022-05-28",
				"commercialEnforcedEnd": "2022-05-28",
				"commercialPolicyEnd": "2023-09-28"
			}
		]
	},
	{
		"title": "Spring Security Kerberos",
		"body": "",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-security-kerberos",
		"site": "https://spring.io/projects/spring-security-kerberos",
		"slug": "spring-security-kerberos",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-security-kerberos/docs/1.0.2.BUILD-SNAPSHOT/api/",
				"ref": "http://docs.spring.io/spring-security-kerberos/docs/1.0.2.BUILD-SNAPSHOT/reference/htmlsingle",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.0.2.BUILD-SNASHOT"
      },
			{
				"api": "http://docs.spring.io/spring-security-kerberos/docs/1.0.1.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-security-kerberos/docs/1.0.1.RELEASE/reference/htmlsingle",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "1.0.1.RELEASE"
			}
		],
		"support": []
	},
	{
		"title": "Spring Security",
		"body": "Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.\n\nSpring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements\n\n[](#features)Features\n---------------------\n\n*   Comprehensive and extensible support for both Authentication and Authorization\n    \n*   Protection against attacks like session fixation, clickjacking, cross site request forgery, etc\n    \n*   Servlet API integration\n    \n*   Optional integration with Spring Web MVC\n    \n*   Much more…\n    \n\n[](#resources)Resources\n-----------------------\n\n*   [Getting Help](https://docs.spring.io/spring-security/reference/community.html#community-help)\n    \n*   [Getting Spring Security](https://docs.spring.io/spring-security/reference/getting-spring-security.html)\n    \n*   Getting Started\n    \n    *   [Getting Started (Servlet)](https://docs.spring.io/spring-security/reference/servlet/getting-started.html)\n        \n    *   [Getting Started (WebFlux)](https://docs.spring.io/spring-security/reference/reactive/getting-started.html)\n        \n    \n*   [Contributing](https://docs.spring.io/spring-security/reference/community.html#community-becoming-involved)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Protects your application with comprehensive and extensible authentication and authorization support.",
		"image": "spring-security.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-security,spring-security-oauth2,spring-security-kerberos",
		"github": "https://github.com/spring-projects/spring-security",
		"site": "https://spring.io/projects/spring-security",
		"slug": "spring-security",
		"order": 8,
		"samples": [],
		"documentation": [
			{
				"version": "5.2.15.RELEASE",
				"api": "https://docs.spring.io/spring-security/site/docs/5.2.15.RELEASE/api/",
				"ref": "https://docs.spring.io/spring-security/site/docs/5.2.15.RELEASE/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "5.4.10",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/site/docs/{version}/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "5.3.13.RELEASE",
				"api": "https://docs.spring.io/spring-security/site/docs/5.3.13.RELEASE/api/",
				"ref": "https://docs.spring.io/spring-security/site/docs/5.3.13.RELEASE/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "6.0.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/reference/6.0/index.html",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "5.5.8",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/site/docs/{version}/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "5.8.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/reference/5.8/index.html",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "6.0.0-RC1",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/reference/{version}/index.html",
				"status": "PRERELEASE",
				"current": false
			},
			{
				"version": "5.8.0-RC1",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/reference/{version}/index.html",
				"status": "PRERELEASE",
				"current": false
			},
			{
				"version": "5.7.5",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/reference/{version}/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "5.6.9",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/reference/{version}/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "5.7.6-SNAPSHOT",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/reference/{version}/index.html",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "5.6.10-SNAPSHOT",
				"api": "https://docs.spring.io/spring-security/site/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-security/reference/{version}/index.html",
				"status": "SNAPSHOT",
				"current": false
			}
		],
		"support": [
			{
				"branch": "5.6.x",
				"initialDate": "2021-11-15",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-11-15",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-15"
			},
			{
				"branch": "5.5.x",
				"initialDate": "2021-05-18",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-05-18",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-09-18"
			},
			{
				"branch": "5.4.x",
				"initialDate": "2020-09-09",
				"ossEnforcedEnd": "2021-12-31",
				"ossPolicyEnd": "2021-12-31",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-04-30"
			},
			{
				"branch": "5.3.x",
				"initialDate": "2020-05-04",
				"ossEnforcedEnd": "2021-12-31",
				"ossPolicyEnd": "2021-12-31",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-04-30"
			},
			{
				"branch": "5.2.x",
				"initialDate": "2019-09-30",
				"ossEnforcedEnd": "2021-12-31",
				"ossPolicyEnd": "2021-12-31",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-04-30"
			},
			{
				"branch": "5.7.x",
				"initialDate": "2022-05-16",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-05-16",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-16"
			}
		]
	},
	{
		"title": "Spring Scala",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "A community run project that provides support for Spring framework development in Scala",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://hub.darcs.net/psnively/spring-scala",
		"site": "http://hub.darcs.net/psnively/spring-scala",
		"slug": "spring-scala",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "1.0.0.RC1",
				"api": "",
				"ref": "",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring Roo",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "Makes it fast and easy to build full Java applications in minutes.",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "https://github.com/spring-attic/spring-roo",
		"site": "https://github.com/spring-attic/spring-roo",
		"slug": "spring-roo",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.0.0",
				"api": "",
				"ref": "https://docs.spring.io/spring-roo/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			}
		],
		"support": []
	},
	{
		"title": "Spring REST Docs",
		"body": "Spring REST Docs helps you to document RESTful services.\n\nIt combines hand-written documentation written with [Asciidoctor](http://asciidoctor.org/) and auto-generated snippets produced with [Spring MVC Test](https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle#spring-mvc-test-framework). This approach frees you from the limitations of the documentation produced by tools like [Swagger](http://swagger.io/).\n\nIt helps you to produce documentation that is accurate, concise, and well-structured. This documentation then allows your users to get the information they need with a minimum of fuss.",
		"springBootConfig": "Spring Boot provides an `@AutoConfigureRestDocs` annotation to [leverage Spring REST Docs in your tests](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing-spring-boot-applications-testing-autoconfigured-rest-docs).",
		"status": "ACTIVE",
		"description": "Lets you document RESTful services by combining hand-written documentation with auto-generated snippets produced with Spring MVC Test or REST Assured.",
		"image": "spring-restdocs.png",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-restdocs",
		"github": "http://github.com/spring-projects/spring-restdocs",
		"site": "https://spring.io/projects/spring-restdocs",
		"slug": "spring-restdocs",
		"order": 12,
		"samples": [
			{
				"title": "Spring HATEOAS",
				"description": "Demonstrates the creation of a getting started guide and an API guide for a service implemented using Spring HATEOAS",
				"url": "https://github.com/spring-projects/spring-restdocs/tree/2.0.x/samples/rest-notes-spring-hateoas",
				"order": 1
			},
			{
				"title": "Spring Data REST",
				"description": "Demonstrates the creation of a getting started guide and an API guide for a service implemented using Spring Data REST",
				"url": "https://github.com/spring-projects/spring-restdocs/tree/2.0.x/samples/rest-notes-spring-data-rest",
				"order": 2
			},
			{
				"title": "Web Test Client",
				"description": "Demonstrates the use of Spring REST docs with Spring WebFlux’s WebTestClient",
				"url": "https://github.com/spring-projects/spring-restdocs/tree/2.0.x/samples/web-test-client",
				"order": 3
			},
			{
				"title": "Slate",
				"description": "Demonstrates the use of Spring REST Docs with Markdown and Slate",
				"url": "https://github.com/spring-projects/spring-restdocs/tree/2.0.x/samples/rest-notes-slate",
				"order": 5
			},
			{
				"title": "TestNG",
				"description": "Demonstrates the use of Spring REST Docs with TestNG",
				"url": "https://github.com/spring-projects/spring-restdocs/tree/2.0.x/samples/testng",
				"order": 6
			},
			{
				"title": "JUnit 5",
				"description": "Demonstrates the use of Spring REST Docs with JUnit 5",
				"url": "https://github.com/spring-projects/spring-restdocs/tree/2.0.x/samples/junit5",
				"order": 7
			}
		],
		"documentation": [
			{
				"version": "2.0.6.RELEASE",
				"api": "https://docs.spring.io/spring-restdocs/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-restdocs/docs/{version}/reference/html5/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.0.7.BUILD-SNAPSHOT",
				"api": "https://docs.spring.io/spring-restdocs/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-restdocs/docs/{version}/reference/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "3.0.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-restdocs/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-restdocs/docs/{version}/reference/htmlsingle/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "3.0.0-RC1",
				"api": "https://docs.spring.io/spring-restdocs/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-restdocs/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "1.2.x",
				"initialDate": "2017-04-24",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2018-04-24",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2019-08-24"
			},
			{
				"branch": "2.0.x",
				"initialDate": "2017-11-28",
				"ossEnforcedEnd": "2023-11-18",
				"ossPolicyEnd": "2023-11-18",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-18"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2022-11-21",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-11-21",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-21"
			}
		]
	},
	{
		"title": "Spring Plugin",
		"body": "",
		"springBootConfig": "",
		"status": "INCUBATING",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-plugin",
		"site": "http://projects.spring.io/spring-plugin",
		"slug": "spring-plugin",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "1.2.0.RELEASE",
				"api": "",
				"ref": "http://github.com/spring-projects/spring-plugin/blob/master/README.markdown",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			}
		],
		"support": []
	},
	{
		"title": "Spring Modulith",
		"body": "Spring Modulith allows developers to build well-structured Spring Boot applications and guides developers in finding and working with [application modules](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#fundamentals.modules.application-modules) driven by the domain. It supports the [verification](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#verification) of such modular arrangements, [integration testing](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#testing) individual modules, [observing](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#observability) the application’s behavior on the module level and creating [documentation snippets](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#documentation) based on the arrangement created.\n\n[](#quickstart)Quickstart\n-------------------------\n\n1.  Create a Spring Boot application on [https://start.spring.io](https://start.spring.io)\n    \n2.  Create a Java package arrangement that puts business modules as [direct sub-packages of the application’s main package](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#fundamentals).\n    \n        □ Example\n        └─ □ src/main/java\n           ├─ □ example           <1>\n           |  └─ Application.java\n           ├─ □ example.inventory <2>\n           |  └─ …\n           └─ □ example.order     <2>\n              └─ …\n    \n    1.  The application root package\n        \n    2.  Application module packages\n        \n    \n3.  Create [an `ApplicationModules` model](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#fundamentals.modules.application-modules), run [verifications](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#verification) and [create documentation snippets](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#documentation).\n    \n        class ApplicationTests {\n        \n          @Test\n          void writeDocumentationSnippets() {\n        \n            var modules = ApplicationModules.of(Application.class).verify(); (1)\n        \n            new Documenter(modules) (2)\n              .writeModulesAsPlantUml()\n              .writeIndividualModulesAsPlantUml();\n          }\n        }\n    \n    1.  Creates application module model and [verifies its structure](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#verification).\n        \n    2.  Renders [Asciidoctor snippets](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#documentation) (component diagrams, application module canvas) to `target/modulith-docs`.\n        \n    \n4.  Run [integration tests](https://docs.spring.io/spring-modulith/docs/0.1.x/reference/html/#testing) for individual application modules.\n    \n        □ Example\n        └─ □ src/test/java\n           └─ □ example.order\n              └─ OrderModuleIntegrationTests.java\n    \n        @ApplicationModuleTests\n        class OrderModuleIntegrationTests {\n        \n          @Test\n          void someTestMethod() { … }\n        }",
		"springBootConfig": "",
		"status": "INCUBATING",
		"description": "Spring Modulith allows developers to build well-structured Spring Boot applications and guides developers in finding and working with application modules driven by the domain.",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-modulith",
		"github": "https://github.com/spring-projects-experimental/spring-modulith",
		"site": "https://spring.io/projects/spring-modulith",
		"slug": "spring-modulith",
		"order": 256,
		"samples": [],
		"documentation": [
			{
				"version": "0.1.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-modulith/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-modulith/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "0.1.0-RC1",
				"api": "https://docs.spring.io/spring-modulith/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-modulith/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring Mobile",
		"body": "This project is no longer active and has reached end of life.",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "Simplifies the development of mobile web apps through device detection and progressive rendering options.",
		"image": "spring-mobile.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-mobile",
		"github": "http://github.com/spring-projects/spring-mobile",
		"site": "http://spring.io/projects/spring-mobile",
		"slug": "spring-mobile",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.0.0.M3",
				"api": "http://docs.spring.io/spring-mobile/docs/2.0.0.M3/api/",
				"ref": "http://docs.spring.io/spring-mobile/docs/2.0.0.M3/reference/html",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring LDAP",
		"body": "Spring LDAP is a library to simplify LDAP programming in Java, built on the same principles as Spring Jdbc.\n\nThe LdapTemplate class encapsulates all the plumbing work involved in traditional LDAP programming, such as creating, looping through NamingEnumerations, handling Exceptions and cleaning up resources. This leaves the programmer to handle the important stuff - where to find data (DNs and Filters) and what to do with it (map to and from domain objects, bind, modify, unbind, etc.), in the same way that JdbcTemplate relieves the programmer of all but the actual SQL and how the data maps to the domain model.\n\nIn addition to this, Spring LDAP provides Exception translation from NamingExceptions to an unchecked exception hierarchy, as well as several utilities for working with filters, LDAP paths and attributes.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Simplifies the development of applications that use LDAP by using Spring's familiar template-based approach.",
		"image": "spring-ldap.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-ldap",
		"github": "http://github.com/spring-projects/spring-ldap",
		"site": "https://spring.io/projects/spring-ldap",
		"slug": "spring-ldap",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.3.8.RELEASE",
				"api": "https://docs.spring.io/spring-ldap/docs/{version}/apidocs/",
				"ref": "https://docs.spring.io/spring-ldap/docs/{version}/reference/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.3.9.BUILD-SNAPSHOT",
				"api": "https://docs.spring.io/spring-ldap/docs/{version}/apidocs/",
				"ref": "https://docs.spring.io/spring-ldap/docs/{version}/reference/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.4.0",
				"api": "https://docs.spring.io/spring-ldap/docs/2.4.0/api/",
				"ref": "https://docs.spring.io/spring-ldap/docs/2.4.0/reference/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.4.1-SNAPSHOT",
				"api": "https://docs.spring.io/spring-ldap/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-ldap/docs/{version}/reference/",
				"status": "SNAPSHOT",
				"current": false
			}
		],
		"support": [
			{
				"branch": "2.3.x",
				"initialDate": "2017-01-09",
				"ossEnforcedEnd": "2022-11-12",
				"ossPolicyEnd": "2022-11-12",
				"commercialEnforcedEnd": "2024-03-12",
				"commercialPolicyEnd": "2024-03-12"
			},
			{
				"branch": "2.4.x",
				"initialDate": "2022-05-12",
				"ossEnforcedEnd": "2024-12-31",
				"ossPolicyEnd": "2024-12-31",
				"commercialEnforcedEnd": "2026-12-31",
				"commercialPolicyEnd": "2026-04-30"
			}
		]
	},
	{
		"title": "Spring for Apache Kafka",
		"body": "The Spring for Apache Kafka (spring-kafka) project applies core Spring concepts to the development of Kafka-based messaging solutions. It provides a \"template\" as a high-level abstraction for sending messages. It also provides support for Message-driven POJOs with `@KafkaListener` annotations and a \"listener container\". These libraries promote the use of dependency injection and declarative. In all of these cases, you will see similarities to the JMS support in the Spring Framework and RabbitMQ support in Spring AMQP.\n\n[](#features)Features\n---------------------\n\n*   `KafkaTemplate`\n    \n*   `KafkaMessageListenerContainer`\n    \n*   `@KafkaListener`\n    \n*   `KafkaTransactionManager`\n    \n*   `spring-kafka-test` jar with embedded kafka server\n    \n\n[](#scalajackson-incompatibility)Scala/Jackson Incompatibility\n--------------------------------------------------------------\n\n**See [this appendix](https://docs.spring.io/spring-kafka/docs/2.5.9.RELEASE/reference/html/#jacksonscala-incompatibility) for information about how to resolve an important Scala incompatibility when using the embedded Kafka server with Jackson 2.11.3 or later and `spring-kafka` 2.5.x. This version of Jackson is included in Spring Boot 2.3.5 dependency management.**\n\n[](#kafka-client-compatibility)Kafka Client Compatibility\n---------------------------------------------------------\n\nUse the support tab above for information about supported versions.\n\nSpring for Apache Kafka is based on the pure java `kafka-clients` jar. The following is the compatibility matrix:\n\n   \n\nSpring for Apache Kafka Version\n\nSpring Integration for Apache Kafka Version\n\n`kafka-clients`\n\nSpring Boot\n\n3.0.x (pre release)\n\n6.0.x\n\n3.2.0\n\n3.0.x\n\n2.9.x\n\n5.5.x\n\n3.2.0\n\n2.7.x (not managed)\n\n2.8.x\n\n5.5.x\n\n3.0.0\n\n2.6.x or 2.7.x (not managed)\n\n2.7.x\n\n5.5.x\n\n2.7.0 - 2.8.1\n\n2.4.x or 2.5.x (End of Life)\n\n2.6.x\n\n5.3.x or 5.4.x\n\n2.6.0 - 2.8.1\n\n2.3.x or 2.4.x (End of Life)\n\n2.5.x\n\n3.3.x\n\n2.5.1 - 2.8.1\n\n2.3.x (End of Life)\n\n2.4.x\n\n3.2.x\n\n2.4.1\n\n2.2.x (End of Life)\n\n2.3.x\n\n3.2.x\n\n2.3.1\n\n2.2.x (End of Life)\n\n2.2.x\n\n3.1.x\n\n2.0.1, 2.1.x, 2.2.x\n\n2.1.x (End of Life)\n\n2.1.x\n\n3.0.x\n\n1.0.2\n\n2.0.x (End of Life)\n\n1.3.x\n\n2.3.x\n\n0.11.0.x, 1.0.x\n\n1.5.x (End of Life)\n\n**IMPORTANT:** This matrix is client compatibility; for a complete discussion about client/broker compatibility, see the Kafka [Compatibility Matrix](https://cwiki.apache.org/confluence/display/KAFKA/Compatibility+Matrix)\n\n*   Spring Integration Kafka versions prior to 2.0 pre-dated the Spring for Apache Kafka project and therefore were not based on it.\n    \n\nThese versions will be referenced transitively when using maven or gradle for version management.\n\n*   Spring Boot 1.5 (EOL) users should use 1.3.x (Boot dependency management will use 1.1.x by default so this should be overridden).\n    \n*   Spring Boot 2.1 (EOL) users should use 2.2.x (Boot dependency management will use the correct version).\n    \n*   Spring Boot 2.2 (EOL) users should use 2.3.x (Boot dependency management will use the correct version, or override version to 2.4.x).\n    \n*   Spring Boot 2.3 (EOL) users should use 2.5.x (Boot dependency management will use the correct version, or override version to 2.6.x).\n    \n*   Spring Boot 2.4 (EOL) users should use 2.6.x (Boot dependency management will use the correct version, or override version to 2.7.x).\n    \n*   Spring Boot 2.5 (EOL) users should use 2.7.x (Boot dependency management will use the correct version).\n    \n*   Spring Boot 2.6 users should use 2.8.x (Boot dependency management will use the correct version).\n    \n*   Spring Boot 2.7 users should use 2.8.x (Boot dependency management will use the correct version).\n    \n\nTo use 2.6.x with Boot 2.3.x; see [Override Spring Boot Dependencies](https://docs.spring.io/spring-kafka/reference/html/#update-deps).\n\nTo use 2.7.x with Boot 2.4.x; see [Override Spring Boot Dependencies](https://docs.spring.io/spring-kafka/reference/html/#update-deps).\n\n[Spring Boot Supported Versions](https://github.com/spring-projects/spring-boot/wiki/Supported-Versions).\n\n**IMPORTANT** Spring Boot 2.3.5 and later (in the 2.3.x line) brings in a version of Jackson that pulls in an incompatible Scala library. See [this appendix](https://docs.spring.io/spring-kafka/docs/2.5.x/reference/html/#jacksonscala-incompatibility) for more information, or upgrade `spring-kafka` and `kafka-clients` to 2.6.x.",
		"springBootConfig": "[Spring Boot Support for Spring for Apache Kafka](https://docs.spring.io/spring-boot/docs/current/reference/html/messaging.html#messaging.kafka)",
		"status": "ACTIVE",
		"description": "Provides Familiar Spring Abstractions for Apache Kafka.",
		"image": "spring-kafka.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-kafka",
		"github": "http://github.com/spring-projects/spring-kafka",
		"site": "http://spring.io/projects/spring-kafka",
		"slug": "spring-kafka",
		"order": 255,
		"samples": [
			{
				"title": "Spring for Apache Kafka Samples",
				"description": "",
				"url": "https://github.com/spring-projects/spring-kafka/tree/master/samples",
				"order": 1
			}
		],
		"documentation": [
			{
				"version": "2.5.17.RELEASE",
				"api": "https://docs.spring.io/spring-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-kafka/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.6.13",
				"api": "https://docs.spring.io/spring-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-kafka/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "3.0.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-kafka/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.7.14",
				"api": "https://docs.spring.io/spring-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-kafka/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.8.10",
				"api": "https://docs.spring.io/spring-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-kafka/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.9.2",
				"api": "https://docs.spring.io/spring-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-kafka/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.9.3-SNAPSHOT",
				"api": "https://docs.spring.io/spring-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-kafka/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "3.0.0-RC2",
				"api": "https://docs.spring.io/spring-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-kafka/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "2.5.x",
				"initialDate": "2020-05-13",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-05-13",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-13"
			},
			{
				"branch": "2.6.x",
				"initialDate": "2020-09-08",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-09-08",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-01-08"
			},
			{
				"branch": "2.7.x",
				"initialDate": "2021-04-14",
				"ossEnforcedEnd": "2022-05-19",
				"ossPolicyEnd": "2022-05-19",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-09-19"
			},
			{
				"branch": "2.8.x",
				"initialDate": "2021-11-15",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-11-15",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-15"
			},
			{
				"branch": "2.4.x",
				"initialDate": "2019-12-23",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2020-12-23",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-04-23"
			},
			{
				"branch": "2.3.x",
				"initialDate": "2019-10-01",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2020-10-01",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-02-01"
			},
			{
				"branch": "2.2.x",
				"initialDate": "2018-10-29",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2019-10-29",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2021-02-28"
			},
			{
				"branch": "2.9.x",
				"initialDate": "2022-07-25",
				"ossEnforcedEnd": "2024-12-31",
				"ossPolicyEnd": "2024-12-31",
				"commercialEnforcedEnd": "2026-12-31",
				"commercialPolicyEnd": "2026-04-30"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2022-11-21",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-11-21",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-21"
			}
		]
	},
	{
		"title": "Spring Integration Scala DSL",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "A Scala based DSL for developing Spring Integration applications.",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-integration-dsl-scala",
		"site": "https://github.com/spring-projects/spring-integration-dsl-scala",
		"slug": "spring-integration-dsl-scala",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "1.0.0.M2",
				"api": "",
				"ref": "",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring Integration Groovy DSL",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "A Groovy based DSL for developing Spring Integration applications.",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-integration-dsl-groovy",
		"site": "https://github.com/spring-projects/spring-integration-dsl-groovy",
		"slug": "spring-integration-dsl-groovy",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "1.0.0.M1",
				"api": "",
				"ref": "",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring Integration",
		"body": "Extends the Spring programming model to support the well-known [Enterprise Integration Patterns](http://www.eaipatterns.com/). Spring Integration enables lightweight messaging within Spring-based applications and supports integration with external systems via declarative adapters. Those adapters provide a higher-level of abstraction over Spring’s support for remoting, messaging, and scheduling. Spring Integration’s primary goal is to provide a simple model for building enterprise integration solutions while maintaining the separation of concerns that is essential for producing maintainable, testable code.\n\n[](#introduction)Introduction\n-----------------------------\n\nUsing the Spring Framework encourages developers to code using interfaces and use dependency injection (DI) to provide a Plain Old Java Object (POJO) with the dependencies it needs to perform its tasks. Spring Integration takes this concept one step further, where POJOs are wired together using a messaging paradigm and individual components may not be aware of other components in the application. Such an application is built by assembling fine-grained reusable components to form a higher level of functionality. WIth careful design, these flows can be modularized and also reused at an even higher level.\n\nIn addition to wiring together fine-grained components, Spring Integration provides a wide selection of channel adapters and gateways to communicate with external systems. Channel Adapters are used for one-way integration (send or receive); gateways are used for request/reply scenarios (inbound or outbound). For a full list of adapters and gateways, refer to the reference documentation.\n\nThe Spring Cloud Stream project builds on Spring Integration, where Spring Integration is used as an engine for message-driven microservices.\n\n[](#features)Features\n---------------------\n\n*   Implementation of most of the Enterprise Integration Patterns\n    \n*   Endpoint\n    \n*   Channel (Point-to-point and Publish/Subscribe)\n    \n*   Aggregator\n    \n*   Filter\n    \n*   Transformer\n    \n*   Control Bus\n    \n*   …\n    \n*   Integration with External Systems\n    \n*   ReST/HTTP\n    \n*   FTP/SFTP\n    \n*   STOMP\n    \n*   WebServices (SOAP and ReST)\n    \n*   TCP/UDP\n    \n*   JMS\n    \n*   RabbitMQ\n    \n*   Email\n    \n*   …\n    \n*   The framework has extensive JMX support\n    \n*   Exposing framework components as MBeans\n    \n*   Adapters to obtain attributes from MBeans, invoke operations, send/receive notifications\n    \n\n[](#examples)Examples\n---------------------\n\nIn the following \"quick start\" application you can see that the same gateway interface is used to invoke two completely different service implementations. To build and run this program you will need the _spring-integration-ws_ and _spring-integration-xml_ modules as described above.\n\n    public class Main {\n    \n    \tpublic static void main(String... args) throws Exception {\n    \t\tApplicationContext ctx =\n    \t\t\tnew ClassPathXmlApplicationContext(\"context.xml\");\n    \t\t// Simple Service\n    \t\tTempConverter converter =\n    \t\t\tctx.getBean(\"simpleGateway\", TempConverter.class);\n    \t\tSystem.out.println(converter.fahrenheitToCelcius(68.0f));\n    \t\t// Web Service\n    \t\tconverter  = ctx.getBean(\"wsGateway\", TempConverter.class);\n    \t\tSystem.out.println(converter.fahrenheitToCelcius(68.0f));\n    \t}\n    }\n\n    public interface TempConverter {\n    \n    \tfloat fahrenheitToCelcius(float fahren);\n    \n    }\n\n    <!-- Simple Service -->\n    \n    <int:gateway id=\"simpleGateway\"\n    \tservice-interface=\"foo.TempConverter\"\n    \tdefault-request-channel=\"simpleExpression\" />\n    \n    <int:service-activator id=\"expressionConverter\"\n    \tinput-channel=\"simpleExpression\"\n    \texpression=\"(payload - 32) / 9 * 5\"/>\n    \n    <!-- Web Service -->\n    \n    <int:gateway id=\"wsGateway\" service-interface=\"foo.TempConverter\"\n    \tdefault-request-channel=\"viaWebService\" />\n    \n    <int:chain id=\"wsChain\" input-channel=\"viaWebService\">\n    \t<int:transformer\n    \t   expression=\"'&lt;FahrenheitToCelsius xmlns=&quot;https://www.w3schools.com/xml/&quot;&gt;&lt;Fahrenheit&gt;XXX&lt;/Fahrenheit&gt;&lt;/FahrenheitToCelsius&gt;'.replace('XXX', payload.toString())\" />\n    \t<int-ws:header-enricher>\n    \t\t<int-ws:soap-action value=\"https://www.w3schools.com/xml/FahrenheitToCelsius\"/>\n    \t</int-ws:header-enricher>\n    \t<int-ws:outbound-gateway\n    \t\turi=\"https://www.w3schools.com/xml/tempconvert.asmx\"/>\n    \t<int-xml:xpath-transformer\n    \t\txpath-expression=\"/*[local-name()='FahrenheitToCelsiusResponse']/*[local-name()='FahrenheitToCelsiusResult']\"/>\n    </int:chain>\n\nAnd here is the same application (web service part) using the [Java DSL](https://docs.spring.io/spring-integration/docs/current/reference/html/dsl.html#java-dsl) (and Spring Boot). You will need the _spring-boot-starter-integration_ dependency or _spring-integration-core_ directly if you don’t use Spring Boot:\n\n    @SpringBootApplication\n    public class Application {\n    \n      public static void main(String[] args) {\n        ConfigurableApplicationContext ctx = SpringApplication.run(Application.class, args);\n        TempConverter converter = ctx.getBean(TempConverter.class);\n        System.out.println(converter.fahrenheitToCelcius(68.0f));\n        ctx.close();\n      }\n    \n      @MessagingGateway\n      public interface TempConverter {\n    \n        @Gateway(requestChannel = \"convert.input\")\n        float fahrenheitToCelcius(float fahren);\n    \n      }\n    \n      @Bean\n      public IntegrationFlow convert() {\n          return f -> f\n            .transform(payload ->\n                  \"<FahrenheitToCelsius xmlns=\\\"https://www.w3schools.com/xml/\\\">\"\n                +     \"<Fahrenheit>\" + payload + \"</Fahrenheit>\"\n                + \"</FahrenheitToCelsius>\")\n            .enrichHeaders(h -> h\n                .header(WebServiceHeaders.SOAP_ACTION,\n                    \"https://www.w3schools.com/xml/FahrenheitToCelsius\"))\n            .handle(new SimpleWebServiceOutboundGateway(\n                \"https://www.w3schools.com/xml/tempconvert.asmx\"))\n            .transform(Transformers.xpath(\"/*[local-name()=\\\"FahrenheitToCelsiusResponse\\\"]\"\n                + \"/*[local-name()=\\\"FahrenheitToCelsiusResult\\\"]\"));\n      }\n    \n    }",
		"springBootConfig": "[Spring Boot Autoconfiguration for Spring Integration](https://docs.spring.io/spring-boot/docs/current/reference/html/messaging.html#messaging.spring-integration)",
		"status": "ACTIVE",
		"description": "Supports the well-known Enterprise Integration Patterns through lightweight messaging and declarative adapters.",
		"image": "spring-integration.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-integration",
		"github": "http://github.com/spring-projects/spring-integration",
		"site": "http://spring.io/projects/spring-integration",
		"slug": "spring-integration",
		"order": 10,
		"samples": [
			{
				"title": "50+ Spring Integration Samples",
				"description": "Samples maintained by the project team",
				"url": "https://github.com/SpringSource/spring-integration-samples",
				"order": 1
			},
			{
				"title": "Community Samples (Xavier Padró)",
				"description": "",
				"url": "https://github.com/xpadro/spring-integration",
				"order": 2
			}
		],
		"documentation": [
			{
				"version": "6.0.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-integration/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-integration/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "5.3.10.RELEASE",
				"api": "https://docs.spring.io/spring-integration/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-integration/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "5.4.13",
				"api": "https://docs.spring.io/spring-integration/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-integration/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "5.5.15",
				"api": "https://docs.spring.io/spring-integration/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-integration/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "5.5.16-SNAPSHOT",
				"api": "https://docs.spring.io/spring-integration/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-integration/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "6.0.0-RC2",
				"api": "https://docs.spring.io/spring-integration/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-integration/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "5.3.x",
				"initialDate": "2020-05-13",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-05-13",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-13"
			},
			{
				"branch": "5.4.x",
				"initialDate": "2020-10-28",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-10-28",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28"
			},
			{
				"branch": "5.5.x",
				"initialDate": "2021-05-18",
				"ossEnforcedEnd": "2024-12-31",
				"ossPolicyEnd": "2024-12-31",
				"commercialEnforcedEnd": "2026-12-31",
				"commercialPolicyEnd": "2026-04-30"
			},
			{
				"branch": "5.2.x",
				"initialDate": "2019-10-01",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2020-10-01",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-02-01"
			}
		]
	},
	{
		"title": "Spring HATEOAS",
		"body": "Spring HATEOAS provides some APIs to ease creating REST representations that follow the HATEOAS principle when working with Spring and especially Spring MVC. The core problem it tries to address is link creation and representation assembly.\n\n[](#features)Features\n---------------------\n\n*   Model classes for link, resource representation models\n    \n*   Link builder API to create links pointing to Spring MVC controller methods\n    \n*   Support for hypermedia formats like HAL",
		"springBootConfig": "Spring Boot will do the following:\n\n*   Configure HAL support\n    \n*   Register support for [entity links](https://docs.spring.io/spring-hateoas/docs/current/reference/html/#fundamentals.obtaining-links.entity-links)\n    \n*   Wire up message converter support.",
		"status": "ACTIVE",
		"description": "Simplifies creating REST representations that follow the HATEOAS principle.",
		"image": "spring-hateoas.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-hateoas",
		"github": "https://github.com/spring-projects/spring-hateoas",
		"site": "http://spring.io/projects/spring-hateoas",
		"slug": "spring-hateoas",
		"order": 11,
		"samples": [
			{
				"title": "Building a Hypermedia-Driven RESTful Web Service",
				"description": "15-30 minute guide to getting started with Spring HATEOAS.",
				"url": "https://spring.io/guides/gs/rest-hateoas",
				"order": 1
			},
			{
				"title": "Building REST services with Spring",
				"description": "Tutorial showing how to use Spring HATEOAS to leverage the concepts of REST.",
				"url": "https://spring.io/guides/tutorials/rest/",
				"order": 3
			},
			{
				"title": "Spring HATEOAS Examples",
				"description": "Repository of code samples used to build a flexible, backward compatible RESTful API.",
				"url": "https://github.com/spring-projects/spring-hateoas-examples",
				"order": 4
			}
		],
		"documentation": [
			{
				"version": "1.3.7",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "1.3.8-SNAPSHOT",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "1.6.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "1.5.2",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "1.5.3-SNAPSHOT",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "1.4.5",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "1.4.6-SNAPSHOT",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.0.0",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.1.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-hateoas/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-hateoas/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			}
		],
		"support": [
			{
				"branch": "1.2.x",
				"initialDate": "2020-10-27",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-10-27",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-27"
			},
			{
				"branch": "1.3.x",
				"initialDate": "2021-04-13",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-04-13",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-13"
			},
			{
				"branch": "1.4.x",
				"initialDate": "2021-11-11",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-11-11",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-11"
			},
			{
				"branch": "1.5.x",
				"initialDate": "2022-05-12",
				"ossEnforcedEnd": "2023-11-16",
				"ossPolicyEnd": "2023-11-16",
				"commercialEnforcedEnd": "2025-03-16",
				"commercialPolicyEnd": "2025-03-16"
			},
			{
				"branch": "2.0.x",
				"initialDate": "2022-11-16",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-11-16",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-16"
			}
		]
	},
	{
		"title": "Spring for Apache Hadoop",
		"body": "> **NOTICE: The Spring for Apache Hadoop project will reach End-Of-Life status on April 5th, 2019. We will publish occasional 2.5.x maintenance releases as needed up until that point and will then move the project to the attic. The current Spring for Apache Hadoop 2.5.0 release is built using Apache Hadoop version 2.7.3 and should be compatible with the latest releases of the most popular Hadoop distributions.**\n\n[](#introduction)Introduction\n-----------------------------\n\nSpring for Apache Hadoop simplifies developing Apache Hadoop by providing a unified configuration model and easy to use APIs for using HDFS, MapReduce, Pig, and Hive. It also provides integration with other Spring ecosystem project such as Spring Integration and Spring Batch enabling you to develop solutions for big data ingest/export and Hadoop workflow orchestration.\n\nCheck out the book from O’Reilly Media [Spring Data: Modern Data Access for Enterprise Java](http://shop.oreilly.com/product/0636920024767.do#) that contains several chapters on using Spring for Apache Hadoop. Sample code for the book is also available in the GitHub project [spring-data-book](https://github.com/SpringSource/spring-data-book).\n\n[](#features)Features\n---------------------\n\n*   Support to create Hadoop applications that are configured using Dependency Injection and run as standard Java applications vs. using Hadoop command line utilities.\n    \n*   Integration with Spring Boot to simply creat Spring apps that connect to HDFS to read and write data.\n    \n*   Create and configure applications that use Java MapReduce, Streaming, Hive, Pig, or HBase\n    \n*   Extensions to Spring Batch to support creating Hadoop based workflows for any type of Hadoop Job or HDFS operation.\n    \n*   Script HDFS operations using any JVM based scripting language.\n    \n*   Easily create custom Spring Boot based aplications that can be deployed to execute on YARN.\n    \n*   DAO support (Template & Callbacks) for HBase.\n    \n*   Support for Hadoop Security.\n    \n\n[](#versions)Versions and Distribution Support\n----------------------------------------------\n\nSpring for Apache Hadoop supports a number of Apache releases as well as commercial distributions from Pivotal, Hortonworks and Cloudera.\n\nThe supported distros varies by release version, see [wiki page](https://github.com/spring-projects/spring-hadoop/wiki#supported-distributions) for details.\n\nAlso, see the [wiki page](https://github.com/spring-projects/spring-hadoop/wiki#building-using-supported-distributions) for Maven build details.\n\nThe continuous integration builds for most supported versions can be seen on the [build page](https://build.springsource.org/telemetry.action?filter=project&projectKey=SPRINGDATAHADOOP).",
		"springBootConfig": "    <dependencies>\n        <dependency>\n            <groupId>org.springframework.data</groupId>\n            <artifactId>spring-data-hadoop</artifactId>\n            <version>2.5.0.RELEASE</version>\n        </dependency>\n    </dependencies>",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-hadoop",
		"github": "http://github.com/spring-projects/spring-hadoop",
		"site": "https://spring.io/projects/spring-hadoop",
		"slug": "spring-hadoop",
		"order": 500,
		"samples": [
			{
				"url": "https://github.com/spring-projects/spring-hadoop-samples",
				"order": 1,
				"title": "Spring for Hadoop Samples",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-hadoop/docs/2.5.1.BUILD-SNAPSHOT/api/",
				"ref": "http://docs.spring.io/spring-hadoop/docs/2.5.1.BUILD-SNAPSHOT/reference/html",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.5.1.BUILD-SNAPSHOT"
			},
			{
				"api": "http://docs.spring.io/spring-hadoop/docs/2.5.0.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-hadoop/docs/2.5.0.RELEASE/reference/html",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.5.0.RELEASE"
			}
		],
		"support": []
	},
	{
		"title": "Spring for GraphQL",
		"body": "Spring for GraphQL provides support for Spring applications built on [GraphQL Java](https://www.graphql-java.com/). It is a joint collaboration between the GraphQL Java team and Spring engineering. Our shared philosophy is to provide as little opinion as we can while focusing on comprehensive support for a wide range of use cases.\n\nSpring for GraphQL is the successor of the [GraphQL Java Spring](https://github.com/graphql-java/graphql-java-spring) project from the GraphQL Java team. It aims to be the foundation for all Spring, GraphQL applications.\n\nThe project reached version 1.0 in May 2022. Please, use our [issue tracker](https://github.com/spring-projects/spring-graphql/issues) to report a problem, discuss a design issue, or to request a feature. To get started, check the Spring GraphQL starter on [https://start.spring.io](https://start.spring.io) and the [samples](https://github.com/spring-projects/spring-graphql/tree/main/samples) in the project’s repository.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Spring for GraphQL provides support for Spring applications built on GraphQL Java.",
		"image": "spring-graphql.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-graphql",
		"github": "https://github.com/spring-projects/spring-graphql",
		"site": "http://spring.io/projects/spring-graphql",
		"slug": "spring-graphql",
		"order": 9,
		"samples": [],
		"documentation": [
			{
				"version": "1.0.3-SNAPSHOT",
				"api": "https://docs.spring.io/spring-graphql/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-graphql/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "1.0.2",
				"api": "https://docs.spring.io/spring-graphql/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-graphql/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "1.1.0-RC1",
				"api": "https://docs.spring.io/spring-graphql/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-graphql/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "1.0.x",
				"initialDate": "2022-05-18",
				"ossEnforcedEnd": "2023-11-18",
				"ossPolicyEnd": "2023-11-18",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-18"
			},
			{
				"branch": "1.1.x",
				"initialDate": "2022-11-22",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-11-22",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-22"
			}
		]
	},
	{
		"title": "Spring Framework",
		"body": "The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\nA key element of Spring is infrastructural support at the application level: Spring focuses on the \"plumbing\" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.\n\n[](#support-policy-and-migration)Support Policy and Migration\n-------------------------------------------------------------\n\nFor information about minimum requirements, guidance on upgrading from earlier versions and support policies, please check out [the official Spring Framework wiki page](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions)\n\n[](#features)Features\n---------------------\n\n*   [Core technologies](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html): dependency injection, events, resources, i18n, validation, data binding, type conversion, SpEL, AOP.\n    \n*   [Testing](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html): mock objects, TestContext framework, Spring MVC Test, `WebTestClient`.\n    \n*   [Data Access](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html): transactions, DAO support, JDBC, ORM, Marshalling XML.\n    \n*   [Spring MVC](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html) and [Spring WebFlux](https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html) web frameworks.\n    \n*   [Integration](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/integration.html): remoting, JMS, JCA, JMX, email, tasks, scheduling, cache.\n    \n*   [Languages](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/languages.html): Kotlin, Groovy, dynamic languages.\n    \n\n[](#springoneplatform-2017-talks)SpringOnePlatform 2017 talks\n-------------------------------------------------------------\n\n*   [Spring Framework 5.0 on JDK 8 & 9](https://content.pivotal.io/springone-platform-2017/spring-framework-5-0-on-jdk-8-9-juergen-hoeller)\n    \n*   [Servlet or Reactive Stacks: The Choice is Yours. Oh No…​ The Choice is Mine!](https://content.pivotal.io/springone-platform-2017/servlet-or-reactive-stacks-the-choice-is-yours-oh-no-the-choice-is-mine-rossen-stoyanchev)\n    \n*   [New in Spring Framework 5.0: Functional Web Framework](https://content.pivotal.io/springone-platform-2017/new-in-spring-framework-5-0-functional-web-framework-arjen-poutsma)\n    \n*   [Why Spring Loves Kotlin](https://content.pivotal.io/springone-platform-2017/why-spring-loves-kotlin-s%C3%A9bastien-deleuze)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Provides core support for dependency injection, transaction management, web apps, data access, messaging, and more.",
		"image": "spring-framework.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring,spring-mvc,spring-webflux,spring-aop,spring-jdbc,spring-r2dbc,spring-transactions,spring-annotations,spring-jms,spring-el,spring-test,spring-java-config,spring-remoting,spring-orm,spring-jmx,spring-cache,spring-rsocket",
		"github": "http://github.com/spring-projects/spring-framework",
		"site": "https://spring.io/projects/spring-framework",
		"slug": "spring-framework",
		"order": 2,
		"samples": [],
		"documentation": [
			{
				"version": "5.2.22.RELEASE",
				"api": "https://docs.spring.io/spring-framework/docs/{version}/javadoc-api/",
				"ref": "https://docs.spring.io/spring-framework/docs/{version}/spring-framework-reference/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "5.3.24",
				"api": "https://docs.spring.io/spring-framework/docs/{version}/javadoc-api/",
				"ref": "https://docs.spring.io/spring-framework/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "5.3.25-SNAPSHOT",
				"api": "https://docs.spring.io/spring-framework/docs/{version}/javadoc-api/",
				"ref": "https://docs.spring.io/spring-framework/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "6.0.0",
				"api": "https://docs.spring.io/spring-framework/docs/{version}/javadoc-api/",
				"ref": "https://docs.spring.io/spring-framework/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "6.0.1-SNAPSHOT",
				"api": "https://docs.spring.io/spring-framework/docs/{version}/javadoc-api/",
				"ref": "https://docs.spring.io/spring-framework/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			}
		],
		"support": [
			{
				"branch": "5.1.x",
				"initialDate": "2018-09-21",
				"ossEnforcedEnd": "2020-12-31",
				"ossPolicyEnd": "2020-12-31",
				"commercialEnforcedEnd": "2022-12-31",
				"commercialPolicyEnd": "2022-04-30"
			},
			{
				"branch": "5.2.x",
				"initialDate": "2019-09-30",
				"ossEnforcedEnd": "2021-12-31",
				"ossPolicyEnd": "2021-12-31",
				"commercialEnforcedEnd": "2023-12-31",
				"commercialPolicyEnd": "2023-04-30"
			},
			{
				"branch": "5.3.x",
				"initialDate": "2020-10-27",
				"ossEnforcedEnd": "2024-12-31",
				"ossPolicyEnd": "2024-12-31",
				"commercialEnforcedEnd": "2026-12-31",
				"commercialPolicyEnd": "2026-04-30"
			},
			{
				"branch": "6.0.x",
				"initialDate": "2022-11-16",
				"ossEnforcedEnd": "2024-08-31",
				"ossPolicyEnd": "2024-08-31",
				"commercialEnforcedEnd": "2025-12-31",
				"commercialPolicyEnd": "2025-12-31"
			},
			{
				"branch": "6.1.x",
				"initialDate": "2023-11-15",
				"ossEnforcedEnd": "2025-08-31",
				"ossPolicyEnd": "2025-08-31",
				"commercialEnforcedEnd": "2026-12-31",
				"commercialPolicyEnd": "2026-12-31"
			}
		]
	},
	{
		"title": "Spring Flo",
		"body": "Spring Flo is a JavaScript library that offers a basic embeddable HTML5 visual builder for pipelines and simple graphs. This library is used as the basis of the stream builder in [Spring Cloud Data Flow](http://cloud.spring.io/spring-cloud-dataflow/).\n\nFlo includes all the basic elements of an integration-flow designer such as connectors, control nodes, palettes, state transitions, and graph topologies—importantly, there is a textual shell, DSL support, and a graphical canvas designed for creating and reviewing comprehensive workflows.\n\n[](#features)Features\n---------------------\n\n*   Create, manage, and monitor stream pipelines using DSL, a graphical canvas, or both\n    \n*   Write pipelines via DSL with content-assist and auto-complete\n    \n*   See a visual representation of modules across a distributed deployment\n    \n*   Use auto-adjustment and grid-layout capabilities in the GUI for easier and more efficient organization of pipelines\n    \n\n[](#quick-start)Quick Start\n---------------------------\n\nStep 1 - [Build Flo](https://github.com/spring-projects/spring-flo#build)\n\nStep 2 - Try [Flo Samples](https://github.com/spring-projects/spring-flo#samples)\n\nStep 3 - Try Spring Cloud Data Flow’s [Stream Designer](https://github.com/spring-cloud/spring-cloud-dataflow-ui)\n\n### [](#related-projects)Related Projects\n\n*   [Spring Cloud Data Flow](https://github.com/spring-cloud/spring-cloud-dataflow)\n    \n*   [Spring Cloud Data Flow UI](https://github.com/spring-cloud/spring-cloud-dataflow-ui)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Provides a JavaScript library that offers a basic embeddable HTML5 visual builder for pipelines and simple graphs.",
		"image": "spring-flo.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "https://github.com/spring-projects/spring-flo",
		"site": "https://spring.io/projects/spring-flo",
		"slug": "spring-flo",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "0.8.8",
				"api": "",
				"ref": "https://github.com/spring-projects/spring-flo/wiki",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			}
		],
		"support": []
	},
	{
		"title": "Spring Flex",
		"body": "",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "A project to make it easier to build Spring-powered Rich Internet Applications using Adobe Flex as the front-end client.",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-flex",
		"site": "https://github.com/spring-projects/spring-flex",
		"slug": "spring-flex",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "1.5.2.RELEASE",
				"api": "http://docs.spring.io/spring-flex/docs/1.5.2.RELEASE/javadoc-api/",
				"ref": "http://docs.spring.io/spring-flex/docs/1.5.2.RELEASE/reference/html",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			}
		],
		"support": []
	},
	{
		"title": "Spring Data for Apache Solr",
		"body": "**Spring Data Solr has been discontinued and is currently only maintained in its current version for support reasons until early 2023 at which point it will be moved to the [Spring Attic](https://github.com/spring-attic/) entirely. The team has laid out the reasons to discontinue the project [here](https://spring.io/blog/2020/04/07/spring-data-for-apache-solr-discontinued). For current users of Spring Data Solr, we recommend to look into alternative search-engine-related modules like [Spring Data Elasticsearch](https://github.com/spring-projects/spring-data-elasticsearch).**\n\nSpring Data for Apache Solr, part of the larger Spring Data family, provides easy configuration and access to [Apache Solr](https://lucene.apache.org/solr/) Search Server from Spring applications. It offers both low-level and high-level abstractions for interacting with the store.\n\nDerived queries and annotations for Solr specific functionallity allow easy integration into existing applications.\n\n[](#features)Features\n---------------------\n\n*   High level repository abstractions with multicore support\n    \n*   Annotations for Boost-, Facet- and Highlighting\n    \n*   Customizable type mappings and type conversions\n    \n*   Solr template supporting fluent query api\n    \n*   Exception translation to Spring’s portable Data Access exception hierarchy",
		"springBootConfig": "",
		"status": "COMMUNITY",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-solr",
		"github": "http://github.com/spring-projects/spring-data-solr",
		"site": "http://spring.io/projects/spring-data-solr",
		"slug": "spring-data-solr",
		"order": 9,
		"samples": [
			{
				"url": "https://github.com/christophstrobl/spring-data-solr-showcase",
				"order": 1,
				"title": "Solr Showcase",
				"description": "A Spring MVC application rebuilding parts of the original Solr example."
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.3.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/solr/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/solr/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "4.3.15"
      }
		],
		"support": [
			{
				"branch": "4.3.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "4.2.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "4.1.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data REST",
		"body": "Spring Data REST is part of the umbrella Spring Data project and makes it easy to build hypermedia-driven REST web services on top of Spring Data repositories.\n\nSpring Data REST builds on top of Spring Data repositories, analyzes your application’s domain model and exposes hypermedia-driven HTTP resources for aggregates contained in the model.\n\n[](#features)Features\n---------------------\n\n*   Exposes a discoverable REST API for your domain model using HAL as media type.\n    \n*   Exposes [collection, item and association resources](https://docs.spring.io/spring-data/rest/docs/current/reference/html/#repository-resources) representing your model.\n    \n*   Supports pagination via [navigational links](https://docs.spring.io/spring-data/rest/docs/current/reference/html/#paging-and-sorting).\n    \n*   Allows to dynamically filter collection resources.\n    \n*   Exposes dedicated [search resources for query methods](https://docs.spring.io/spring-data/rest/docs/current/reference/html/#repository-resources.query-method-resource) defined in your repositories.\n    \n*   Allows to [hook into the handling of REST requests](https://docs.spring.io/spring-data/rest/docs/current/reference/html/#events) by handling Spring `ApplicationEvents`.\n    \n*   [Exposes metadata](https://docs.spring.io/spring-data/rest/docs/current/reference/html/#metadata) about the model discovered as ALPS and JSON Schema.\n    \n*   Allows to define client specific representations through [projections](https://docs.spring.io/spring-data/rest/docs/current/reference/html/#projections-excerpts).\n    \n*   Ships a customized variant of the [HAL Explorer](https://docs.spring.io/spring-data/rest/docs/current/reference/html/#hal-explorer) to leverage the exposed metadata.\n    \n*   Currently supports JPA, MongoDB, Neo4j, Solr, Cassandra, Gemfire.\n    \n*   Allows [advanced customizations](https://docs.spring.io/spring-data/rest/docs/current/reference/html/#customizing-sdr) of the default resources exposed.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-rest",
		"github": "http://github.com/spring-projects/spring-data-rest",
		"site": "http://spring.io/projects/spring-data-rest",
		"slug": "spring-data-rest",
		"order": 6,
		"samples": [
			{
				"url": "https://github.com/spring-projects/spring-data-examples/tree/master/rest",
				"order": 1,
				"title": "Spring Data Examples - REST",
				"description": ""
			},
			{
				"url": "https://github.com/gregturn/spring-a-gram",
				"order": 2,
				"title": "Spring-a-Gram",
				"description": ""
			},
			{
				"url": "https://github.com/olivergierke/spring-restbucks",
				"order": 3,
				"title": "Spring RESTBucks",
				"description": ""
			},
			{
				"url": "https://github.com/SpringSource/spring-data-book/tree/master/rest",
				"order": 4,
				"title": "Spring Data Book Example",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.5.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/rest/docs/3.5.12/api/",
				"ref": "https://docs.spring.io/spring-data/rest/docs/3.5.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.5.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.7.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/rest/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/rest/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.7.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/rest/docs/4.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/rest/docs/4.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.4.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/rest/docs/3.4.15/api/",
				"ref": "https://docs.spring.io/spring-data/rest/docs/3.4.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.4.15"
      }
		],
		"support": [
			{
				"branch": "3.7.x",
				"initialDate": "2022-05-13",
				"ossPolicyEnd": "2023-05-13",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-13",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.6.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.5.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.4.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.3.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.2.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2018-09-21",
				"ossPolicyEnd": "2019-09-21",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2021-01-21",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data Redis",
		"body": "Spring Data Redis, part of the larger Spring Data family, provides easy configuration and access to Redis from Spring applications. It offers both low-level and high-level abstractions for interacting with the store, freeing the user from infrastructural concerns.\n\n[](#features)Features\n---------------------\n\n*   Connection package as low-level abstraction across multiple Redis drivers([Lettuce](https://github.com/lettuce-io/lettuce-core) and [Jedis](https://github.com/xetorthio/jedis)).\n    \n*   [Exception](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:connectors) translation to Spring’s portable Data Access exception hierarchy for Redis driver exceptions.\n    \n*   [RedisTemplate](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:template) that provides a high-level abstraction for performing various Redis operations, exception translation and serialization support.\n    \n*   [Pubsub](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#pubsub) support (such as a MessageListenerContainer for message-driven POJOs).\n    \n*   [Redis Sentinel](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:sentinel) and [Redis Cluster](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#cluster) support.\n    \n*   Reactive API using the Lettuce driver.\n    \n*   JDK, String, JSON and Spring Object/XML mapping [serializers](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:serializer).\n    \n*   JDK [Collection](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:support) implementations on top of Redis.\n    \n*   Atomic [counter](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:support) support classes.\n    \n*   Sorting and Pipelining functionality.\n    \n*   Dedicated support for SORT, SORT/GET pattern and returned bulk values.\n    \n*   Redis [implementation](https://docs.spring.io/spring-data/data-redis/docs/current/reference/html/#redis:support:cache-abstraction) for Spring 3.1 cache abstraction.\n    \n*   Automatic implementation of `Repository` interfaces including support for custom query methods using `@EnableRedisRepositories`.\n    \n*   CDI support for repositories.\n    \n\n### [](#configure-redis-template)Configure RedisTemplate….\n\n    <bean id=\"jedisConnFactory\"\n        class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"\n        p:use-pool=\"true\"/>\n    \n    <!-- redis template definition -->\n    <bean id=\"redisTemplate\"\n        class=\"org.springframework.data.redis.core.RedisTemplate\"\n        p:connection-factory-ref=\"jedisConnFactory\"/>\n\n### [](#inject-redis-template)Inject and use RedisTemplate or any of its opsForX() instances….\n\n    public class Example {\n    \n        // inject the actual template\n        @Autowired\n        private RedisTemplate<String, String> template;\n    \n        // inject the template as ListOperations\n        // can also inject as Value, Set, ZSet, and HashOperations\n        @Resource(name=\"redisTemplate\")\n        private ListOperations<String, String> listOps;\n    \n        public void addLink(String userId, URL url) {\n            listOps.leftPush(userId, url.toExternalForm());\n            // or use template directly\n            redisTemplate.boundListOps(userId).leftPush(url.toExternalForm());\n        }\n    }",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-data-redis",
		"site": "http://spring.io/projects/spring-data-redis",
		"slug": "spring-data-redis",
		"order": 5,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.5.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/redis/docs/2.5.12/api/",
				"ref": "https://docs.spring.io/spring-data/redis/docs/2.5.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.5.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.7.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/redis/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/redis/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.7.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/redis/docs/3.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/redis/docs/3.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.4.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/redis/docs/2.4.15/api/",
				"ref": "https://docs.spring.io/spring-data/redis/docs/2.4.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.4.15"
      }
		],
		"support": [
			{
				"branch": "2.7.x",
				"initialDate": "2022-05-01",
				"ossPolicyEnd": "2023-05-01",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-01",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.6.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.5.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.4.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-09-21",
				"ossPolicyEnd": "2019-09-21",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2021-01-21",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data R2DBC",
		"body": "Spring Data R2DBC, part of the larger Spring Data family, makes it easy to implement R2DBC based repositories. R2DBC stands for [Reactive Relational Database Connectivity](https://r2dbc.io), a specification to integrate SQL databases using reactive drivers. Spring Data R2DBC applies familiar Spring abstractions and repository support for R2DBC. It makes it easier to build Spring-powered applications that use relational data access technologies in a reactive application stack.\n\nSpring Data R2DBC aims at being conceptually easy. In order to achieve this, it does NOT offer caching, lazy loading, write-behind, or many other features of ORM frameworks. This makes Spring Data R2DBC a simple, limited, opinionated object mapper.\n\nSpring Data R2DBC allows a functional approach to interact with your database providing `R2dbcEntityTemplate` as the entry point for applications.\n\nGet started by picking a database driver and create a `R2dbcEntityTemplate` instance:\n\n*   [H2](https://github.com/r2dbc/r2dbc-h2) (`io.r2dbc:r2dbc-h2`)\n    \n*   [MariaDB](https://github.com/mariadb-corporation/mariadb-connector-r2dbc) (`org.mariadb:r2dbc-mariadb`)\n    \n*   [Microsoft SQL Server](https://github.com/r2dbc/r2dbc-mssql) (`io.r2dbc:r2dbc-mssql`)\n    \n*   [MySQL](https://github.com/mirromutth/r2dbc-mysql) (`dev.miku:r2dbc-mysql`)\n    \n*   [jasync-sql MySQL](https://github.com/jasync-sql/jasync-sql) (`com.github.jasync-sql:jasync-r2dbc-mysql`)\n    \n*   [Postgres](https://github.com/pgjdbc/r2dbc-postgresql) (`io.r2dbc:r2dbc-postgresql`)\n    \n*   [Oracle](https://github.com/oracle/oracle-r2dbc) (`com.oracle.database.r2dbc:oracle-r2dbc`)\n    \n\nPostgreSQL Example\n\n    PostgresqlConnectionFactory connectionFactory = new PostgresqlConnectionFactory(PostgresqlConnectionConfiguration.builder()\n    \t\t.host(…)\n    \t\t.database(…)\n    \t\t.username(…)\n    \t\t.password(…).build());\n    \n    R2dbcEntityTemplate template = new R2dbcEntityTemplate(connectionFactory);\n    \n    Mono<Integer> update = template.update(Person.class)\n    \t\t\t\t.inTable(\"person_table\")\n    \t\t\t\t.matching(query(where(\"firstname\").is(\"John\")))\n    \t\t\t\t.apply(update(\"age\", 42));\n    \n    Flux<Person> all = template.select(Person.class)\n    \t\t\t.matching(query(where(\"firstname\").is(\"John\")\n    \t\t\t\t.and(\"lastname\").in(\"Doe\", \"White\"))\n    \t\t\t  .sort(by(desc(\"id\"))))\n    \t\t\t.all();\n\nRepository Example\n\n    interface PersonRepository extends ReactiveCrudRepository<Person, String> {\n    \n    \tFlux<Person> findByFirstname(String firstname);\n    \n    \t@Modifying\n    \t@Query(\"UPDATE person SET firstname = :firstname where lastname = :lastname\")\n    \tMono<Integer> setFixedFirstnameFor(String firstname, String lastname);\n    \n    \t@Query(\"SELECT * FROM person WHERE lastname = :#{[0]}\")\n    \tFlux<Person> findByQueryWithExpression(String lastname);\n    \n    }\n\nThe client API provides covers the following features:\n\n*   Running statements for mapped entities using the Criteria API built on top of Spring Framework’s R2DBC [`DatabaseClient`](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/r2dbc/core/DatabaseClient.html).\n    \n*   Parameter binding using the native syntax.\n    \n*   Result consumption: Update count, unmapped (`Map<String, Object>`), mapped to entities, extraction function.\n    \n*   Reactive repositories using `@Query` annotated methods.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/r2dbc",
		"github": "http://github.com/spring-projects/spring-data-r2dbc",
		"site": "http://spring.io/projects/spring-data-r2dbc",
		"slug": "spring-data-r2dbc",
		"order": 6,
		"samples": [
			{
				"url": "https://github.com/spring-projects/spring-data-examples/tree/master/r2dbc/example",
				"order": 1,
				"title": "Spring Data R2DBC Examples",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.3.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/r2dbc/docs/1.3.12/api/",
				"ref": "https://docs.spring.io/spring-data/r2dbc/docs/1.3.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.3.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.5.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/r2dbc/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/r2dbc/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "1.5.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/r2dbc/docs/3.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/r2dbc/docs/3.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.2.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/r2dbc/docs/1.2.15/api/",
				"ref": "https://docs.spring.io/spring-data/r2dbc/docs/1.2.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.2.15"
      }
		],
		"support": [
			{
				"branch": "1.4.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "1.3.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "1.2.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "1.1.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "1.5.x",
				"initialDate": "2022-05-13",
				"ossPolicyEnd": "2023-05-13",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-13",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data Neo4j",
		"body": "Spring Data Neo4j, part of the larger Spring Data family, provides easy configuration and access to Neo4j Graph Databases from Spring applications. It offers three different levels of abstraction to access the store. The Neo4j client, the Neo4j Template, and the Neo4j Repositories. Spring Data Neo4j offers advanced features to map annotated entity classes to the Neo4j Graph Database. The template programming model is equivalent to other Spring templates and builds the basis for interaction with the graph and is also used for the Spring Data repository support. Spring Data Neo4j is a core part of the Spring Data project which aims to provide convenient data access for NoSQL databases.\n\n[](#features)Features\n---------------------\n\n*   Different levels of abstraction based on the [Neo4j Java driver](https://neo4j.com/developer/java/#java-driver).\n    \n*   Reactive and imperative operation mode.\n    \n*   Immutable mapping.\n    \n*   Neo4j Client for low-level abstraction.\n    \n*   Neo4j Template and Repositories for high-level abstraction.\n    \n*   Support for Spring’s Conversion Service\n    \n*   Custom query via `@Query`",
		"springBootConfig": "",
		"status": "COMMUNITY",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-neo4j",
		"github": "http://github.com/spring-projects/spring-data-neo4j",
		"site": "http://spring.io/projects/spring-data-neo4j",
		"slug": "spring-data-neo4j",
		"order": 14,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "7.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "6.1.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/neo4j/docs/6.1.12/api/",
				"ref": "https://docs.spring.io/spring-data/neo4j/docs/6.1.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "6.1.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "6.3.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/neo4j/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/neo4j/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "6.3.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/neo4j/docs/7.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/neo4j/docs/7.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "7.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "6.0.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/neo4j/docs/6.0.15/api/",
				"ref": "https://docs.spring.io/spring-data/neo4j/docs/6.0.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "6.0.15"
      }
		],
		"support": []
	},
	{
		"title": "Spring Data MongoDB",
		"body": "Spring Data for [MongoDB](https://www.mongodb.org/) is part of the umbrella Spring Data project which aims to provide a familiar and consistent Spring-based programming model for new datastores while retaining store-specific features and capabilities.\n\n[](#introduction)Introduction\n-----------------------------\n\nThe Spring Data MongoDB project provides integration with the MongoDB document database. Key functional areas of Spring Data MongoDB are a POJO centric model for interacting with a MongoDB DBCollection and easily writing a Repository style data access layer.\n\n[](#features)Features\n---------------------\n\n*   Spring configuration support using Java based @Configuration classes or an XML namespace for a Mongo driver instance and replica sets.\n    \n*   MongoTemplate helper class that increases productivity performing common Mongo operations. Includes integrated object mapping between documents and POJOs.\n    \n*   Exception translation into Spring’s portable Data Access Exception hierarchy\n    \n*   Feature Rich Object Mapping integrated with Spring’s Conversion Service\n    \n*   Annotation based mapping metadata but extensible to support other metadata formats\n    \n*   Persistence and mapping lifecycle events\n    \n*   Low-level mapping using MongoReader/MongoWriter abstractions\n    \n*   Java based Query, Criteria, and Update DSLs\n    \n*   Automatic implementation of Repository interfaces including support for custom query methods.\n    \n*   QueryDSL integration to support type-safe queries. GeoSpatial integration\n    \n*   Map-Reduce integration\n    \n*   JMX administration and monitoring\n    \n*   CDI support for repositories\n    \n*   GridFS support",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-data-mongodb",
		"site": "http://spring.io/projects/spring-data-mongodb",
		"slug": "spring-data-mongodb",
		"order": 5,
		"samples": [
			{
				"url": "https://github.com/spring-projects/spring-data-book",
				"order": 1,
				"title": "Spring Data Book",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.2.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/mongodb/docs/3.2.12/api/",
				"ref": "https://docs.spring.io/spring-data/mongodb/docs/3.2.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.2.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.4.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/mongodb/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.4.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/mongodb/docs/4.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/mongodb/docs/4.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/mongodb/docs/3.1.15/api/",
				"ref": "https://docs.spring.io/spring-data/mongodb/docs/3.1.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.1.15"
      }
		],
		"support": [
			{
				"branch": "3.4.x",
				"initialDate": "2022-05-01",
				"ossPolicyEnd": "2023-05-01",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-01",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.3.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.2.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-09-21",
				"ossPolicyEnd": "2019-09-21",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2021-01-21",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data LDAP",
		"body": "Spring Data for Spring LDAP is part of the umbrella Spring Data project which aims to provide a familiar and consistent Repository abstractions for new Spring LDAP.\n\n[](#introduction)Introduction\n-----------------------------\n\nThe Spring Data LDAP project provides repository abstractions for Spring LDAP on top of Spring LDAP’s `LdapTemplate` and [Object-Directory Mapping](https://docs.spring.io/spring-ldap/docs/current/reference/#odm).\n\n[](#features)Features\n---------------------\n\n*   Spring configuration support using Java-based `@Configuration` classes or an XML namespace.\n    \n*   Annotation based mapping metadata\n    \n*   Automatic implementation of Repository interfaces including support for custom query methods.\n    \n*   QueryDSL integration to support type-safe queries.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-data-ldap",
		"site": "http://spring.io/projects/spring-data-ldap",
		"slug": "spring-data-ldap",
		"order": 5,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.5.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/ldap/docs/2.5.12/api/",
				"ref": "https://docs.spring.io/spring-data/ldap/docs/2.5.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.5.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.7.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/ldap/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/ldap/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.7.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/ldap/docs/3.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/ldap/docs/3.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.4.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/ldap/docs/2.4.15/api/",
				"ref": "https://docs.spring.io/spring-data/ldap/docs/2.4.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.4.15"
      }
		],
		"support": [
			{
				"branch": "2.6.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.5.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.4.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.7.x",
				"initialDate": "2022-05-01",
				"ossPolicyEnd": "2023-05-01",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-01",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-09-21",
				"ossPolicyEnd": "2019-09-21",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2021-01-21",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data JPA",
		"body": "Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA based repositories. This module deals with enhanced support for JPA based data access layers. It makes it easier to build Spring-powered applications that use data access technologies.\n\nImplementing a data access layer of an application has been cumbersome for quite a while. Too much boilerplate code has to be written to execute simple queries as well as perform pagination, and auditing. Spring Data JPA aims to significantly improve the implementation of data access layers by reducing the effort to the amount that’s actually needed. As a developer you write your repository interfaces, including custom finder methods, and Spring will provide the implementation automatically.\n\n[](#features)Features\n---------------------\n\n*   Sophisticated support to build repositories based on Spring and JPA\n    \n*   Support for [Querydsl](http://www.querydsl.com/) predicates and thus type-safe JPA queries\n    \n*   Transparent auditing of domain class\n    \n*   Pagination support, dynamic query execution, ability to integrate custom data access code\n    \n*   Validation of `@Query` annotated queries at bootstrap time\n    \n*   Support for XML based entity mapping\n    \n*   JavaConfig based repository configuration by introducing `@EnableJpaRepositories`.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-data-jpa",
		"site": "http://spring.io/projects/spring-data-jpa",
		"slug": "spring-data-jpa",
		"order": 5,
		"samples": [
			{
				"url": "https://github.com/spring-projects/spring-data-examples/tree/master/jpa",
				"order": 1,
				"title": "Spring Data JPA Examples ",
				"description": ""
			},
			{
				"url": "https://github.com/spring-projects/spring-data-book/tree/master/jpa",
				"order": 2,
				"title": "Spring Data Book Examples",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.5.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/jpa/docs/2.5.12/api/",
				"ref": "https://docs.spring.io/spring-data/jpa/docs/2.5.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.5.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.7.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/jpa/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/jpa/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.7.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/jpa/docs/3.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/jpa/docs/3.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.4.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/jpa/docs/2.4.15/api/",
				"ref": "https://docs.spring.io/spring-data/jpa/docs/2.4.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.4.15"
      }
		],
		"support": [
			{
				"branch": "2.6.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.5.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.4.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-10-28",
				"ossPolicyEnd": "2020-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.7.x",
				"initialDate": "2022-05-13",
				"ossPolicyEnd": "2023-05-13",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-13",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data JDBC Extensions",
		"body": "> **NOTICE: This project is no longer actively developed and will be moved to the attic later this year.**\n\nSpring Data JDBC Extensions is part of the umbrella [Spring Data](https://spring.io/projects/spring-data) project. The JDBC support in the Spring Framework is extensive and covers the most commonly used features. This extension project provides additional support for working with advanced Oracle database features.\n\nThe bulk of the support is made up of code ported from the SpringSource project \"Advanced Pack for Oracle Database\" that was available for support subscription customers. We are now making this code available to all Spring users and any new developments will be made in the Spring Data JDBC Extensions project.\n\n[](#features)Features\n---------------------\n\n#### [](#core-features)Core\n\n*   QueryDSL Support (Deprecated as of version 1.2.0) - Support for using the QueryDSL SQL module with a [QueryDslJdbcTemplate](http://static.springsource.org/spring-data/data-jdbc/docs/1.0.0.RELEASE/reference/html/core.querydsl.html) that combines the functionality of QueryDSL and the familiar JdbcTemplate. This provides a type-safe API for query, insert, update and delete operations combined with the conveniences of Spring’s JdbcTemplate support, e.g. RowMapper, resource management, declarative transaction management, etc.\n    \n\n#### [](#oracle-features)Oracle\n\n*   RAC \"Fast Connection Failover\" - The RAC \"Fast Connection Failover\" provides the ability to have a Spring application transparently failover when a database node fails.\n    \n*   Streams AQ (Advanced Queueing) - The AQ support provides the option of using a single local transaction manager for both database and message access without resorting to expensive distributed 2-phase commit transaction management.\n    \n*   XML Types - Custom classes, examples and documentation on how to use Oracle JDBC extensions for their native XML Type.\n    \n*   Advanced Data Types - Custom classes, examples and documentation on how to use Oracle JDBC extensions for their advanced data types like STRUCT and ARRAY.\n    \n*   Custom DataSource Connection Preparer - This feature provides an API for customizing the connection environment with Oracle specific session settings etc.",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-jdbc",
		"github": "http://github.com/spring-projects/spring-data-jdbc-ext",
		"site": "http://spring.io/projects/spring-data-jdbc-ext",
		"slug": "spring-data-jdbc-ext",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/SpringSource/spring-data-book",
				"order": 1,
				"title": "Spring Data book examples",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-data/jdbc/old-docs/2.0.0.M1/api/",
				"ref": "http://docs.spring.io/spring-data/jdbc/old-docs/2.0.0.M1/reference/html",
				"status": "PRERELEASE",
				"current": false,
				"version": "2.0.0.M1"
      },
			{
				"api": "http://docs.spring.io/spring-data/jdbc/old-docs/2.0.0.BUILD-SNAPSHOT/api/",
				"ref": "http://docs.spring.io/spring-data/jdbc/old-docs/2.0.0.BUILD-SNAPSHOT/reference/html",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.0.0.BUILD-SNASHOT"
      },
			{
				"api": "http://docs.spring.io/spring-data/jdbc/old-docs/1.2.1.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-data/jdbc/old-docs/1.2.1.RELEASE/reference/html",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "1.2.1.RELEASE"
      }
		],
		"support": []
	},
	{
		"title": "Spring Data JDBC",
		"body": "Spring Data JDBC, part of the larger Spring Data family, makes it easy to implement JDBC based repositories. This module deals with enhanced support for JDBC based data access layers. It makes it easier to build Spring powered applications that use data access technologies.\n\nSpring Data JDBC aims at being conceptually easy. In order to achieve this it does NOT offer caching, lazy loading, write behind or many other features of JPA. This makes Spring Data JDBC a simple, limited, opinionated ORM.\n\n[](#aggregate-root)The Aggregate Root\n-------------------------------------\n\nSpring Data repositories are inspired by the repository as described in the book Domain Driven Design by Eric Evans. One consequence of this is that you should have a repository per Aggregate Root. Aggregate Root is another concept from the same book and describes an entity which controls the lifecycle of other entities which together are an Aggregate. An Aggregate is a subset of your model which is consistent between method calls to your Aggregate Root.\n\nSpring Data JDBC tries its best to encourage modeling your domain along these ideas.\n\n[](#features)Features\n---------------------\n\n*   CRUD operations for simple aggregates with customizable `NamingStrategy`.\n    \n*   Support for `@Query` annotations.\n    \n*   Support for MyBatis queries.\n    \n*   Events.\n    \n*   JavaConfig based repository configuration by introducing `@EnableJdbcRepositories`.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-jdbc",
		"github": "http://github.com/spring-projects/spring-data-jdbc",
		"site": "http://spring.io/projects/spring-data-jdbc",
		"slug": "spring-data-jdbc",
		"order": 5,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/jdbc/docs/2.2.12/api/",
				"ref": "https://docs.spring.io/spring-data/jdbc/docs/2.2.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.4.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/jdbc/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.4.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/jdbc/docs/3.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/jdbc/docs/3.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.1.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/jdbc/docs/2.1.15/api/",
				"ref": "https://docs.spring.io/spring-data/jdbc/docs/2.1.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.1.15"
      }
		],
		"support": [
			{
				"branch": "1.0.x",
				"initialDate": "2018-09-21",
				"ossPolicyEnd": "2019-09-21",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2021-01-21",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "1.1.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.0.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.3.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.4.x",
				"initialDate": "2022-05-13",
				"ossPolicyEnd": "2023-05-13",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-13",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data for Apache Geode",
		"body": "The primary goal of the Spring Data for Apache Geode project is to make it easier to build highly scalable Spring powered applications using Apache Geode for distributed data management.\n\nSpring Data for Apache Geode brings the full power of the Spring Framework to your Apache Geode applications.\n\n[](#features)Features\n---------------------\n\n*   XML namespace to [configure and create Apache Geode resources declaratively with Spring](http://docs.spring.io/spring-data-geode/docs/current/reference/html/#bootstrap)\n    \n*   Annotation configuration model to [quickly and easily get started with Apache Geode out-of-the-box](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#bootstrap-annotation-config)\n    \n*   Simplifies [working with Apache Geode APIs](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#apis)\n    \n*   [Spring Cache Abstraction backed by Apache Geode](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#apis:spring-cache-abstraction)\n    \n*   [Spring Data Mapping infrastructure applied to POJOs stored in Apache Geode](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#mapping)\n    \n*   [Spring Data Repositories backed by Apache Geode](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#gemfire-repositories)\n    \n*   [Apache Geode Cache Transactions through Spring’s Declarative Transaction Management](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#apis:transaction-management)\n    \n*   [Additional support for using Apache Geode in Global, JTA Transactions through Spring’s Declarative Transaction Management](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#apis:global-transaction-management)\n    \n*   [Enhanced support for Apache Geode Serialization](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#serialization)\n    \n*   [Annotations for Function Executions](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#function-annotations)\n    \n*   [Support for Continuous Query](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#apis:continuous-query)\n    \n*   [Enhanced support for Apache Lucene Integration](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#bootstrap:lucene)\n    \n*   [Bootstrapping a Spring Context with Apache Geode](https://docs.spring.io/spring-data/geode/docs/current/reference/html/#gemfire-bootstrap)\n    \n*   Spring Tool Suite [Spring Project Templates for Apache Geode](http://docs.spring.io/sts/nan/v310/NewAndNoteworthy.html)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-gemfire,spring-data-geode",
		"github": "http://github.com/spring-projects/spring-data-geode",
		"site": "http://spring.io/projects/spring-data-geode",
		"slug": "spring-data-geode",
		"order": 8,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.5.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/geode/docs/2.5.12/api/",
				"ref": "https://docs.spring.io/spring-data/geode/docs/2.5.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.5.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.7.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/geode/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/geode/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.7.5"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.4.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/geode/docs/2.4.15/api/",
				"ref": "https://docs.spring.io/spring-data/geode/docs/2.4.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.4.15"
      }
		],
		"support": [
			{
				"branch": "2.7.x",
				"initialDate": "2022-05-01",
				"ossPolicyEnd": "2023-05-01",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-01",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.6.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.5.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.4.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-09-21",
				"ossPolicyEnd": "2019-09-21",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2021-01-21",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data for VMware Tanzu GemFire",
		"body": "**This project is no longer maintained and is not recommended for new projects. Use [Spring Data for Apache Geode](https://spring.io/projects/spring-data-geode) instead.**\n\nThe primary goal of the Spring Data for VMware Tanzu GemFire project is to make it easier to build highly scalable Spring powered applications using VMware Tanzu GemFire for distributed data management.\n\nSpring Data for VMware Tanzu GemFire brings the full power of the Spring Framework to your VMware Tanzu GemFire applications.\n\n[](#features)Features\n---------------------\n\n*   XML namespace to [configure and create VMware Tanzu GemFire resources declaratively with Spring](http://docs.spring.io/spring-data-gemfire/docs/current/reference/html/#bootstrap)\n    \n*   Annotation configuration model to [quickly and easily get started with VMware Tanzu GemFire out-of-the-box](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#bootstrap-annotation-config)\n    \n*   Simplifies [working with VMware Tanzu GemFire APIs](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#apis)\n    \n*   [Spring Cache Abstraction backed by VMware Tanzu GemFire](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#apis:spring-cache-abstraction)\n    \n*   [Spring Data Mapping infrastructure applied to POJOs stored in VMware Tanzu GemFire](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#mapping)\n    \n*   [Spring Data Repositories backed by VMware Tanzu GemFire](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#gemfire-repositories)\n    \n*   [VMware Tanzu GemFire Cache Transactions through Spring’s Declarative Transaction Management](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#apis:transaction-management)\n    \n*   Additional support for [using VMware Tanzu GemFire in Global, JTA Transactions through Spring’s Declarative Transaction Management](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#apis:global-transaction-management)\n    \n*   [Enhanced support for VMware Tanzu GemFire Serialization](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#serialization)\n    \n*   [Annotations for Function Executions](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#function-annotations)\n    \n*   [Support for Continuous Query](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#apis:continuous-query)\n    \n*   [Enhanced support for Apache Lucene Integration](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#bootstrap:lucene)\n    \n*   [Bootstrapping a Spring Context with VMware Tanzu GemFire](https://docs.spring.io/spring-data/gemfire/docs/current/reference/html/#gemfire-bootstrap)\n    \n*   Spring Tool Suite [Spring Project Templates for VMware GemFire](http://docs.spring.io/sts/nan/v310/NewAndNoteworthy.html)",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-gemfire",
		"github": "https://github.com/spring-projects/spring-data-geode/tree/2.3.x",
		"site": "http://spring.io/projects/spring-data-gemfire",
		"slug": "spring-data-gemfire",
		"order": 10,
		"samples": [],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-data/geode/docs/2.3.9.RELEASE/api/",
				"ref": "https://docs.spring.io/spring-data/geode/docs/2.3.9.RELEASE/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.3.9.RELEASE"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "2020-09-30",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": "2022-01-30"
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-09-21",
				"ossPolicyEnd": "2019-10-30",
				"ossEnforcedEnd": "2019-10-30",
				"commercialPolicyEnd": "2021-02-28",
				"commercialEnforcedEnd": "2021-02-28"
			},
			{
				"branch": "2.0.x",
				"initialDate": "2017-10-02",
				"ossPolicyEnd": "2018-10-02",
				"ossEnforcedEnd": "2018-10-02",
				"commercialPolicyEnd": "2020-02-02",
				"commercialEnforcedEnd": "2020-02-02"
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "2021-05-12",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": "2022-09-12"
			}
		]
	},
	{
		"title": "Spring Data Envers",
		"body": "This project is an extension of the Spring Data JPA project to allow access to entity revisions managed by Hibernate Envers. The sources mostly originate from a contribution of Philipp Hügelmeyer [@hygl](https://github.com/hygl).",
		"springBootConfig": "",
		"status": "COMMUNITY",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-envers",
		"github": "http://github.com/spring-projects/spring-data-envers",
		"site": "http://spring.io/projects/spring-data-envers",
		"slug": "spring-data-envers",
		"order": 13,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.5.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/envers/docs/2.5.12/api/",
				"ref": "https://docs.spring.io/spring-data/envers/docs/2.5.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.5.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.7.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/envers/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/envers/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.7.5"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.4.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/envers/docs/2.4.15/api/",
				"ref": "https://docs.spring.io/spring-data/envers/docs/2.4.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.4.15"
      }
		],
		"support": [
			{
				"branch": "2.6.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.5.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.4.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.7.x",
				"initialDate": "2022-05-13",
				"ossPolicyEnd": "2023-05-13",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-13",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data Elasticsearch",
		"body": "Spring Data for Elasticsearch is part of the umbrella Spring Data project which aims to provide a familiar and consistent Spring-based programming model for for new datastores while retaining store-specific features and capabilities.\n\nThe Spring Data Elasticsearch project provides integration with the Elasticsearch search engine. Key functional areas of Spring Data Elasticsearch are a POJO centric model for interacting with a Elastichsearch Documents and easily writing a Repository style data access layer.\n\n[](#features)Features\n---------------------\n\n*   Spring configuration support using Java based `@Configuration` classes or an XML namespace for a ES clients instances.\n    \n*   `ElasticsearchTemplate` helper class that increases productivity performing common ES operations. Includes integrated object mapping between documents and POJOs.\n    \n*   Feature Rich Object Mapping integrated with Spring’s Conversion Service\n    \n*   Annotation based mapping metadata but extensible to support other metadata formats\n    \n*   Automatic implementation of `Repository` interfaces including support for custom finder methods.\n    \n*   CDI support for repositories",
		"springBootConfig": "",
		"status": "COMMUNITY",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-elasticsearch",
		"github": "http://github.com/spring-projects/spring-data-elasticsearch",
		"site": "http://spring.io/projects/spring-data-elasticsearch",
		"slug": "spring-data-elasticsearch",
		"order": 12,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "5.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.2.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/elasticsearch/docs/4.2.12/api/",
				"ref": "https://docs.spring.io/spring-data/elasticsearch/docs/4.2.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "4.2.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.4.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/elasticsearch/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "4.4.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/elasticsearch/docs/5.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/elasticsearch/docs/5.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "5.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.1.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/elasticsearch/docs/4.1.15/api/",
				"ref": "https://docs.spring.io/spring-data/elasticsearch/docs/4.1.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "4.1.15"
      }
		],
		"support": []
	},
	{
		"title": "Spring Data Couchbase",
		"body": "Spring Data for Couchbase is part of the umbrella Spring Data project which aims to provide a familiar and consistent Spring-based programming model for new datastores while retaining store-specific features and capabilities.\n\nThe Spring Data Couchbase project provides integration with the Couchbase Server database. Key functional areas of Spring Data Couchbase are a POJO centric model for interacting with Couchbase Buckets and easily writing a Repository style data access layer.\n\n[](#features)Features\n---------------------\n\n*   Spring configuration support using Java based `@Configuration` classes or an XML namespace for the Couchbase driver (Java SDK version 2.x).\n    \n*   `CouchbaseTemplate` helper class that increases productivity performing common Couchbase operations. Includes integrated object mapping between documents and POJOs.\n    \n*   Exception translation into Spring’s portable Data Access Exception hierarchy.\n    \n*   Feature Rich Object Mapping integrated with Spring’s Conversion Service.\n    \n*   Annotation based mapping metadata but extensible to support other metadata formats.\n    \n*   Automatic implementation of `Repository` interfaces including support for custom finder methods (backed by Couchbase’s query language, `N1QL`) and `PagingAndSortingRepository`.\n    \n*   For Couchbase server versions < 4.0, repositories can still be backed by Couchbase Views.\n    \n*   Support for geospatial and multidimensional querying (backed by Couchbase Spatial Views)\n    \n*   JMX administration and monitoring\n    \n*   Can serve as the backend for `@Cacheable` support, to cache any objects you need for high performance access (see sibling Spring Cache project in Couchbase’s github, [couchbaselabs/couchbase-spring-cache](https://github.com/couchbaselabs/couchbase-spring-cache)).",
		"springBootConfig": "",
		"status": "COMMUNITY",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-projects/spring-data-couchbase",
		"site": "http://spring.io/projects/spring-data-couchbase",
		"slug": "spring-data-couchbase",
		"order": 11,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "5.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.2.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/couchbase/docs/4.2.12/api/",
				"ref": "https://docs.spring.io/spring-data/couchbase/docs/4.2.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "4.2.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.4.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/couchbase/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/couchbase/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "4.4.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/couchbase/docs/5.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/couchbase/docs/5.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "5.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.1.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/couchbase/docs/4.1.15/api/",
				"ref": "https://docs.spring.io/spring-data/couchbase/docs/4.1.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "4.1.15"
      }
		],
		"support": []
	},
	{
		"title": "Spring Data for Apache Cassandra",
		"body": "The Apache Cassandra NoSQL Database offers many new capabilities for teams seeking a solution to handle high velocity, high volume and variable data flows. This new way of thinking introduces new concepts and a learning curve that can be intimidating to team members and team managers. Spring Data for Apache Cassandra offers a familiar interface to those who have used other Spring Data modules in the past.\n\nThe learning curve for developing applications with Apache Cassandra is significantly reduced when using Spring Data for Apache Cassandra. With the power to stay at a high level with annotated POJOs, or at a low level with high performance data ingestion capabilities, the Spring Data for Apache Cassandra templates are sure to meet every application need.\n\n[](#features)Features\n---------------------\n\n*   Build repositories based on common Spring Data interfaces\n    \n*   Support for synchronous, reactive, and asynchronous data operations\n    \n*   Support for XML based Keyspace creation and CQL Table creation\n    \n*   JavaConfig and XML Support for all Cluster and Session Capabilities\n    \n*   Exception Translation to the familiar Spring DataAccessException hierarchy\n    \n*   Convenient QueryBuilders to eliminate the need to learn CQL\n    \n*   Automatic implementation of Repository interfaces including support for custom query methods\n    \n*   2.x versions are based on the 3.x DataStax CQL Java Driver, 3.x versions use DataStax Java Driver 4.x",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data-cassandra",
		"github": "http://github.com/spring-projects/spring-data-cassandra",
		"site": "http://spring.io/projects/spring-data-cassandra",
		"slug": "spring-data-cassandra",
		"order": 7,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.2.13-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/cassandra/docs/3.2.12/api/",
				"ref": "https://docs.spring.io/spring-data/cassandra/docs/3.2.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.2.12"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.4.6-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/cassandra/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.4.5"
      },
			{
				"api": "https://docs.spring.io/spring-data/cassandra/docs/4.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/cassandra/docs/4.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-RC2"
      },
			{
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.16-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-data/cassandra/docs/3.1.15/api/",
				"ref": "https://docs.spring.io/spring-data/cassandra/docs/3.1.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.1.15"
      }
		],
		"support": [
			{
				"branch": "3.4.x",
				"initialDate": "2022-05-01",
				"ossPolicyEnd": "2023-05-01",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-09-01",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.3.x",
				"initialDate": "2021-11-12",
				"ossPolicyEnd": "2022-11-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.2.x",
				"initialDate": "2021-04-14",
				"ossPolicyEnd": "2022-04-14",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-08-14",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2020-10-28",
				"ossPolicyEnd": "2021-10-28",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-02-28",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-05-12",
				"ossPolicyEnd": "2021-05-12",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-09-12",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-09-30",
				"ossPolicyEnd": "2020-09-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-30",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-09-21",
				"ossPolicyEnd": "2019-09-21",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2021-01-21",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Data",
		"body": "Spring Data’s mission is to provide a familiar and consistent, Spring-based programming model for data access while still retaining the special traits of the underlying data store.\n\nIt makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services. This is an umbrella project which contains many subprojects that are specific to a given database. The projects are developed by working together with many of the companies and developers that are behind these exciting technologies.\n\n[](#features)Features\n---------------------\n\n*   Powerful repository and custom object-mapping abstractions\n    \n*   Dynamic query derivation from repository method names\n    \n*   Implementation domain base classes providing basic properties\n    \n*   Support for transparent auditing (created, last changed)\n    \n*   Possibility to integrate custom repository code\n    \n*   Easy Spring integration via JavaConfig and custom XML namespaces\n    \n*   Advanced integration with Spring MVC controllers\n    \n*   Experimental support for cross-store persistence\n    \n\n[](#main-modules)Main modules\n-----------------------------\n\n*   [Spring Data Commons](https://github.com/spring-projects/spring-data-commons) - Core Spring concepts underpinning every Spring Data module.\n    \n*   [Spring Data JDBC](https://spring.io/projects/spring-data-jdbc) - Spring Data repository support for JDBC.\n    \n*   [Spring Data JDBC Ext](https://spring.io/projects/spring-data-jdbc-ext) - Support for database specific extensions to standard JDBC including support for Oracle RAC fast connection failover, AQ JMS support and support for using advanced data types.\n    \n*   [Spring Data JPA](https://spring.io/projects/spring-data-jpa) - Spring Data repository support for JPA.\n    \n*   [Spring Data KeyValue](https://github.com/spring-projects/spring-data-keyvalue) - `Map` based repositories and SPIs to easily build a Spring Data module for key-value stores.\n    \n*   [Spring Data LDAP](https://spring.io/projects/spring-data-ldap) - Spring Data repository support for [Spring LDAP](https://github.com/spring-projects/spring-ldap).\n    \n*   [Spring Data MongoDB](https://spring.io/projects/spring-data-mongodb) - Spring based, object-document support and repositories for MongoDB.\n    \n*   [Spring Data Redis](https://spring.io/projects/spring-data-redis) - Easy configuration and access to Redis from Spring applications.\n    \n*   [Spring Data REST](https://spring.io/projects/spring-data-rest) - Exports Spring Data repositories as hypermedia-driven RESTful resources.\n    \n*   [Spring Data for Apache Cassandra](https://spring.io/projects/spring-data-cassandra) - Easy configuration and access to Apache Cassandra or large scale, highly available, data oriented Spring applications.\n    \n*   [Spring Data for Apache Geode](https://spring.io/projects/spring-data-geode) - Easy configuration and access to Apache Geode for highly consistent, low latency, data oriented Spring applications.\n    \n*   [Spring Data for VMware Tanzu GemFire](https://spring.io/projects/spring-data-gemfire) - Easy configuration and access to Pivotal GemFire for your highly consistent, low latency/high through-put, data-oriented Spring applications.\n    \n\n[](#community-modules)Community modules\n---------------------------------------\n\n*   [Spring Data Aerospike](https://github.com/aerospike-community/spring-data-aerospike) - Spring Data module for Aerospike.\n    \n*   [Spring Data ArangoDB](https://github.com/arangodb/spring-data) - Spring Data module for ArangoDB.\n    \n*   [Spring Data Couchbase](https://spring.io/projects/spring-data-couchbase) - Spring Data module for Couchbase.\n    \n*   [Spring Data Azure Cosmos DB](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/cosmos/azure-spring-data-cosmos) - Spring Data module for Microsoft Azure Cosmos DB.\n    \n*   [Spring Data Cloud Datastore](https://github.com/spring-cloud/spring-cloud-gcp) - Spring Data module for Google Datastore.\n    \n*   [Spring Data Cloud Spanner](https://github.com/spring-cloud/spring-cloud-gcp) - Spring Data module for Google Spanner.\n    \n*   [Spring Data DynamoDB](https://github.com/boostchicken/spring-data-dynamodb) - Spring Data module for DynamoDB.\n    \n*   [Spring Data Elasticsearch](https://spring.io/projects/spring-data-elasticsearch) - Spring Data module for Elasticsearch.\n    \n*   [Spring Data Hazelcast](https://github.com/hazelcast/spring-data-hazelcast) - Provides Spring Data repository support for Hazelcast.\n    \n*   [Spring Data Jest](https://github.com/VanRoy/spring-data-jest) - Spring Data module for Elasticsearch based on the Jest REST client.\n    \n*   [Spring Data Neo4j](https://spring.io/projects/spring-data-neo4j) - Spring-based, object-graph support and repositories for Neo4j.\n    \n*   [Oracle NoSQL Database SDK for Spring Data](https://github.com/oracle/nosql-spring-sdk) - Spring Data module for Oracle NoSQL Database and Oracle NoSQL Cloud Service.\n    \n*   [Spring Data for Apache Solr](https://spring.io/projects/spring-data-solr) - Easy configuration and access to Apache Solr for your search-oriented Spring applications.\n    \n*   [Spring Data Vault](https://spring.io/projects/spring-vault/) - Vault repositories built on top of [Spring Data KeyValue](https://github.com/spring-projects/spring-data-keyvalue).\n    \n*   [Spring Data YugabyteDB](https://github.com/yugabyte/spring-data-yugabytedb) - Spring Data module for [YugabyteDB](https://www.yugabyte.com/) distributed SQL database.\n    \n\n[](#related-modules)Related modules\n-----------------------------------\n\n*   Spring Data JDBC Extensions - Provides extensions to the JDBC support provided in the Spring Framework.\n    \n*   Spring for Apache Hadoop - Simplifies Apache Hadoop by providing a unified configuration model and easy to use APIs for using HDFS, MapReduce, Pig, and Hive.\n    \n*   Spring Content - Associate content with your Spring Data Entities and store it in a number of different stores including the File-system, S3, Database or Mongo’s GridFS.\n    \n\n[](#incumbation-modules)Modules in Incubation\n---------------------------------------------\n\n*   [Spring Data R2DBC](https://spring.io/projects/spring-data-r2dbc) - Spring Data support for R2DBC.\n    \n\n[](#release-train)Release train\n-------------------------------\n\nSpring Data is an umbrella project consisting of independent projects with, in principle, different release cadences. To manage the portfolio, a BOM (Bill of Materials - see this example) is published with a curated set of dependencies on the individual project. The release trains have names, not versions, to avoid confusion with the sub-projects.\n\nThe names are an alphabetic sequence (so you can sort them chronologically) with names of famous computer scientists and software developers. When point releases of the individual projects accumulate to a critical mass, or if there is a critical bug in one of them that needs to be available to everyone, the release train will push out “service releases” with names ending “-SRX”, where “X” is a number.\n\nCurrently, the release train contains the following modules:\n\n*   Spring Data Commons\n    \n*   Spring Data JPA\n    \n*   Spring Data KeyValue\n    \n*   Spring Data LDAP\n    \n*   Spring Data MongoDB\n    \n*   Spring Data Redis\n    \n*   Spring Data REST\n    \n*   Spring Data for Apache Cassandra\n    \n*   Spring Data for Apache Geode\n    \n*   Spring Data for Apache Solr\n    \n*   Spring Data for Pivotal GemFire\n    \n*   Spring Data Couchbase (community module)\n    \n*   Spring Data Elasticsearch (community module)\n    \n*   Spring Data Neo4j (community module)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Provides a consistent approach to data access – relational, non-relational, map-reduce, and beyond.",
		"image": "spring-data.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-data,spring-data-jpa,spring-data-neo4j,spring-data-mongodb,spring-data-rest,spring-data-solr,spring-data-gemfire,spring-data-elasticsearch,spring-data-couchbase,spring-data-cassandra,spring-data-redis",
		"github": "http://github.com/spring-projects/spring-data",
		"site": "http://spring.io/projects/spring-data",
		"slug": "spring-data",
		"order": 5,
		"samples": [],
		"documentation": [
			{
				"version": "2022.0.0-SNAPSHOT",
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2021.0.13-SNAPSHOT",
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2021.0.12",
				"api": "https://docs.spring.io/spring-data/commons/docs/2.5.12/api/",
				"ref": "https://docs.spring.io/spring-data/commons/docs/2.5.12/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2021.2.6-SNAPSHOT",
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2021.2.5",
				"api": "https://docs.spring.io/spring-data/commons/docs/current/api/",
				"ref": "https://docs.spring.io/spring-data/commons/docs/current/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2022.0.0-RC2",
				"api": "https://docs.spring.io/spring-data/commons/docs/3.0.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-data/commons/docs/3.0.0-RC2/reference/html/",
				"status": "PRERELEASE",
				"current": false
			},
			{
				"version": "2020.0.16-SNAPSHOT",
				"api": "",
				"ref": "",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2020.0.15",
				"api": "https://docs.spring.io/spring-data/commons/docs/2.4.15/api/",
				"ref": "https://docs.spring.io/spring-data/commons/docs/2.4.15/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring CredHub",
		"body": "Spring CredHub provides client-side support for storing, retrieving, and deleting credentials from a [CredHub](https://github.com/cloudfoundry-incubator/credhub) server running in a [Cloud Foundry](https://www.cloudfoundry.org/) platform.\n\n[CredHub](https://github.com/cloudfoundry-incubator/credhub) provides an [API](http://credhub-api.cfapps.io/) to securely store, generate, retrieve, and delete credentials of various types. Spring CredHub provides a Java binding for the CredHub API, making it easy to integrate Spring applications with CredHub.",
		"springBootConfig": "The recommended way to get started using Spring CredHub in your project is with a dependency management system. One of the snippets below can be copied and pasted into your build.\n\nWith Maven:\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.credhub</groupId>\n            <artifactId>spring-credhub-starter</artifactId>\n            <version>2.1.1.RELEASE</version>\n        </dependency>\n    </dependencies>\n\nWith Gradle:\n\n    dependencies {\n      compile('org.springframework.credhub:spring-credhub-starter:2.1.1.RELEASE')\n    }",
		"status": "ACTIVE",
		"description": "Provides client-side support for storing, retrieving, and deleting credentials from a CredHub server running in a Cloud Foundry platform.",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-credhub",
		"github": "https://github.com/spring-projects/spring-credhub",
		"site": "https://spring.io/projects/spring-credhub",
		"slug": "spring-credhub",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.2.0",
				"api": "https://docs.spring.io/spring-credhub/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-credhub/docs/{version}/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.2.1-SNAPSHOT",
				"api": "https://docs.spring.io/spring-credhub/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-credhub/docs/{version}/reference",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.3.0",
				"api": "https://docs.spring.io/spring-credhub/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-credhub/docs/{version}/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.3.1-SNAPSHOT",
				"api": "https://docs.spring.io/spring-credhub/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-credhub/docs/{version}/reference",
				"status": "SNAPSHOT",
				"current": false
			}
		],
		"support": [
			{
				"branch": "2.1.x",
				"initialDate": "2020-03-31",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-03-31",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-12-03"
			},
			{
				"branch": "2.2.x",
				"initialDate": "2021-12-03",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-12-03",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2024-04-03"
			},
			{
				"branch": "2.0.x",
				"initialDate": "2019-01-09",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2020-01-09",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2021-05-09"
			},
			{
				"branch": "1.0.x",
				"initialDate": "2018-03-26",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2019-03-26",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2020-07-26"
			},
			{
				"branch": "2.3.x",
				"initialDate": "2022-11-15",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-11-15",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-15"
			}
		]
	},
	{
		"title": "Spring Cloud Zookeeper",
		"body": "Spring Cloud Zookeeper provides [Apache Zookeeper](http://zookeeper.apache.org/) integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with Zookeeper. The patterns provided include Service Discovery and Distributed Configuration.\n\n[](#features)Features\n---------------------\n\n*   Service Discovery: instances can be registered with Zookeeper and clients can discover the instances using Spring-managed beans\n    \n*   Supports Spring Cloud LoadBalancer - client-side load-balancing solution\n    \n*   Supports Spring Cloud OpenFeign\n    \n*   Distributed Configuration: using Zookeeper as a data store\n    \n\n[](#quick-start)Quick Start\n---------------------------\n\nAs long as Spring Cloud Zookeeper, [Apache Curator](http://curator.apache.org/) and the Zookeeper Java Client are on the classpath any Spring Boot application with `@EnableDiscoveryClient` will try to contact a Zookeeper agent on `localhost:2181` (the default value of `zookeeper.connectString`).\n\n    @Configuration\n    @EnableAutoConfiguration\n    @EnableDiscoveryClient\n    @RestController\n    public class Application {\n    \n      @RequestMapping(\"/\")\n      public String home() {\n        return \"Hello World\";\n      }\n    \n      public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n    \n    }\n\nA local Zookeeper server must be running. See the [Zookeeper documentation](http://zookeeper.apache.org/) on how to run a Zookeeper server.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "https://github.com/spring-cloud/spring-cloud-zookeeper",
		"site": "https://spring.io/projects/spring-cloud-zookeeper",
		"slug": "spring-cloud-zookeeper",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud/spring-cloud-zookeeper/tree/master/spring-cloud-zookeeper-sample",
				"order": 1,
				"title": "Zookeeper Sample",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-zookeeper/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.5.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-zookeeper/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.6.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-zookeeper/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-zookeeper/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-zookeeper/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.2"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-zookeeper/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.3-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-zookeeper/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-M5"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-zookeeper/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Vault",
		"body": "[](#features)Features\n---------------------\n\n*   Retrieve secrets from Vault and initialize Spring Environment with remote property sources.\n    \n*   Obtain [secrets](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.generic) secured with SSL.\n    \n*   Generate credentials for [MySQL](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.mysql), [PostgreSQL](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.postgresql), [Apache Cassandra](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.cassandra), [MongoDB](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.mongodb), [Consul](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.consul), [AWS](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.aws), and [RabbitMQ](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.backends.rabbitmq).\n    \n*   [Token](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.authentication.token), [AppId](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.authentication.appid), [AppRole](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.authentication.approle), [Client Certificate](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.authentication.clientcert), [Cubbyhole](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.authentication.cubbyhole), and [AWS EC2 and IAM](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.authentication.awsec2), [Kubernetes](https://cloud.spring.io/spring-cloud-vault/reference/html/#vault.config.authentication.kubernetes) authentication.\n    \n*   Bootstrap application context: a parent context for the main application that can be trained to do anything.\n    \n*   Cloud Foundry integration using [HashiCorp’s Vault service broker](https://github.com/hashicorp/vault-service-broker) through [Spring Cloud Vault Connector](https://github.com/pivotal-cf/spring-cloud-vault-connector).\n    \n\n[](#quick-start)Quick Start\n---------------------------\n\nTo get started with Spring Cloud Vault, simply include a build dependency.\n\nFor example, typical POM dependencies would be:\n\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-vault-config</artifactId>\n    </dependency>\n\nthen configure your Vault endpoint and authentication\n\n`bootstrap.yml` for Token-based authentication\n\n    spring.application.name: my-application\n    spring.cloud.vault:\n        host: localhost\n        port: 8200\n        scheme: https\n        authentication: TOKEN\n        token: …\n\n`bootstrap.yml` for AWS-EC2 authentication\n\n    spring.application.name: my-application\n    spring.cloud.vault:\n        host: localhost\n        port: 8200\n        scheme: https\n        authentication: AWS_EC2\n\nfinally, use properties stored inside Vault in your application\n\n    @Configuration\n    @RestController\n    public class Application {\n    \n      @Value(\"${config.name}\")\n      String name = \"World\";\n    \n      @RequestMapping(\"/\")\n      public String home() {\n        return \"Hello \" + name;\n      }\n    \n      public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n    }\n\nSpring Cloud Vault Config reads config properties from Vaults using the application name and active profiles:\n\n    /secret/{application}/{profile}\n    /secret/{application}\n    /secret/{default-context}/{profile}\n    /secret/{default-context}\n\n[](#adding-spring-cloud-vault-config-modules)Adding Spring Cloud Vault Config modules\n-------------------------------------------------------------------------------------\n\nSpring Cloud Vault Config comes with multiple modules supporting different integrations. To to get dependencies in the appropriate version you can include a BOM (Bill of Materials) in your dependency management. For example, typical POM dependency management would be:\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-vault-dependencies</artifactId>\n                <version>x.y.z</version>\n                <scope>import</scope>\n                <type>pom</type>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    \n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-vault-config</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-vault-config-consul</artifactId>\n        </dependency>\n    </dependencies>",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud/spring-cloud-vault",
		"site": "https://spring.io/projects/spring-cloud-vault",
		"slug": "spring-cloud-vault",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/mp911de/spring-cloud-vault-config-samples",
				"order": 1,
				"title": "Examples",
				"description": "Spring Vault/Spring Cloud Vault Examples"
			},
			{
				"url": "https://spring.io/guides/gs/vault-config/",
				"order": 2,
				"title": "Getting Started Guide",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-vault/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.7.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-vault/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.8.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-vault/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-vault/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-vault/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.1"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-vault/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.2-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-vault/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-M5"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-vault/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Task App Starters",
		"body": "Spring Cloud Task Application Starters are [Spring Boot](https://projects.spring.io/spring-boot) applications that may be any process includinghttps://projects.spring.io/spring-batch\\[Spring Batch\\] jobs that do not run forever, and they end/stop at some point. Spring Cloud Task Applications can be used with [Spring Cloud Data Flow](https://cloud.spring.io/spring-cloud-dataflow) to create, deploy, and orchestrate short-lived data microservices.\n\nSpring Cloud Task Application Starters are standalone executable applications that can be used for on-demand use-cases such as database migration, machine learning, and scheduled operations. These applications can run independently on a variety of runtime platforms including Cloud Foundry, Kubernetes, Docker, or even on your laptop. If you are new to task app starters\n\n### [](#features)Features\n\n*   Run standalone as Spring Boot applications\n    \n*   Orchestrate as ephemeral data microservices\n    \n*   Consume data microservice applications as maven or docker artifacts\n    \n*   Override configuration parameters via command-line, environment variables, or YAML file\n    \n*   Provide infrastructure to test the applications in isolation\n    \n\n### [](#available-applications)Available Applications\n\n*   timestamp\n    \n*   timestamp-batch\n    \n\n### [](#running-a-sample-task-launcher)Running a sample Task Launcher\n\nStep 1 - Download the latest timestamp application from here \\[eg: /2.1.1.RELEASE/timestamp-task-2.1.1.RELEASE.jar\\]\n\nStep 2 - Run timestamp application\n\n    java -jar timestamp-task-***.jar\n\nStep 3 - Verify timestamp logs in the console\n\nStep 4 - Verify timestamp application shuts down\n\n### [](#task-app-starters-and-spring-cloud-data-flow)Task App Starters and Spring Cloud Data Flow (\\*\\*)\n\n \n\nArtifact Type\n\nStable Release\n\nMaven\n\n[https://repo.maven.apache.org/maven2/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Elston.SR3/spring-cloud-task-app-descriptor-Elston.SR3.task-apps-maven](https://repo.maven.apache.org/maven2/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Elston.SR3/spring-cloud-task-app-descriptor-Elston.SR3.task-apps-maven)\n\nDocker\n\n[https://repo.maven.apache.org/maven2/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Elston.SR3/spring-cloud-task-app-descriptor-Elston.SR3.task-apps-docker](https://repo.maven.apache.org/maven2/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Elston.SR3/spring-cloud-task-app-descriptor-Elston.SR3.task-apps-docker)\n\n(\\*\\*) find out how to use the app-starters in Spring Cloud Data Flow by reviewing the app-registration section in the [reference guide](https://docs.spring.io/spring-cloud-dataflow/docs/current-SNAPSHOT/reference/htmlsingle/#_registering_a_task_application)\n\n### [](#http-repository-location-for-apps)HTTP Repository Location for Apps\n\nHere you will find the direct links to the uber jars for the task apps.\n\n*   [Stable Release](https://repo.maven.apache.org/maven2/org/springframework/cloud/task/app/spring-cloud-task-app-descriptor/Elston.SR3/spring-cloud-task-app-descriptor-Elston.SR3.task-apps-maven-repo-url.properties)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-cloud/spring-cloud-task-app-starters",
		"site": "https://spring.io/projects/spring-cloud-task-app-starters",
		"slug": "spring-cloud-task-app-starters",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-cloud-task-app-starters/docs/Elston.BUILD-SNAPSHOT/api/",
				"ref": "http://docs.spring.io/spring-cloud-task-app-starters/docs/Elston.BUILD-SNAPSHOT/reference/htmlsingle",
				"status": "SNAPSHOT",
				"current": false,
				"version": "Elston.BUILD-SNPSHOT"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-task-app-starters/docs/Dearborn.SR1/api/",
				"ref": "http://docs.spring.io/spring-cloud-task-app-starters/docs/Dearborn.SR1/reference/htmlsingle",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "Dearborn.SR1"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-task-app-starters/docs/Clark.RELEASE/api/",
				"ref": "http://docs.spring.io/spring-cloud-task-app-starters/docs/Clark.RELEASE/reference/htmlsingle",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "Clark.RELEASE"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-task-app-starters/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-task-app-starters/docs/Elston.SR3/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "Elston.SR3"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud Task",
		"body": "Spring Cloud Task allows a user to develop and run short lived microservices using Spring Cloud and run them locally, in the cloud, even on Spring Cloud Data Flow. Just add `@EnableTask` and run your app as a Spring Boot app (single application context). If you are new to Spring Cloud Task, take a look at our [Getting Started](https://docs.spring.io/spring-cloud-task/docs/current/reference/html/#getting-started) docs.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-task",
		"github": "http://github.com/spring-cloud/spring-cloud-task",
		"site": "https://spring.io/projects/spring-cloud-task",
		"slug": "spring-cloud-task",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-cloud-task/docs/2.1.4.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-cloud-task/docs/2.1.4.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.1.4.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-task/docs/2.0.0.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-cloud-task/docs/2.0.0.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.0.0.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-task/docs/1.3.1.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-cloud-task/docs/1.3.1.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.3.1.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-task/docs/1.2.3.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-cloud-task/docs/1.2.3.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.2.3.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-task/docs/1.1.2.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-cloud-task/docs/1.1.2.RELEASE/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.1.2.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-task/docs/2.2.5.RELEASE/apidocs/",
				"ref": "http://docs.spring.io/spring-cloud-task/docs/2.2.5.RELEASE/reference/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.5.RELEASE"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-task/docs/{version}/apidocs/",
				"ref": "https://docs.spring.io/spring-cloud-task/docs/{version}/reference/htmlsingle",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.3.2"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-task/docs/{version}/apidocs/",
				"ref": "https://docs.spring.io/spring-cloud-task/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-RC1"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-task/docs/{version}/apidocs/",
				"ref": "https://docs.spring.io/spring-cloud-task/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.4.5"
      }
		],
		"support": [
			{
				"branch": "2.0.x",
				"initialDate": "2018-05-03",
				"ossPolicyEnd": "2019-05-03",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2020-09-03",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.1.x",
				"initialDate": "2019-01-22",
				"ossPolicyEnd": "2020-01-22",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2021-05-22",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-22",
				"ossPolicyEnd": "2020-11-22",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-22",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2021-12-21",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-04-21",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.4.x",
				"initialDate": "2021-11-29",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Stream Rabbit Binder",
		"body": "",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-stream",
		"github": "https://github.com/spring-cloud/spring-cloud-stream-binder-rabbit",
		"site": "https://cloud.spring.io/spring-cloud-stream-binder-rabbit/",
		"slug": "spring-cloud-stream-binder-rabbit",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-stream-binder-rabbit/docs/3.1.0.M1/reference/html/index.html",
				"ref": "https://docs.spring.io/spring-cloud-stream-binder-rabbit/docs/3.1.0.M1/reference/html/index.html",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.1.0-M2"
      },
			{
				"api": "https://cloud.spring.io/spring-cloud-stream-binder-rabbit/3.0.x/reference/html/",
				"ref": "https://cloud.spring.io/spring-cloud-stream-binder-rabbit/3.0.x/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.9.BUILD-SNASHOT"
      },
			{
				"api": "https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-rabbit/3.0.8.RELEASE/reference/html/",
				"ref": "https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-rabbit/3.0.8.RELEASE/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.8.RELEASE"
      },
			{
				"api": "https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/2.2.1.RELEASE/home.html",
				"ref": "https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/2.2.1.RELEASE/home.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.1.RELEASE"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-stream-binder-rabbit/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream-binder-rabbit/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.2.3"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-stream-binder-rabbit/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream-binder-rabbit/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.2.4-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "3.1.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2021-12-21",
				"ossEnforcedEnd": "2021-12-21",
				"commercialPolicyEnd": "2023-04-21",
				"commercialEnforcedEnd": "2023-04-21"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2019-11-22",
				"ossPolicyEnd": "2020-11-22",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-22",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.2.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2022-11-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-30",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Stream Kafka Binder",
		"body": "",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-stream",
		"github": "https://github.com/spring-cloud/spring-cloud-stream-binder-kafka",
		"site": "https://cloud.spring.io/spring-cloud-stream-binder-kafka/",
		"slug": "spring-cloud-stream-binder-kafka",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.1.0.M1/reference/html/index.html",
				"ref": "https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/3.1.0.M1/reference/html/index.html",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.1.0-M2"
      },
			{
				"api": "https://cloud.spring.io/spring-cloud-stream-binder-kafka/3.0.x/reference/html/",
				"ref": "https://cloud.spring.io/spring-cloud-stream-binder-kafka/3.0.x/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.9.BUILD-SNASHOT"
      },
			{
				"api": "https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-kafka/3.0.8.RELEASE/reference/html/",
				"ref": "https://cloud.spring.io/spring-cloud-static/spring-cloud-stream-binder-kafka/3.0.8.RELEASE/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.8.RELEASE"
      },
			{
				"api": "https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/2.2.1.RELEASE/home.html",
				"ref": "https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/2.2.1.RELEASE/home.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.1.RELEASE"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.2.3"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream-binder-kafka/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.2.4-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "3.1.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2021-12-21",
				"ossEnforcedEnd": "2021-12-21",
				"commercialPolicyEnd": "2023-04-21",
				"commercialEnforcedEnd": "2023-04-21"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2019-11-22",
				"ossPolicyEnd": "2020-11-22",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-22",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.2.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2022-11-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-30",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Stream Applications",
		"body": "Spring Cloud Stream Applications are standalone executable applications that communicate over messaging middleware such as Apache Kafka and RabbitMQ.\n\nThese applications can run independently on a variety of runtime platforms, including Kubernetes, Docker, Cloud Foundry, or even on your laptop.\n\n[](#features)Features\n---------------------\n\n*   Out-of-the-box applications ready to run as standalone Spring Boot applications.\n    \n*   Assemble a set of applications into a coherent streaming data pipeline in Spring Cloud Data Flow.\n    \n*   Override configuration parameters via application properties, environment variables, or in the YAML file.\n    \n\n[](#available-applications)Available Applications\n-------------------------------------------------\n\n  \n\n**Source**\n\n**Sink**\n\n**Processor**\n\n[CDC Debezium](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/cdc-debezium-source/README.adoc)\n\n[Analytics](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/analytics-sink/README.adoc)\n\n[Aggregator](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/aggregator-processor/README.adoc)\n\n[File](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/file-source/README.adoc)\n\n[Cassandra](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/cassandra-sink/README.adoc)\n\n[Bridge](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/bridge-processor/README.adoc)\n\n[FTP](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/ftp-source/README.adoc)\n\n[Elasticsearch](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/elasticsearch-sink/README.adoc)\n\n[Filter](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/filter-processor/README.adoc)\n\n[Geode](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/geode-source/README.adoc)\n\n[File](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/file-sink/README.adoc)\n\n[Groovy](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/groovy-processor/README.adoc)\n\n[HTTP](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/http-source/README.adoc)\n\n[FTP](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/ftp-sink/README.adoc)\n\n[Header Enricher](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/header-enricher-processor/README.adoc)\n\n[JDBC](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/jdbc-source/README.adoc)\n\n[Geode](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/geode-sink/README.adoc)\n\n[HTTP-Request](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/http-request-processor/README.adoc)\n\n[JMS](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/jms-source/README.adoc)\n\n[JDBC](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/jdbc-sink/README.adoc)\n\n[Image Recognition](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/image-recognition-processor/README.adoc)\n\n[Load Generator](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/load-generator-source/README.adoc)\n\n[Log](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/log-sink/README.adoc)\n\n[Object Detection](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/object-detection-processor/README.adoc)\n\n[Mail](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/mail-source/README.adoc)\n\n[MongoDB](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/mongodb-sink/README.adoc)\n\n[Semantic Segmentation](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/semantic-segmentation-processor/README.adoc)\n\n[MongoDB](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/mongodb-source/README.adoc)\n\n[MQTT](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/mqtt-sink/README.adoc)\n\n[Script](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/script-processor/README.adoc)\n\n[MQTT](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/mqtt-source/README.adoc)\n\n[Pgcopy](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/pgcopy-sink/README.adoc)\n\n[Splitter](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/splitter-processor/README.adoc)\n\n[Rabbit](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/rabbit-source/README.adoc)\n\n[Rabbit](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/rabbit-sink/README.adoc)\n\n[Transform](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/transform-processor/README.adoc)\n\n[S3](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/s3-source/README.adoc)\n\n[Redis](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/redis-sink/README.adoc)\n\n[Twitter Trend](https://github.com/spring-cloud/stream-applications/blob/main/applications/processor/twitter-trend-processor/README.adoc)\n\n[SFTP](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/sftp-source/README.adoc)\n\n[Router](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/router-sink/README.adoc)\n\n[Syslog](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/syslog-source/README.adoc)\n\n[RSocket](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/rsocket-sink/README.adoc)\n\n[TCP](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/tcp-source/README.adoc)\n\n[S3](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/s3-sink/README.adoc)\n\n[Time](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/time-source/README.adoc)\n\n[SFTP](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/sftp-sink/README.adoc)\n\n[Twitter Message](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/twitter-message-source/README.adoc)\n\n[TCP](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/tcp-sink/README.adoc)\n\n[Twitter Search](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/twitter-search-source/README.adoc)\n\n[Throughput](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/throughput-sink/README.adoc)\n\n[Twitter Stream](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/twitter-stream-source/README.adoc)\n\n[Twitter Message](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/twitter-message-sink/README.adoc)\n\n[Websocket](https://github.com/spring-cloud/stream-applications/blob/main/applications/source/websocket-source/README.adoc)\n\n[Twitter Update](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/twitter-update-sink/README.adoc)\n\n[Wavefront](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/wavefront-sink/README.adoc)\n\n[Websocket](https://github.com/spring-cloud/stream-applications/blob/main/applications/sink/websocket-sink/README.adoc)\n\n[](#quick-start)Quick Start\n---------------------------\n\nStep 1 - Download the latest _time-source_ application from [here](http://repo.spring.io/snapshot/org/springframework/cloud/stream/app/time-source-kafka/) (eg: `3.2.2-SNAPSHOT`)\n\nStep 2 - Download the latest _log-sink_ application from [here](http://repo.spring.io/snapshot/org/springframework/cloud/stream/app/log-sink-kafka) (eg: `3.2.2-SNAPSHOT`)\n\nStep 3 - Start Kafka\n\nStep 4 - Start the **Time Source** producer application pointing to **ticktock** topic in Kafka\n\n    java -jar time-source-kafka-***.jar --spring.cloud.stream.bindings.output.destination=ticktock\n\nStep 5 - Start the **Log Sink** consumer application pointing to **ticktock** topic in Kafka\n\n    java -jar log-sink-kafka-***.jar --spring.cloud.stream.bindings.input.destination=ticktock --server.port=0\n\nStep 6 - Verify **ticktock** output in the `log-sink` logs\n\n[](#stream-applications-and-spring-cloud-data-flow)Stream Applications and Spring Cloud Data Flow _(\\*\\*)_\n----------------------------------------------------------------------------------------------------------\n\n  \n\n**Artifact Type**\n\n**Stable Release**\n\n**Snapshot Release**\n\nRabbitMQ + Maven\n\n[https://dataflow.spring.io/rabbitmq-maven-latest](https://dataflow.spring.io/rabbitmq-maven-latest)\n\n[https://dataflow.spring.io/rabbitmq-maven-latest-snapshot](https://dataflow.spring.io/rabbitmq-maven-latest-snapshot)\n\nRabbitMQ + Docker\n\n[https://dataflow.spring.io/rabbitmq-docker-latest](https://dataflow.spring.io/rabbitmq-docker-latest)\n\n[https://dataflow.spring.io/rabbitmq-docker-latest-snapshot](https://dataflow.spring.io/rabbitmq-docker-latest-snapshot)\n\nApache Kafka + Maven\n\n[https://dataflow.spring.io/kafka-maven-latest](https://dataflow.spring.io/kafka-maven-latest)\n\n[https://dataflow.spring.io/kafka-maven-latest-snapshot](https://dataflow.spring.io/kafka-maven-latest-snapshot)\n\nApache Kafka + Docker\n\n[https://dataflow.spring.io/kafka-docker-latest](https://dataflow.spring.io/kafka-docker-latest)\n\n[https://dataflow.spring.io/kafka-docker-latest-snapshot](https://dataflow.spring.io/kafka-docker-latest-snapshot)\n\n_(\\*\\*) find out how to use the apps in Spring Cloud Data Flow by reviewing the [app-registration](https://docs.spring.io/spring-cloud-dataflow/docs/current-SNAPSHOT/reference/htmlsingle/#supported-apps-and-tasks) section in the reference guide_\n\n[](#http-repository-location-for-apps)HTTP Repository Location for Apps\n-----------------------------------------------------------------------\n\n  \n\n**Versions: Boot / Stream**\n\n**Rabbit MQ**\n\n**Apache Kafka**\n\nSpring Boot 2.6.8 / Spring Cloud Stream 3.2.4\n\n[Stable Release](https://repo.maven.apache.org/maven2/org/springframework/cloud/stream/app/stream-applications-descriptor/2021.1.2/stream-applications-descriptor-2021.1.2.rabbit-apps-maven-repo-url.properties) / [Latest Snapshot](https://repo.spring.io/snapshot/org/springframework/cloud/stream/app/stream-applications-descriptor/2021.1.3-SNAPSHOT/stream-applications-descriptor-2021.1.3-SNAPSHOT.rabbit-apps-maven-repo-url.properties)\n\n[Stable Release](https://repo.maven.apache.org/maven2/org/springframework/cloud/stream/app/stream-applications-descriptor/2021.1.2/stream-applications-descriptor-2021.1.2.kafka-apps-maven-repo-url.properties) / [Latest Snapshot](https://repo.spring.io/snapshot/org/springframework/cloud/stream/app/stream-applications-descriptor/2021.1.3-SNAPSHOT/stream-applications-descriptor-2021.1.3-SNAPSHOT.kafka-apps-maven-repo-url.properties)\n\n### [](#related-projects)Related Projects\n\n*   [Spring Cloud Stream](http://cloud.spring.io/spring-cloud-stream/)\n    \n*   [Spring Cloud Data Flow](http://cloud.spring.io/spring-cloud-dataflow/)\n    \n*   [Spring Cloud Task](https://github.com/spring-cloud/spring-cloud-task/)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-cloud/stream-applications",
		"site": "https://spring.io/projects/spring-cloud-stream-applications",
		"slug": "spring-cloud-stream-applications",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "https://docs.spring.io/stream-applications/docs/{version}/api/",
				"ref": "https://docs.spring.io/stream-applications/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2020.0.2"
      },
			{
				"api": "https://docs.spring.io/stream-applications/docs/{version}/api/",
				"ref": "https://docs.spring.io/stream-applications/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2021.0.1"
      },
			{
				"api": "https://docs.spring.io/stream-applications/docs/{version}/api/",
				"ref": "https://docs.spring.io/stream-applications/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2021.1.3-SNAPSHT"
      },
			{
				"api": "https://docs.spring.io/stream-applications/docs/{version}/api/",
				"ref": "https://docs.spring.io/stream-applications/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2021.1.2"
      }
		],
		"support": [
			{
				"branch": "2020.0.x",
				"initialDate": "2020-12-16",
				"ossPolicyEnd": "2021-12-16",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2023-04-16",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2021.0.x",
				"initialDate": "2021-10-11",
				"ossPolicyEnd": "2022-10-11",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-02-11",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2021.1.x",
				"initialDate": "2022-02-24",
				"ossPolicyEnd": "2023-02-24",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-06-24",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Stream",
		"body": "Spring Cloud Stream is a framework for building highly scalable event-driven microservices connected with shared messaging systems.\n\nThe framework provides a flexible programming model built on already established and familiar Spring idioms and best practices, including support for persistent pub/sub semantics, consumer groups, and stateful partitions.\n\n[](#binder-implementations)Binder Implementations\n-------------------------------------------------\n\nSpring Cloud Stream supports a variety of binder implementations and the following table includes the link to the GitHub projects.\n\n*   [RabbitMQ](https://github.com/spring-cloud/spring-cloud-stream-binder-rabbit)\n    \n*   [Apache Kafka](https://github.com/spring-cloud/spring-cloud-stream-binder-kafka)\n    \n*   [Kafka Streams](https://github.com/spring-cloud/spring-cloud-stream-binder-kafka/tree/master/spring-cloud-stream-binder-kafka-streams)\n    \n*   [Amazon Kinesis](https://github.com/spring-cloud/spring-cloud-stream-binder-aws-kinesis)\n    \n*   [Google PubSub _(partner maintained)_](https://github.com/spring-cloud/spring-cloud-gcp/tree/master/spring-cloud-gcp-pubsub-stream-binder)\n    \n*   [Solace PubSub+ _(partner maintained)_](https://github.com/SolaceProducts/spring-cloud-stream-binder-solace)\n    \n*   [Azure Event Hubs _(partner maintained)_](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/spring-cloud-azure-stream-binder-eventhubs)\n    \n*   [Azure Service Bus _(partner maintained)_](https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/spring-cloud-azure-stream-binder-servicebus)\n    \n*   [AWS SQS _(partner maintained)_](https://github.com/idealo/spring-cloud-stream-binder-sqs)\n    \n*   [AWS SNS _(partner maintained)_](https://github.com/idealo/spring-cloud-stream-binder-sns)\n    \n*   [Apache RocketMQ _(partner maintained)_](https://github.com/alibaba/spring-cloud-alibaba/wiki/RocketMQ-en)\n    \n\nThe core building blocks of Spring Cloud Stream are:\n\n*   **Destination Binders**: Components responsible to provide integration with the external messaging systems.\n    \n*   **Destination Bindings**: Bridge between the external messaging systems and application code (producer/consumer) provided by the end user.\n    \n*   **Message**: The canonical data structure used by producers and consumers to communicate with Destination Binders (and thus other applications via external messaging systems).\n    \n\n### [](#github)GitHub\n\n*   [Project repo](https://github.com/spring-cloud/spring-cloud-stream)\n    \n\n### [](#artifacts-samples)Artifacts & Samples\n\nArtifacts for various modules of spring-cloud-stream available in [Maven Central](https://repo.maven.apache.org/maven2/org/springframework/cloud/) repository under _spring-cloud-stream-\\*_.\n\nYou can also try our samples available in [GitHub samples repository](https://github.com/spring-cloud/spring-cloud-stream-samples)\n\n### [](#talk-to-us)Talk to us\n\n*   [Report issue or request feature/enhancement](https://github.com/spring-cloud/spring-cloud-stream/issues)\n    \n*   [Stack Overflow channel](https://stackoverflow.com/questions/tagged/spring-cloud-stream)\n    \n\nIf you wish to contribute you can pick any issue that is currently listed or simply submit a PR with functionality that you believe would benefit the project. You can also look for issues with `ideal-for-contribution` [label](https://github.com/spring-cloud/spring-cloud-function/issues?q=is%3Aissue+is%3Aopen+label%3Aideal-for-contribution).\n\n[](#release-trains)Release Trains\n---------------------------------\n\n  \n\n**Spring Cloud Stream**\n\n**Spring Boot**\n\n**Spring Cloud**\n\nHorsham \\[3.0.x\\]\n\n2.2.x\n\nHoxton\n\nGermantown \\[2.2.x\\]\n\n2.1.x\n\nGreenwich\n\n[](#blogs)Blogs\n---------------\n\n*   [Spring Cloud Stream - demystified and simplified (Oleg Zhurakousky)](https://spring.io/blog/2019/10/14/spring-cloud-stream-demystified-and-simplified)\n    \n*   [Spring Cloud Stream - functional and reactive (Oleg Zhurakousky)](https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive)\n    \n*   [Spring Cloud Stream - Event Routing (Oleg Zhurakousky)](https://spring.io/blog/2019/10/31/spring-cloud-stream-event-routing)\n    \n*   [Spring Cloud Stream - Composed Functions or EIP (Oleg Zhurakousky)](https://spring.io/blog/2019/11/04/spring-cloud-stream-composed-functions-or-eip)\n    \n*   [Introduction to event-driven microservices with Spring Cloud Stream (June 5, 2020 - Piotr Minkowski )](https://piotrminkowski.com/2020/06/05/introduction-to-event-driven-microservices-with-spring-cloud-stream)\n    \n*   [Event-driven applications with Spring Cloud Stream (June 24, 2020 - Anshul Mishra)](https://medium.com/faun/event-driven-application-using-spring-cloud-stream-c1a97eb81427)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-stream",
		"github": "http://github.com/spring-cloud/spring-cloud-stream",
		"site": "http://cloud.spring.io/spring-cloud-stream",
		"slug": "spring-cloud-stream",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud/spring-cloud-stream-samples/",
				"order": 1,
				"title": "Samples",
				"description": "Spring Cloud Stream sample applications"
			}
		],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-stream/docs/3.1.6/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream/docs/3.1.6/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.1.6"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-stream/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.2.4"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-stream/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.2.5-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-stream/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-M3"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-stream/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-stream/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "3.1.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2021-12-21",
				"ossEnforcedEnd": "2021-12-21",
				"commercialPolicyEnd": "2023-04-21",
				"commercialEnforcedEnd": "2023-04-21"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2019-11-22",
				"ossPolicyEnd": "2020-11-22",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-22",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.2.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2022-11-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-30",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Sleuth",
		"body": "Important\n\nSpring Cloud Sleuth’s last minor version is 3.1. You can check the [3.1.x](https://github.com/spring-cloud/spring-cloud-sleuth/tree/3.1.x) branch for the latest commits. The core of this project got moved to [Micrometer Tracing](https://micrometer.io/docs/tracing) project and the instrumentations will be moved to [Micrometer](https://micrometer.io/) and all respective projects (no longer all instrumentations will be done in a single repository).\n\n[](#overview)Overview\n=====================\n\nSpring Cloud Sleuth provides Spring Boot auto-configuration for distributed tracing.\n\n[](#features)Features\n---------------------\n\nSleuth configures everything you need to get started. This includes where trace data (spans) are reported to, how many traces to keep (sampling), if remote fields (baggage) are sent, and which libraries are traced.\n\nSpecifically, Spring Cloud Sleuth…​\n\n*   Adds trace and span ids to the Slf4J MDC, so you can extract all the logs from a given trace or span in a log aggregator.\n    \n*   Instruments common ingress and egress points from Spring applications (servlet filter, rest template, scheduled actions, message channels, feign client).\n    \n*   If `spring-cloud-sleuth-zipkin` is available then the app will generate and report [Zipkin](https://zipkin.io)\\-compatible traces via HTTP. By default it sends them to a Zipkin collector service on localhost (port 9411). Configure the location of the service using `spring.zipkin.baseUrl`.",
		"springBootConfig": "Add Sleuth to your classpath:\n\nMaven\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${release.train.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-sleuth</artifactId>\n        </dependency>\n    </dependencies>\n\nGradle\n\n    buildscript {\n        dependencies {\n            classpath \"io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE\"\n        }\n    }\n    \n    apply plugin: \"io.spring.dependency-management\"\n    \n    dependencyManagement {\n         imports {\n              mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${releaseTrainVersion}\"\n         }\n    }\n    dependencies {\n        compile 'org.springframework.cloud:spring-cloud-starter-sleuth'\n    }\n\nAs long as Spring Cloud Sleuth is on the classpath any Spring Boot application will generate trace data:\n\n    @SpringBootApplication\n    @RestController\n    public class Application {\n    \n      private static Logger log = LoggerFactory.getLogger(DemoController.class);\n    \n      @RequestMapping(\"/\")\n      public String home() {\n        log.info(\"Handling home\");\n        return \"Hello World\";\n      }\n    \n      public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n    \n    }\n\nRun this app and then hit the home page. You will see traceId and spanId populated in the logs. If this app calls out to another one (e.g. with `RestTemplate`) it will send the trace data in headers and if the receiver is another Sleuth app you will see the trace continue there.\n\n*   Instead of logging the request in the handler explicitly, you could set `logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG`\n    \n*   Sleuth defaults to a rate limited sampler. That means that it will sample up to 1000 transactions per second.\n    \n*   Set `spring.application.name=bar` (for instance) to see the service name as well as the trace and span ids.",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud/spring-cloud-sleuth",
		"site": " https://spring.io/projects/spring-cloud-sleuth",
		"slug": "spring-cloud-sleuth",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/openzipkin/sleuth-webmvc-example",
				"order": 1,
				"title": "Sleuth Web Mvc",
				"description": "Simple Sleuth Web MVC example"
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-sleuth/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.8.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-sleuth/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.9.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-sleuth/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-sleuth/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-sleuth/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.3"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-sleuth/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.4-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-22",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Skipper",
		"body": "Skipper is a tool that allows you to discover Spring Boot applications and manage their lifecycle on multiple Cloud Platforms. You can use Skipper standalone or integrate it with Continuous Integration pipelines to help achieve Continuous Deployment of applications.\n\nThe system design is influenced by a large number of projects in the Kubernetes ecosystem that perform resource templating and/or orchestration, hence the nautically inspired project name Skipper.\n\nApplications in Skipper are bundled as packages which contain a templated configuration file and a default set of values that are used to fill in the template. You can override these defaults when installing or upgrading a package. Skipper provides a means to orchestrate the upgrade/rollback procedure of applications between different versions, taking the minimal set of actions to bring the system to the desired state.\n\n[](#features)Features\n=====================\n\n*   Define multiple platform accounts where Spring Boot applications can be deployed. Supported platforms are Local, Cloud Foundry, and Kubernetes. Substitute variables in Mustache templated files that describe how to deploy applications to a platform.\n    \n*   Search Package Repositories for existing applications.\n    \n*   Install/Upgrade/Rollback a package based on a simple workflow.\n    \n*   Store the history of resolved template files (aka 'application manifests') which represent the final description of what has been deployed to a platform for a specific release.\n    \n*   Use via a standalone interactive shell or via the web APIs to supplement CI workflows.\n    \n\nThe means to deploy a Spring Boot application to multiple platforms is provided by [\\[Spring Cloud Deployer](https://github.com/spring-cloud/spring-cloud-deployer#implementations) implementations. The supported template file format is YAML based and it describes the set of variables needed to create a Spring Cloud Deployer [AppDeploymentRequest](https://github.com/spring-cloud/spring-cloud-deployer/blob/master/spring-cloud-deployer-spi/src/main/java/org/springframework/cloud/deployer/spi/core/AppDeploymentRequest.java).\n\n[](#history)History\n===================\n\nSkipper evolved out of a need to perform \"Stream Edits\" in Spring Cloud Data Flow. It was later recognized that to provide that feature a more general purpose project, Skipper, should be created so that it can also be a useful toolkit outside the context of Spring Cloud Data Flow.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "A package manager that installs, upgrades, and rolls back Spring Boot applications on multiple Cloud Platforms.",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-skipper",
		"github": "http://github.com/spring-cloud/spring-cloud-skipper",
		"site": "http://cloud.spring.io/spring-cloud-skipper",
		"slug": "spring-cloud-skipper",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.1.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.1.2.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.0.3.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.5.2/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.5.2/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.5.2"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.4.3.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/{version}/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.3.2.RELEASE"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.6.2/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.6.2/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.6.2"
      },
			{
				"api": "https://docs.spring.io/springhttp://docs.spring.io/spring-cloud-skipper/docs/2.7.3/api/-cloud-skipper/docs/{version}/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.7.3/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.7.3"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.2/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.2/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.8.2"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.3/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.3/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.8.3"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.4/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.4/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.8.4"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.5/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.5/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.8.5"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.6/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.6/reference/htmlsingle/#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.8.6"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.7-SNAPSHOT/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.8.7-SNAPSHOT/reference/htmlsingle/#getting-started",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.8.7-SNAPSHOT"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.9.0-SNAPSHOT/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.9.0-SNAPSHOT/reference/htmlsingle/#getting-started",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.9.0-SNAPSHOT"
      },
			{
				"api": "http://docs.spring.io/spring-cloud-skipper/docs/2.9.0-RC2/api/",
				"ref": "http://docs.spring.io/spring-cloud-skipper/docs/2.9.0-RC2/reference/htmlsingle/#getting-started",
				"status": "PRERELEASE",
				"current": false,
				"version": "2.9.0-RC2"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud Security",
		"body": "Spring Cloud Security offers a set of primitives for building secure applications and services with minimum fuss. A declarative model which can be heavily configured externally (or centrally) lends itself to the implementation of large systems of co-operating, remote components, usually with a central indentity management service. It is also extremely easy to use in a service platform like Cloud Foundry. Building on Spring Boot and Spring Security OAuth2 we can quickly create systems that implement common patterns like single sign on, token relay and token exchange.\n\n[](#features)Features\n---------------------\n\nSpring Cloud Security features:\n\n*   Relay SSO tokens from a front end to a back end service in a Zuul proxy\n    \n*   Relay tokens between resource servers\n    \n*   An interceptor to make a Feign client behave like `OAuth2RestTemplate` (fetching tokens etc.)\n    \n*   Configure downstream authentication in a Zuul proxy\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\nIf your app also has a Spring Cloud Zuul embedded reverse proxy (using `@EnableZuulProxy`) then you can ask it to forward OAuth2 access tokens downstream to the services it is proxying. Thus the SSO app above can be enhanced simply like this:\n\n    @SpringBootApplication\n    @EnableOAuth2Sso\n    @EnableZuulProxy\n    class Application {\n    \n    }\n\nand it will (in addition to logging the user in and grabbing a token) pass the authentication token downstream to the /proxy/\\* services. If those services are implemented with `@EnableResourceServer` then they will get a valid token in the correct header.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud/spring-cloud-security",
		"site": "https://spring.io/projects/spring-cloud-security",
		"slug": "spring-cloud-security",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/sso",
				"order": 1,
				"title": "SSO",
				"description": ""
			},
			{
				"url": "https://github.com/spring-cloud-samples/authserver",
				"order": 2,
				"title": "Auth Server",
				"description": ""
			},
			{
				"url": "https://github.com/spring-cloud-samples/scripts/blob/master/demo/sso.groovy",
				"order": 3,
				"title": "SSO Groovy",
				"description": ""
			},
			{
				"url": "https://github.com/spring-cloud-samples/scripts/blob/master/demo/resource.groovy",
				"order": 4,
				"title": "Resource server",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-security/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.2.5.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-security/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.6.BUILD-SNASHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Schema Registry",
		"body": "Spring Cloud Schema Registry overview\n\nSpring Cloud Schema Registry provides support for schema evolution so that the data can be evolved over time and still work with older or newer producers and consumers and vice versa. Most serialization models, especially the ones that aim for portability across different platforms and languages, rely on a schema that describes how the data is serialized in the binary payload. In order to serialize the data and then to interpret it, both the sending and receiving sides must have access to a schema that describes the binary format. In certain cases, the schema can be inferred from the payload type on serialization or from the target type on deserialization.\n\nHowever, many applications benefit from having access to an explicit schema that describes the binary data format.\n\nA schema registry lets you store schema information in a textual format (typically JSON) and makes that information accessible to various applications that need it to receive and send data in binary format.\n\nA schema is referenceable as a tuple consisting of:\n\n*   A subject that is the logical name of the schema\n    \n*   The schema version\n    \n*   The schema format, which describes the binary format of the data\n    \n\nSpring Cloud Schema Registry provides the following components\n\n*   Standalone Schema Registry Server\n    \n    By default, it is using an \\`H2\\` database, but server can be used with other databases such as \\`Postgres\\` or \\`MySQL\\` by providing appropriate datasource configuration.\n    \n*   Schema registry clients capable of message marshalling by communicating with a Schema Registry.\n    \n    Currently, the client can communicate to the standalone schema registry or the Confluent Schema Registry.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud,spring-cloud-schema-registry",
		"github": "https://github.com/spring-cloud/spring-cloud-schema-registry",
		"site": "https://spring.io/projects/spring-cloud-schema-registry",
		"slug": "spring-cloud-schema-registry",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud/spring-cloud-stream-samples/tree/master/schema-registry-samples",
				"order": 1,
				"title": "Spring Cloud Schema Registry Samples",
				"description": "Samples for Spring Cloud Schema Registry with Spring Cloud Stream"
			}
		],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-schema-registry/docs/1.1.3-SNAPSHOT/reference/html/spring-cloud-schema-registry.html",
				"ref": "https://docs.spring.io/spring-cloud-schema-registry/docs/1.1.3-SNAPSHOT/reference/html/spring-cloud-schema-registry.html",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.1.3-SNAPSHOT"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud Pipelines",
		"body": "This project is deprecated. It was migrated to: [Cloud Pipelines](https://github.com/CloudPipelines/). You can read more about it [here](https://spring.io/blog/2018/11/13/spring-cloud-pipelines-to-cloud-pipelines-migration).\n\nSpring, Spring Boot and Spring Cloud are tools that allow developers speed up the time of creating new business features. It’s common knowledge however that the feature is only valuable if it’s in production. That’s why companies spend a lot of time and resources on building their own deployment pipelines.\n\nThis project tries to solve the following problems:\n\n*   Creation of a common deployment pipeline\n    \n*   Propagation of good testing & deployment practices\n    \n*   Speed up the time required to deploy a feature to production\n    \n\nA common way of running, configuring and deploying applications lowers support costs and time needed by new developers to blend in when they change projects.\n\nCurrently, we support the following CI / CD systems out of the box\n\n*   Concourse\n    \n*   Jenkins\n    \n\n[](#features)Features\n---------------------\n\nSpring Cloud Pipelines comes with the following features\n\n*   opinionated microservice pipeline for Concourse\n    \n*   opinionated microservice pipeline for Jenkins using Job DSL plugin\n    \n*   opinionated microservice pipeline for Jenkins using the Declarative Pipeline (Jenkinsfile)\n    \n*   Cloud Foundry PaaS support\n    \n*   Kubernetes PaaS support\n    \n\nThe opinionated pipelines look like this:\n\n**Flow in Concourse**\n\n![flow concourse](http://cloud.spring.io/spring-cloud-pipelines/images/intro/flow_concourse.png)\n\nFigure 1. Flow in Concourse\n\n**Flow in Jenkins**\n\n![flow](http://cloud.spring.io/spring-cloud-pipelines/images/intro/flow.png)\n\nFigure 2. Flow in Jenkins",
		"springBootConfig": "This project is deprecated. It was migrated to: [Cloud Pipelines](https://github.com/CloudPipelines/). You can read more about it [here](https://spring.io/blog/2018/11/13/spring-cloud-pipelines-to-cloud-pipelines-migration).\n\n### [](#running-the-demo-for-cloud-foundry)Running the demo for Cloud Foundry\n\nYou can easily start by running the default demo setup to run the whole system locally using Docker / PCF Dev or Minikube.\n\nWe are providing a demo pipeline that will build and deploy - [Github Webhook](https://github.com/spring-cloud-samples/github-webhook) application.\n\nAll in all there are the following projects taking part in the whole `microservice setup`.\n\n*   [Github Analytics](https://github.com/spring-cloud-samples/github-analytics) - the app that has a REST endpoint and uses messaging. Our business application.\n    \n*   [Github Webhook](https://github.com/spring-cloud-samples/github-webhook) - project that emits messages that are used by Github Analytics. Our business application.\n    \n*   [Eureka](https://github.com/spring-cloud-samples/github-eureka) - simple Eureka Server. This is an infrastructure application.\n    \n*   [Github Analytics Stub Runner Boot](https://github.com/spring-cloud-samples/github-analytics-stub-runner-boot) - Stub Runner Boot server to be used for tests with Github Analytics. Uses Eureka and Messaging. This is an infrastructure application.\n    \n\nFor the detailed information please check out the [docs](http://cloud.spring.io/spring-cloud/spring-cloud-pipelines.html).\n\n#### [](#concourse)Concourse\n\n*   Fork the [Github Webhook](https://github.com/spring-cloud-samples/github-webhook) and [https://github.com/spring-cloud-samples/github-analytics](https://github.com/spring-cloud-samples/github-analytics) \\[Github Analytics\\] repository\n    \n*   Start [PCF Dev](https://pivotal.io/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry-dev/introduction)\n    \n*   Clone the `spring-cloud-pipelines` project\n    \n*   Go to `concourse` folder\n    \n*   Run `./setup-docker-compose.sh` to setup keys for Concourse\n    \n*   Run `./start.sh 192.168.99.100` to start Concourse and Artifactory (e.g. for `192.168.99.100` being external IP of your docker images. If you don’t have Docker Machine you can run the `./what_my_ip.sh` script and pass that value here)\n    \n*   Run `./deploy_infra.sh` to upload to your Artifactory the infrastructure apps (`eureka` and `stub runner`)\n    \n*   Run `./login.sh 192.168.99.100` to log in to your Concourse (where `192.168.99.100` is you Docker Machine ip - if you’re using `localhost` you don’t have to provide that value)\n    \n*   Setup your `credentials.yml` basing on the provided `credentials-sample-cf.yml` (point to your forked \\[Github Webhook\\]([https://github.com/spring-cloud-samples/github-webhook)](https://github.com/spring-cloud-samples/github-webhook)))\n    \n*   Run `./set-pipeline.sh` to setup pipeline for `github-webhook`\n    \n*   Unpause and run the pipeline in Concourse!\n    \n*   Once the pipeline passes you can setup a new pipeline for `github-analytics`\n    \n\nFor the Kubernetes step by step guide just check out the [documentation](http://cloud.spring.io/spring-cloud-pipelines/single/spring-cloud-pipelines.html#concourse-pipeline-k8s).\n\n#### [](#jenkins)Jenkins\n\n*   Fork the [Github Webhook](https://github.com/spring-cloud-samples/github-webhook) and [Github Analytics](https://github.com/spring-cloud-samples/github-analytics) repository\n    \n*   Start [PCF Dev](https://pivotal.io/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry-dev/introduction)\n    \n*   Clone the `spring-cloud-pipelines` project\n    \n*   Go to `jenkins` folder\n    \n*   Run `./start.sh yourGithubUser yourGithubPass yourGithubOrg` to start Jenkins and Artifactory (`yourGithubUser` and `yourGithubPass` are your Github credentials required by the pipeline to tag the forked repo that lays in `yourGithubOrg`; you could also pass `-key path_to_private_key` if you prefer to use the key-based authentication with your Git repositories)\n    \n*   Run `./deploy_infra.sh` to upload to your Artifactory the infrastructure apps (`eureka` and `stub runner`)\n    \n*   Go to Jenkins and click the `jenkins-pipeline-seed` in order to generate the pipeline jobs\n    \n*   Go to the `github-webhook` pipeline view and click the `play` button to run the pipeline\n    \n\nFor the Kubernetes step by step guide just check out the [documentation](http://cloud.spring.io/spring-cloud-pipelines/single/spring-cloud-pipelines.html#jenkins-pipeline-k8s)\n\n### [](#adjusting-the-pipelines-to-your-needs)Adjusting the pipelines to your needs\n\nThis repository can be treated as a template for your pipeline. We provide some opinionated implementation that you can alter to suit your needs. The best approach to use it to build your production projects would be to download the Spring Cloud Pipelines repository as ZIP, then init a Git project there and modify it as you wish.\n\nExample for using the code from `master` branch. You can use a tag for example `1.0.0.M8`. Then your URL will look like this `[https://github.com/spring-cloud/spring-cloud-pipelines/archive/1.0.0.M8.zip](https://github.com/spring-cloud/spring-cloud-pipelines/archive/1.0.0.M8.zip)` .\n\n    $ curl -LOk https://github.com/spring-cloud/spring-cloud-pipelines/archive/master.zip\n    $ unzip master.zip\n    $ cd spring-cloud-pipelines-master\n    $ git init\n    $ ./gradlew customize\n    $ # modify the pipelines to suit your needs\n    $ git add .\n    $ git commit -m \"Initial commit\"\n    $ git remote add origin ${YOUR_REPOSITORY_URL}\n    $ git push origin master\n\nYou can also clone the repository in case you would like to keep aligned with the changes in the upstream repository. In order not to have many merge conflicts it’s encouraged to use the custom folder hooks to override functions.",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud,spring-cloud-pipelines",
		"github": "https://github.com/spring-cloud/spring-cloud-pipelines",
		"site": " https://spring.io/projects/spring-cloud-pipelines",
		"slug": "spring-cloud-pipelines",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/github-analytics",
				"order": 1,
				"title": "Github Analytics",
				"description": "the app that has a REST endpoint and uses messaging. Our business application."
			},
			{
				"url": "https://github.com/spring-cloud-samples/github-webhook",
				"order": 2,
				"title": "Github Webhook",
				"description": "project that emits messages that are used by Github Analytics. Our business application."
			},
			{
				"url": "https://github.com/spring-cloud-samples/github-analytics-kubernetes",
				"order": 3,
				"title": "Github Analytics Kubernetes",
				"description": "the app that has a REST endpoint and uses messaging. Our business application."
			},
			{
				"url": "https://github.com/spring-cloud-samples/github-webhook-kubernetes",
				"order": 4,
				"title": "Github Webhook Kubernetes",
				"description": "project that emits messages that are used by Github Analytics. Our business application."
			},
			{
				"url": "https://github.com/spring-cloud-samples/github-eureka",
				"order": 5,
				"title": "Eureka",
				"description": "simple Eureka Server. This is an infrastructure application."
			},
			{
				"url": "https://github.com/spring-cloud-samples/github-analytics-stub-runner-boot",
				"order": 6,
				"title": "Github Analytics Stub Runner Boot",
				"description": "Stub Runner Boot server to be used for mocking Github Analytics dependencies"
			},
			{
				"url": "https://github.com/ddd-by-examples/factory",
				"order": 7,
				"title": "DDD By Examples - factory",
				"description": "Monolithic application that gets deployed to production via Spring Cloud Pipelines"
			}
		],
		"documentation": [
			{
				"api": "http://cloud.spring.io/spring-cloud-static/spring-cloud-pipelines/1.0.0.M8/",
				"ref": "http://cloud.spring.io/spring-cloud-static/spring-cloud-pipelines/1.0.0.M8/",
				"status": "PRERELEASE",
				"current": true,
				"version": "1.0.0.M8"
      },
			{
				"api": "http://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html",
				"ref": "http://cloud.spring.io/spring-cloud-pipelines/spring-cloud-pipelines.html",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.0.0.BUILD-SNASHOT"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud OpenFeign",
		"body": "This project provides [OpenFeign](https://github.com/OpenFeign/feign) integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.\n\n[](#features)Features\n---------------------\n\n*   Declarative REST Client: Feign creates a dynamic implementation of an interface decorated with JAX-RS or Spring MVC annotations\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\n    @SpringBootApplication\n    @EnableFeignClients\n    public class WebApplication {\n    \n    \tpublic static void main(String[] args) {\n    \t\tSpringApplication.run(WebApplication.class, args);\n    \t}\n    \n    \t@FeignClient(\"name\")\n    \tstatic interface NameService {\n    \t\t@RequestMapping(\"/\")\n    \t\tpublic String getName();\n    \t}\n    }\n\n[](#contributing)Contributing\n-----------------------------\n\nWe welcome contributions. You can read more on how to contribute to the project [here](https://github.com/spring-cloud/spring-cloud-openfeign/blob/master/README.adoc#3-contributing).\n\n[](#community-support)Community Support\n---------------------------------------\n\n*   You can report issues through [Github](https://github.com/spring-cloud/spring-cloud-openfeign/issues).\n    \n*   We monitor [StackOverflow](https://stackoverflow.com/) for questions with the `spring-cloud-feign` tag.\n    \n*   You can contact our team at [Gitter](https://gitter.im/spring-cloud/spring-cloud).\n    \n\n[](#commercial-support)Commercial Support\n-----------------------------------------\n\nCommercial Support is provided as part of the [VMware Spring Runtime](https://spring.io/support) offering.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "https://github.com/spring-cloud/spring-cloud-openfeign",
		"site": "https://spring.io/projects/spring-cloud-openfeign",
		"slug": "spring-cloud-openfeign",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/feign-eureka",
				"order": 1,
				"title": "Feign Using Eureka",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-openfeign/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-openfeign/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-openfeign/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-openfeign/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-RC1"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Open Service Broker",
		"body": "Spring Cloud Open Service Broker is a framework for building Spring Boot applications that implement the Open Service Broker API.\n\nThe [Open Service Broker API](https://www.openservicebrokerapi.org/) project allows developers to deliver services to applications running within cloud native platforms such as Cloud Foundry, Kubernetes, and OpenShift. Spring Cloud Open Service Broker provides a framework based on Spring Boot that enables you to quickly create a service broker for your own managed service on platform that support the Open Service Broker API.",
		"springBootConfig": "The recommended way to get started using Spring Cloud Open Service Broker in your project is with a dependency management system. One of the snippets below can be copied and pasted into your build.\n\n### [](#3-x-release)3.x Release\n\nInclude the Spring Boot starter POM in your application. This starter supports Spring MVC and Spring WebFlux based applications.\n\nMaven:\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-open-service-broker</artifactId>\n            <version>3.3.0</version>\n        </dependency>\n    </dependencies>\n\nGradle:\n\n    dependencies {\n        implementation 'org.springframework.cloud:spring-cloud-starter-open-service-broker:3.3.0'\n    }\n\n### [](#2-x-release)2.x Release\n\nInclude the Spring Boot starter POM in your application. This starter supports Spring MVC based applications only.\n\nMaven:\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-open-service-broker-webmvc</artifactId>\n            <version>2.1.2.RELEASE</version>\n        </dependency>\n    </dependencies>\n\nGradle:\n\n    dependencies {\n        compile 'org.springframework.cloud:spring-cloud-starter-open-service-broker-webmvc:2.1.2.RELEASE'\n    }",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "https://github.com/spring-cloud/spring-cloud-open-service-broker",
		"site": "http://spring.io/projects/spring-cloud-open-service-broker",
		"slug": "spring-cloud-open-service-broker",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/bookstore-service-broker",
				"order": 1,
				"title": "Bookstore Service Broker",
				"description": "Sample service broker application"
			}
		],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-open-service-broker/docs/2.1.3.RELEASE/apidocs/",
				"ref": "https://docs.spring.io/spring-cloud-open-service-broker/docs/2.1.3.RELEASE/reference/html5",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.1.3.RELEASE"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-open-service-broker/docs/3.3.0/apidocs/",
				"ref": "https://docs.spring.io/spring-cloud-open-service-broker/docs/3.3.0/reference",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.3.0"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-open-service-broker/docs/3.4.1-SNAPSHOT/apidocs/",
				"ref": "https://docs.spring.io/spring-cloud-open-service-broker/docs/3.4.1-SNAPSHOT/reference",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.4.1-SNAPSHOT"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud Netflix",
		"body": "Spring Cloud Netflix provides Netflix OSS integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations, you can quickly enable and configure the common patterns inside your application and build large distributed systems with battle-tested Netflix components. The patterns provided include Service Discovery (Eureka).\n\n[](#features)Features\n---------------------\n\nSpring Cloud Netflix features:\n\n*   Service Discovery: Eureka instances can be registered and clients can discover the instances using Spring-managed beans\n    \n*   Service Discovery: an embedded Eureka server can be created with declarative Java configuration\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\nAs long as Spring Cloud Netflix and Eureka Core are on the classpath any Spring Boot application with `@EnableEurekaClient` will try to contact a Eureka server on `[http://localhost:8761](http://localhost:8761)` (the default value of `eureka.client.serviceUrl.defaultZone`):\n\n    @SpringBootApplication\n    @EnableEurekaClient\n    @RestController\n    public class Application {\n    \n      @RequestMapping(\"/\")\n      public String home() {\n        return \"Hello World\";\n      }\n    \n      public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n    \n    }\n\nTo run your own server use the `spring-cloud-starter-netflix-eureka-server` dependency and `@EnableEurekaServer`.\n\n[](#contributing)Contributing\n-----------------------------\n\nWe welcome contributions. You can read more on how to contribute to the project [here](https://github.com/spring-cloud/spring-cloud-netflix#contributing).\n\n[](#community-support)Community Support\n---------------------------------------\n\n*   You can report issues through [Github](https://github.com/spring-cloud/spring-cloud-netflix/issues).\n    \n*   We monitor [StackOverflow](https://stackoverflow.com/) for questions with the `spring-cloud-netflix` tag.\n    \n*   You can contact our team at [Gitter](https://gitter.im/spring-cloud/spring-cloud).\n    \n\n[](#commercial-support)Commercial Support\n-----------------------------------------\n\nCommercial Support is provided as part of the [VMware Spring Runtime](https://spring.io/support) offering.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud/spring-cloud-netflix",
		"site": "https://spring.io/projects/spring-cloud-netflix",
		"slug": "spring-cloud-netflix",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/eureka",
				"order": 1,
				"title": "Service Discovery",
				"description": ""
			},
			{
				"url": "https://github.com/spring-cloud-samples/hystrix-dashboard",
				"order": 2,
				"title": "Circuit Breaker Dashboard",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-netflix/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-netflix/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-netflix/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-netflix/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-RC1"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Kubernetes",
		"body": "Spring Cloud Kubernetes provides implementations of well known Spring Cloud interfaces allowing developers to build and run Spring Cloud applications on Kubernetes. While this project may be useful to you when building a cloud native application, it is also not a requirement in order to deploy a Spring Boot app on Kubernetes. If you are just getting started in your journey to running your Spring Boot app on Kubernetes you can accomplish a lot with nothing more than a basic Spring Boot app and Kubernetes itself. To learn more, you can get started by reading the [Spring Boot reference documentation for deploying to Kubernetes](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#cloud-deployment-kubernetes) and also working through the workshop material [Spring and Kubernetes](https://hackmd.io/@ryanjbaxter/spring-on-k8s-workshop).\n\n[](#features)Features\n---------------------\n\n*   Kubernetes awareness\n    \n*   `DiscoveryClient` implementation\n    \n*   `PropertySource` objects configured via ConfigMaps\n    \n*   Client side loadbalancing via Netflix Ribbon\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\nThe easiest way to get started is by including the Spring Cloud BOM and then adding `spring-cloud-starter-kubernetes-all` to your application’s classpath. If you don’t want to include all of the Spring Cloud Kubernetes features you can add individual starters for the features you would like. By default Spring Cloud Kubernetes will enable the `kubernetes` profile when it detects it is running inside a Kubernetes cluster. You can take advantage of this by creating a `kubernetes-application` configuration properties for anything specific to Kubernetes you might want to configure. Once the starter is on the classpath the application should behave as any other Spring Cloud application.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-cloud/spring-cloud-kubernetes",
		"site": "https://spring.io/projects/spring-cloud-kubernetes",
		"slug": "spring-cloud-kubernetes",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud/spring-cloud-kubernetes/tree/master/spring-cloud-kubernetes-examples",
				"order": 1,
				"title": "Samples",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.1.10.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.1.11.BUILD-SNPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.0.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.0.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.1.3"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.1.4-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.0-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-kubernetes/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-RC1"
      }
		],
		"support": [
			{
				"branch": "1.1.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud GCP",
		"body": "The Spring Cloud GCP project makes the Spring Framework a first-class citizen of Google Cloud Platform (GCP).\n\nImportant\n\nSpring Cloud GCP is no longer part of the Spring Cloud release train. The new repository location is [https://github.com/GoogleCloudPlatform/spring-cloud-gcp](https://github.com/GoogleCloudPlatform/spring-cloud-gcp). If you are upgrading from version 1.x, take a look at the [migration guide](https://googlecloudplatform.github.io/spring-cloud-gcp/reference/html/index.html#migration-guide-from-spring-cloud-gcp-1-x-to-2-x) to upgrade from version 1.x to 2.0.0 (or later).\n\n[](#features)Features\n---------------------\n\nSpring Cloud GCP offers a wide collection of libraries that make it easier to use Google Cloud Platform from Spring Framework applications.\n\nProject features include:\n\n*   Spring Cloud GCP Pub/Sub Support (Spring Integration and Spring Cloud Stream Binder)\n    \n*   Spring Data Cloud Spanner\n    \n*   Spring Data Cloud Datastore\n    \n*   Spring Data Reactive Repositories for Cloud Firestore\n    \n*   Spring Data Cloud SQL\n    \n*   Google Cloud Logging, Tracing and Monitoring (formerly Stackdriver)\n    \n*   Google Cloud Storage (Spring Resource and Spring Integration)\n    \n*   Google Cloud Vision API Template\n    \n*   Spring Security identity extraction from Google Cloud IAP or Firebase headers\n    \n*   Google Cloud BigQuery with Spring Integration\n    \n*   Secret Manager property source and API Template\n    \n*   KMS key encryption/decryption API Template\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\nAll Spring Cloud GCP artifacts are made available through Maven Central.\n\n### [](#bill-of-materials)Bill of Materials\n\nIf you’re using Maven, you should first add the Spring Cloud GCP Bill of Materials (BOM) to your `pom.xml`. This will help you manage the version numbers of `spring-cloud-gcp` dependencies in your project.\n\n    <dependencyManagement>\n       <dependencies>\n           <dependency>\n               <groupId>com.google.cloud</groupId>\n               <artifactId>spring-cloud-gcp-dependencies</artifactId>\n               <version>3.0.0</version>\n               <type>pom</type>\n               <scope>import</scope>\n           </dependency>\n       </dependencies>\n    </dependencyManagement>\n\n### [](#starter-dependencies)Starter Dependencies\n\nSpring Cloud GCP offers [starter dependencies](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-starters) through Maven to easily depend on different modules of the library. Each starter contains all the dependencies and transitive dependencies needed to begin using their corresponding Spring Cloud GCP module.\n\n[](#code-samples)Code Samples\n-----------------------------\n\nThe best way to learn how to use Spring Cloud GCP is to consult the [sample applications on Github](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples).\n\nThe table below highlights several samples of the most commonly used integrations in Spring Cloud GCP.\n\n \n\nGCP Integration\n\nSample Application\n\nCloud Pub/Sub\n\n[spring-cloud-gcp-pubsub-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-pubsub-sample)\n\nCloud Spanner\n\n[spring-cloud-gcp-data-spanner-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-data-spanner-sample)\n\nCloud Datastore\n\n[spring-cloud-gcp-data-datastore-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-data-datastore-sample)\n\nCloud Firestore\n\n[spring-cloud-gcp-data-firestore-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-data-firestore-sample)\n\nCloud SQL (w/ MySQL)\n\n[spring-cloud-gcp-sql-mysql-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-sql-mysql-sample)\n\nCloud Storage\n\n[spring-cloud-gcp-storage-resource-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-storage-resource-sample)\n\nGoogle Cloud Logging\n\n[spring-cloud-gcp-logging-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-logging-sample)\n\nGoogle Cloud Tracing\n\n[spring-cloud-gcp-trace-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-trace-sample)\n\nCloud Vision\n\n[spring-cloud-gcp-vision-api-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-vision-api-sample)\n\nCloud Security - IAP\n\n[spring-cloud-gcp-security-iap-sample](https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples/spring-cloud-gcp-security-iap-sample)\n\n[](#initializr)Initializr\n-------------------------\n\n[Spring Initializr](https://start.spring.io/) is a tool which generates the scaffolding code for a new Spring Boot project. It handles the work of generating the Maven or Gradle build file so you do not have to manually add the dependencies yourself.\n\nSpring Initializr offers three modules from Spring Cloud GCP that you can use to generate your project.\n\n*   **GCP Support**: The GCP Support module contains auto-configuration support for every Spring Cloud GCP integration. Most of the autoconfiguration code is only enabled if the required dependency is added to your project.\n    \n*   **GCP Messaging**: Google Cloud Pub/Sub integrations work out of the box.\n    \n*   **GCP Storage**: Google Cloud Storage integrations work out of the box.\n    \n\n[](#contact-us)Contact Us\n-------------------------\n\nSpring Cloud GCP is an actively maintained project and we encourage users to raise issues and ask questions about the project.\n\nWe actively monitor the following communication channels:\n\n*   [Spring Cloud GCP Github Repository](https://github.com/GoogleCloudPlatform/spring-cloud-gcp): Post an issue in our Github repository to ask questions, make a bug report, file feature requests, etc.\n    \n*   [Spring Cloud GCP Gitter Lobby](https://gitter.im/spring-cloud-gcp/Lobby): Ask questions and talk to the developers in our Gitter chatroom.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "https://github.com/GoogleCloudPlatform/spring-cloud-gcp",
		"site": "https://spring.io/projects/spring-cloud-gcp",
		"slug": "spring-cloud-gcp",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/GoogleCloudPlatform/spring-cloud-gcp/tree/main/spring-cloud-gcp-samples",
				"order": 1,
				"title": "Spring Cloud GCP Code Samples",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "https://googleapis.dev/java/spring-cloud-gcp/2.0.11/index.html",
				"ref": "https://googlecloudplatform.github.io/spring-cloud-gcp/2.0.11/reference/html/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.0.11"
      },
			{
				"api": "https://googleapis.dev/java/spring-cloud-gcp/3.4.0/index.html",
				"ref": "https://googlecloudplatform.github.io/spring-cloud-gcp/3.4.0/reference/html/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.4.0"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud Gateway",
		"body": "This project provides a library for building an API Gateway on top of Spring WebFlux. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.\n\n[](#features)Features\n---------------------\n\nSpring Cloud Gateway features:\n\n*   Built on Spring Framework 5, Project Reactor and Spring Boot 2.0\n    \n*   Able to match routes on any request attribute.\n    \n*   Predicates and filters are specific to routes.\n    \n*   Circuit Breaker integration.\n    \n*   Spring Cloud DiscoveryClient integration\n    \n*   Easy to write Predicates and Filters\n    \n*   Request Rate Limiting\n    \n*   Path Rewriting\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\n    @SpringBootApplication\n    public class DemogatewayApplication {\n    \t@Bean\n    \tpublic RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n    \t\treturn builder.routes()\n    \t\t\t.route(\"path_route\", r -> r.path(\"/get\")\n    \t\t\t\t.uri(\"http://httpbin.org\"))\n    \t\t\t.route(\"host_route\", r -> r.host(\"*.myhost.org\")\n    \t\t\t\t.uri(\"http://httpbin.org\"))\n    \t\t\t.route(\"rewrite_route\", r -> r.host(\"*.rewrite.org\")\n    \t\t\t\t.filters(f -> f.rewritePath(\"/foo/(?<segment>.*)\", \"/${segment}\"))\n    \t\t\t\t.uri(\"http://httpbin.org\"))\n    \t\t\t.route(\"hystrix_route\", r -> r.host(\"*.hystrix.org\")\n    \t\t\t\t.filters(f -> f.hystrix(c -> c.setName(\"slowcmd\")))\n    \t\t\t\t.uri(\"http://httpbin.org\"))\n    \t\t\t.route(\"hystrix_fallback_route\", r -> r.host(\"*.hystrixfallback.org\")\n    \t\t\t\t.filters(f -> f.hystrix(c -> c.setName(\"slowcmd\").setFallbackUri(\"forward:/hystrixfallback\")))\n    \t\t\t\t.uri(\"http://httpbin.org\"))\n    \t\t\t.route(\"limit_route\", r -> r\n    \t\t\t\t.host(\"*.limited.org\").and().path(\"/anything/**\")\n    \t\t\t\t.filters(f -> f.requestRateLimiter(c -> c.setRateLimiter(redisRateLimiter())))\n    \t\t\t\t.uri(\"http://httpbin.org\"))\n    \t\t\t.build();\n    \t}\n    }\n\nTo run your own gateway use the `spring-cloud-starter-gateway` dependency.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "https://github.com/spring-cloud/spring-cloud-gateway",
		"site": "https://spring.io/projects/spring-cloud-gateway",
		"slug": "spring-cloud-gateway",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud/spring-cloud-gateway/tree/master/spring-cloud-gateway-sample",
				"order": 1,
				"title": "Spring Cloud Gateway Sample",
				"description": "Sample included in the project and tested during each CI run."
			},
			{
				"url": "https://github.com/spring-cloud-samples/spring-cloud-gateway-sample",
				"order": 2,
				"title": "Spring Cloud Samples Gateway",
				"description": "External sample that shows more complex filter and predicate usages."
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-gateway/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-M5"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-gateway/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-gateway/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-gateway/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.5-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Function",
		"body": "Spring Cloud Function is a project with the following high-level goals:\n\n*   Promote the implementation of business logic via functions.\n    \n*   Decouple the development lifecycle of business logic from any specific runtime target so that the same code can run as a web endpoint, a stream processor, or a task.\n    \n*   Support a uniform programming model across serverless providers, as well as the ability to run standalone (locally or in a PaaS).\n    \n*   Enable Spring Boot features (auto-configuration, dependency injection, metrics) on serverless providers.\n    \n\nIt abstracts away all of the transport details and infrastructure, allowing the developer to keep all the familiar tools and processes, and focus firmly on business logic.\n\n[](#features)Features\n---------------------\n\nSpring Cloud Function features:\n\n*   _Choice of programming styles - reactive, imperative or hybrid._\n    \n*   _POJO functions (i.e., if something fits the @FunctionalInterface semantics we’ll treat it as function)_\n    \n*   _Transparent type conversion of inputs and outputs._\n    \n*   _Function composition which includes composing imperative functions with reactive._\n    \n*   _REST support to expose functions as HTTP endpoints etc._\n    \n*   _Streaming data (via [Apache Kafka](https://kafka.apache.org/), [Solace](https://solace.com/), [RabbitMQ](https://www.rabbitmq.com/) and more) to/from functions via [Spring Cloud Stream](https://spring.io/projects/spring-cloud-stream) framework._\n    \n*   _Deploying functions packaged as JAR files with an isolated classloader, to support multi-version deployments in a single JVM._\n    \n*   _Packaging functions for deployments, specific to the target platform (e.g., Project Riff, AWS Lambda and more)_\n    \n*   _Adapters for [AWS Lambda](https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-aws), [Microsoft Azure](https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-azure), [Apache OpenWhisk](https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-openwhisk) and possibly other \"serverless\" service providers._\n    \n*   _Support for reactive function with multiple inputs and outputs allowing merging, joining and other complex streaming operation to be handled by functions._\n    \n\nHere’s a complete, executable, testable Spring Boot application (implementing a simple string manipulation):\n\n    @SpringBootApplication\n    public class Application {\n      public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n    \n      @Bean\n      public Function<String, String> uppercase() {\n        return value -> value.toUpperCase();\n      }\n    }\n\n### [](#github)GitHub\n\n*   [Project repo](https://github.com/spring-cloud/spring-cloud-function)\n    \n\n### [](#artifacts-samples)Artifacts & Samples\n\nArtifacts for various modules of spring-cloud-function available in [Maven Central](https://repo.maven.apache.org/maven2/org/springframework/cloud/) repository under _spring-cloud-function-\\*_. At the very least you would need `spring-cloud-function-context` module.\n\nYou can also try our samples available in project [GitHub’s repository](https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-samples)\n\n### [](#talk-to-us)Talk to us\n\n*   [Report issue or request feature/enhancement](https://github.com/spring-cloud/spring-cloud-function/issues)\n    \n*   [Stack Overflow channel](https://stackoverflow.com/questions/tagged/spring-cloud-function)\n    \n\nIf you wish to contribute you can pick any issue that is currently listed or simply submit a PR with functionality that you believe would benefit the project. You can also look for issues with `ideal-for-contribution` [label](https://github.com/spring-cloud/spring-cloud-function/issues?q=is%3Aissue+is%3Aopen+label%3Aideal-for-contribution).\n\n### [](#sample-projects-and-community-contributions)Sample Projects and Community Contributions\n\n*   [Vanilla](https://github.com/spring-cloud/spring-cloud-function/blob/master/spring-cloud-function-samples/function-sample)\n    \n*   [Plain Old Function](https://github.com/spring-cloud/spring-cloud-function/blob/master/spring-cloud-function-samples/function-sample-pof)\n    \n*   [AWS Lambda](https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-samples/function-sample-aws)\n    \n*   [Microsoft Azure](https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-samples/function-sample-azure)\n    \n*   [Google Cloud Platform](https://github.com/spring-cloud/spring-cloud-function/tree/master/spring-cloud-function-adapters/spring-cloud-function-adapter-gcp)\n    \n*   [Alibaba Function Compute](https://www.alibabacloud.com/help/doc-detail/52895.html) (community maintained). You can see integration samples [here](https://github.com/alibaba/aliyun-spring-boot/tree/master/aliyun-spring-boot-starters/aliyun-fc-spring-boot-starter) and [here](https://github.com/alibaba/aliyun-spring-boot/tree/master/aliyun-spring-boot-samples/aliyun-fc-spring-boot-sample)\n    \n\n[](#blogs)Blogs\n---------------\n\n*   [Cloud Events and Spring - part 2 (Oleg Zhurakousky)](https://spring.io/blog/2020/12/23/cloud-events-and-spring-part-2)\n    \n*   [Cloud Events and Spring - part 1 (Oleg Zhurakousky)](https://spring.io/blog/2020/12/10/cloud-events-and-spring-part-1)\n    \n*   [Spring Cloud Stream - functional and reactive (Oleg Zhurakousky)](https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive)\n    \n*   [Spring Cloud Stream - Composed Functions or EIP (Oleg Zhurakousky)](https://spring.io/blog/2019/11/04/spring-cloud-stream-composed-functions-or-eip)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud/spring-cloud-function",
		"site": "https://spring.io/projects/spring-cloud-function",
		"slug": "spring-cloud-function",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-function/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-function/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.2.8"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-function/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-function/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.2.9-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-function/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-function/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-RC1"
      }
		],
		"support": [
			{
				"branch": "3.1.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2021-12-21",
				"ossEnforcedEnd": "2021-12-21",
				"commercialPolicyEnd": "2023-04-21",
				"commercialEnforcedEnd": "2023-04-21"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2019-11-22",
				"ossPolicyEnd": "2020-11-22",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-22",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.2.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2022-11-30",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2024-03-30",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Data Flow",
		"body": "Microservice based Streaming and Batch data processing for Cloud Foundry and Kubernetes.\n\nSpring Cloud Data Flow provides tools to create complex topologies for streaming and batch data pipelines. The data pipelines consist of [Spring Boot](https://projects.spring.io/spring-boot/) apps, built using the [Spring Cloud Stream](https://cloud.spring.io/spring-cloud-stream) or [Spring Cloud Task](https://cloud.spring.io/spring-cloud-task/) microservice frameworks.\n\nSpring Cloud Data Flow supports a range of data processing use cases, from ETL to import/export, event streaming, and predictive analytics.\n\n[](#features)Features\n---------------------\n\nThe Spring Cloud Data Flow server uses [Spring Cloud Deployer](https://github.com/spring-cloud/spring-cloud-deployer/), to deploy data pipelines made of Spring Cloud Stream or Spring Cloud Task applications onto modern platforms such as Cloud Foundry and Kubernetes.\n\nA selection of pre-built [stream](https://cloud.spring.io/spring-cloud-stream-app-starters/) and [task/batch](https://cloud.spring.io/spring-cloud-task-app-starters/) starter apps for various data integration and processing scenarios facilitate learning and experimentation.\n\n[Custom](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#custom-applications) stream and task applications, targeting different middleware or data services, can be built using the familiar Spring Boot style programming model.\n\nA simple [stream pipeline DSL](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#_stream_dsl) makes it easy to specify which apps to deploy and how to connect outputs and inputs. The [composed task DSL](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#_composed_tasks_dsl) is useful for when a series of task apps require to be run as a directed graph.\n\nThe [dashboard](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#dashboard-introduction) offers a graphical editor for building data pipelines interactively, as well as views of deployable apps and monitoring them with metrics using [Wavefront](https://www.wavefront.com), [Prometheus](https://prometheus.io), [Influx DB](https://www.influxdata.com), or other monitoring systems.\n\nThe Spring Cloud Data Flow server exposes a [REST API](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#api-guide-resources) for composing and deploying data pipelines. A separate [shell](https://docs.spring.io/spring-cloud-dataflow/docs/current/reference/htmlsingle/#shell) makes it easy to work with the API from the command line.\n\n[](#getting-started)Getting Started\n-----------------------------------\n\nThe [Spring Cloud Data Flow Microsite](https://dataflow.spring.io/getting-started/) is the best place to get started.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Provides an orchestration service for composable data microservice applications on modern runtimes.",
		"image": "spring-data-flow.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-dataflow",
		"github": "https://github.com/spring-cloud/spring-cloud-dataflow",
		"site": "https://spring.io/projects/spring-cloud-dataflow",
		"slug": "spring-cloud-dataflow",
		"order": 7,
		"samples": [
			{
				"title": "Twitter Analytics",
				"description": "In this demonstration, you will learn how to build a data pipeline using Spring Cloud Data Flow to consume data from TwitterStream and compute simple analytics over data-in-transit using Counter sink applications",
				"url": "https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#_analytics",
				"order": 1
			},
			{
				"title": "Predictive Analytics",
				"description": "In this demonstration, you will learn how to use PMML model in the context of streaming data pipeline orchestrated by Spring Cloud Data Flow",
				"url": "https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#_data_science",
				"order": 2
			},
			{
				"title": "HTTP -> Cassandra",
				"description": "In this demonstration, you will learn how to build a data pipeline using Spring Cloud Data Flow to consume data from an HTTP endpoint and write the payload to a Cassandra database",
				"url": "https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#spring-cloud-data-flow-samples-http-cassandra-overview",
				"order": 3
			},
			{
				"title": "HTTP -> MySQL",
				"description": "In this demonstration, you will learn how to build a data pipeline using Spring Cloud Data Flow to consume data from an http endpoint and write to MySQL database using JDBC sink.",
				"url": "https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#_http_to_mysql_demo",
				"order": 4
			},
			{
				"title": "HTTP -> Gemfire",
				"description": "In this demonstration, you will learn how to build a data pipeline using Spring Cloud Data Flow to consume data from an http endpoint and write to Gemfire using the Gemfire/Geode/PCC sink",
				"url": "https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#_http_to_gemfire_demo",
				"order": 5
			},
			{
				"title": "Batch File Ingest in CF/K8s",
				"description": "In this demonstration, you will learn how to create a data processing application using Spring Batch which will then be run within Spring Cloud Data Flow.",
				"url": "https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#_batch_file_ingest",
				"order": 7
			},
			{
				"title": "SCDF, InfluxDB, and Metrics",
				"description": "In this demonstration, you will learn how Micrometer can help to monitor your Spring Cloud Data Flow streams using InfluxDB and Grafana\r ",
				"url": "https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#spring-cloud-data-flow-samples-micrometer-influx-overview",
				"order": 8
			},
			{
				"title": "SCDF, Prometheus, and Metrics",
				"description": "In this demonstration, you will learn how Micrometer can help to monitor your Spring Cloud Data Flow Streams using Prometheus and Grafana",
				"url": "https://docs.spring.io/spring-cloud-dataflow-samples/docs/current/reference/htmlsingle/#spring-cloud-data-flow-samples-micrometer-prometheus-overview",
				"order": 9
			}
		],
		"documentation": [
			{
				"version": "2.5.3.RELEASE",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.5.3.RELEASE/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.5.3.RELEASE/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.4.2.RELEASE",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.4.2.RELEASE/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.4.2.RELEASE/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.3.1.RELEASE",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.3.1.RELEASE/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.3.1.RELEASE/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.6.4",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/{version}/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.7.2",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.7.2/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.7.2/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.8.3",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.8.3/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.8.3/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.9.2",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.2/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.2/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.10.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/{version}/reference/htmlsingle/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.9.3",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.3/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.3/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.9.4",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.4/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.4/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.9.5",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.5/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.5/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.9.6",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.6/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.6/reference/htmlsingle#getting-started",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.9.7-SNAPSHOT",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.7-SNAPSHOT/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.9.7-SNAPSHOT/reference/htmlsingle#getting-started",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.10.0-RC2",
				"api": "https://docs.spring.io/spring-cloud-dataflow/docs/2.10.0-RC2/api/",
				"ref": "https://docs.spring.io/spring-cloud-dataflow/docs/2.10.0-RC2/reference/htmlsingle#getting-started",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "2.7.x",
				"initialDate": "2020-11-30",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2021-11-30",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-11-30"
			},
			{
				"branch": "2.8.x",
				"initialDate": "2021-06-11",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-06-11",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-06-11"
			},
			{
				"branch": "2.9.x",
				"initialDate": "2021-10-12",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2022-10-12",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2023-10-12"
			}
		]
	},
	{
		"title": "spring-cloud-data",
		"body": "",
		"springBootConfig": "",
		"status": "INCUBATING",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "https://github.com/spring-cloud/spring-cloud-data",
		"site": "http://cloud.spring.io/spring-cloud-data",
		"slug": "spring-cloud-data",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "1.0.0.BUILD-SNAPSHOT",
				"api": "http://github.com/spring-cloud-data/spring-cloud-data",
				"ref": "http://cloud.spring.io/spring-cloud-data/spring-cloud-data.html",
				"status": "SNAPSHOT",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring Cloud Contract",
		"body": "Spring Cloud Contract is an umbrella project holding solutions that help users in successfully implementing the Consumer Driven Contracts approach. Currently Spring Cloud Contract consists of the Spring Cloud Contract Verifier project.\n\nSpring Cloud Contract Verifier is a tool that enables Consumer Driven Contract (CDC) development of JVM-based applications. It is shipped with Contract Definition Language (DSL) written in Groovy or YAML. Contract definitions are used to produce following resources:\n\n*   by default JSON stub definitions to be used by WireMock (HTTP Server Stub) when doing integration testing on the client code (client tests). Test code must still be written by hand, test data is produced by Spring Cloud Contract Verifier.\n    \n*   Messaging routes if you’re using one. We’re integrating with Spring Integration, Spring Cloud Stream and Apache Camel. You can however set your own integrations if you want to.\n    \n*   Acceptance tests (by default in JUnit or Spock) used to verify if server-side implementation of the API is compliant with the contract (server tests). Full test is generated by Spring Cloud Contract Verifier.\n    \n\nSpring Cloud Contract Verifier moves TDD to the level of software architecture.\n\nTo see how Spring Cloud Contract supports other languages just check out [this blog post](https://spring.io/blog/2018/02/13/spring-cloud-contract-in-a-polyglot-world).\n\n[](#features)Features\n---------------------\n\nWhen trying to test an application that communicates with other services then we could do one of two things:\n\n*   deploy all microservices and perform end to end tests\n    \n*   mock other microservices in unit / integration tests\n    \n\nBoth have their advantages but also a lot of disadvantages. Let’s focus on the latter. Deploy all microservices and perform end to end tests\n\nAdvantages:\n\n*   simulates production\n    \n*   tests real communication between services\n    \n\nDisadvantages:\n\n*   to test one microservice we would have to deploy 6 microservices, a couple of databases etc.\n    \n*   the environment where the tests would be conducted would be locked for a single suite of tests (i.e. nobody else would be able to run the tests in the meantime).\n    \n*   long to run\n    \n*   very late feedback\n    \n*   extremely hard to debug\n    \n\nMock other microservices in unit / integration tests\n\nAdvantages:\n\n*   very fast feedback\n    \n*   no infrastructure requirements\n    \n\nDisadvantages:\n\n*   the implementor of the service creates stubs thus they might have nothing to do with the reality\n    \n*   you can go to production with passing tests and failing production\n    \n\nTo solve the aforementioned issues Spring Cloud Contract Verifier with Stub Runner were created. Their main idea is to give you very fast feedback, without the need to set up the whole world of microservices.\n\nSpring Cloud Contract Verifier features:\n\n*   ensure that HTTP / Messaging stubs (used when developing the client) are doing exactly what actual server-side implementation will do\n    \n*   promote acceptance test driven development method and Microservices architectural style\n    \n*   to provide a way to publish changes in contracts that are immediately visible on both sides of the communication\n    \n*   to generate boilerplate test code used on the server side",
		"springBootConfig": "[](#on-the-producer-side)On the Producer Side\n---------------------------------------------\n\nTo start working with Spring Cloud Contract, you can add files with REST or messaging contracts expressed in either Groovy DSL or YAML to the contracts directory, which is set by the contractsDslDir property. By default, it is $rootDir/src/test/resources/contracts.\n\nThen you can add the Spring Cloud Contract Verifier dependency and plugin to your build file, as the following example shows:\n\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-contract-verifier</artifactId>\n        <scope>test</scope>\n    </dependency>\n\nThe following listing shows how to add the plugin, which should go in the build/plugins portion of the file:\n\n    <plugin>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-contract-maven-plugin</artifactId>\n        <version>${spring-cloud-contract.version}</version>\n        <extensions>true</extensions>\n    </plugin>\n\nRunning `./mvnw clean install` automatically generates tests that verify the application compliance with the added contracts. By default, the tests get generated under `org.springframework.cloud.contract.verifier.tests`.\n\nAs the implementation of the functionalities described by the contracts is not yet present, the tests fail.\n\nTo make them pass, you must add the correct implementation of either handling HTTP requests or messages. Also, you must add a base test class for auto-generated tests to the project. This class is extended by all the auto-generated tests, and it should contain all the setup information necessary to run them (for example `RestAssuredMockMvc` controller setup or messaging test setup).\n\nThe following example, from pom.xml, shows how to specify the base test class:\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-contract-maven-plugin</artifactId>\n                <version>${spring-cloud-contract.version}</version>\n                <extensions>true</extensions>\n                <configuration>\n                    <baseClassForTests>com.example.contractTest.BaseTestClass</baseClassForTests>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\nINFO: The baseClassForTests element lets you specify your base test class. It must be a child of a configuration element within spring-cloud-contract-maven-plugin.\n\nOnce the implementation and the test base class are in place, the tests pass, and both the application and the stub artifacts are built and installed in the local Maven repository. You can now merge the changes, and you can publish both the application and the stub artifacts in an online repository.\n\n[](#on-the-consumer-side)On the Consumer Side\n---------------------------------------------\n\nYou can use Spring Cloud Contract Stub Runner in the integration tests to get a running WireMock instance or messaging route that simulates the actual service.\n\nTo do so, add the dependency to Spring Cloud Contract Stub Runner, as the following example shows:\n\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-contract-stub-runner</artifactId>\n        <scope>test</scope>\n    </dependency>\n\nYou can get the Producer-side stubs installed in your Maven repository in either of two ways:\n\nBy checking out the Producer side repository and adding contracts and generating the stubs by running the following commands:\n\n    $ cd local-http-server-repo\n    $ ./mvnw clean install -DskipTests\n\nThe tests are being skipped because the producer-side contract implementation is not in place yet, so the automatically-generated contract tests fail.\n\nBy getting already-existing producer service stubs from a remote repository. To do so, pass the stub artifact IDs and artifact repository URL as Spring Cloud Contract Stub Runner properties, as the following example shows:\n\n        stubrunner:\n          ids: 'com.example:http-server-dsl:+:stubs:8080'\n          repositoryRoot: https://repo.spring.io/libs-snapshot\n\nNow you can annotate your test class with `@AutoConfigureStubRunner`. In the annotation, provide the group-id and artifact-id values for Spring Cloud Contract Stub Runner to run the collaborators' stubs for you, as the following example shows:\n\n    @RunWith(SpringRunner.class)\n    @SpringBootTest(webEnvironment=WebEnvironment.NONE)\n    @AutoConfigureStubRunner(ids = {\"com.example:http-server-dsl:+:stubs:6565\"},\n            stubsMode = StubRunnerProperties.StubsMode.LOCAL)\n    public class LoanApplicationServiceTests {\n\nUse the `REMOTE` stubsMode when downloading stubs from an online repository and `LOCAL` for offline work.\n\nNow, in your integration test, you can receive stubbed versions of HTTP responses or messages that are expected to be emitted by the collaborator service.",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "https://github.com/spring-cloud/spring-cloud-contract",
		"site": " https://spring.io/projects/spring-cloud-contract",
		"slug": "spring-cloud-contract",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/spring-cloud-contract-samples/",
				"order": 1,
				"title": "Spring Cloud Contract Samples (Latest GA branch)",
				"description": "Samples for Spring Cloud Contract with latest GA branch version."
			},
			{
				"url": "https://github.com/spring-cloud-samples/spring-cloud-contract-samples/tree/2.3.x",
				"order": 2,
				"title": "Spring Cloud Contract Samples (Latest Snapshot branch)",
				"description": "Samples for Spring Cloud Contract with latest snapshot branch "
			},
			{
				"url": "http://cloud-samples.spring.io/spring-cloud-contract-samples/workshops.html",
				"order": 3,
				"title": "Spring Cloud Contract workshops",
				"description": "Workshops with Spring Cloud Contract"
			},
			{
				"url": "https://github.com/spring-cloud-samples/spring-cloud-contract-nodejs",
				"order": 4,
				"title": "Spring Cloud Contract with NodeJS",
				"description": "You can read more about the Polyglot approach over here https://spring.io/blog/2018/02/13/spring-cloud-contract-in-a-polyglot-world"
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-contract/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.8.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-contract/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.9.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-contract/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-contract/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-contract/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.3"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-contract/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.4-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-contract/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-M5"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-contract/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-22",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Consul",
		"body": "Spring Cloud Consul provides [Consul](http://consul.io) integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms. With a few simple annotations you can quickly enable and configure the common patterns inside your application and build large distributed systems with Hashicorp’s Consul. The patterns provided include Service Discovery, Distributed Configuration and Control Bus.\n\n[](#features)Features\n---------------------\n\nSpring Cloud Consul features:\n\n*   Service Discovery: instances can be registered with the Consul agent and clients can discover the instances using Spring-managed beans\n    \n*   Supports Ribbon, the client side load-balancer via Spring Cloud Netflix\n    \n*   Supports Spring Cloud LoadBalancer - a client side load-balancer provided by the Spring Cloud project\n    \n*   Supports Zuul, a dynamic router and filter via Spring Cloud Netflix\n    \n*   Distributed Configuration: using the Consul Key/Value store\n    \n*   Control Bus: Distributed control events using Consul Events\n    \n\n[](#quick-start)Quick Start\n---------------------------\n\nAs long as Spring Cloud Consul and the Consul API are on the classpath any Spring Boot application with `@EnableDiscoveryClient` will try to contact a Consul agent on `localhost:8500` (the default values of `spring.cloud.consul.host` and `spring.cloud.consul.port` respectively):\n\n    @Configuration\n    @EnableAutoConfiguration\n    @EnableDiscoveryClient\n    @RestController\n    public class Application {\n    \n      @RequestMapping(\"/\")\n      public String home() {\n        return \"Hello World\";\n      }\n    \n      public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n    \n    }\n\nA local Consul agent must be running. See the [Consul agent documentation](https://consul.io/docs/agent/basics.html) on how to run an agent.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "https://github.com/spring-cloud/spring-cloud-consul",
		"site": "https://spring.io/projects/spring-cloud-consul",
		"slug": "spring-cloud-consul",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud/spring-cloud-consul/tree/master/spring-cloud-consul-sample",
				"order": 1,
				"title": "Consul Sample",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-consul/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.7.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-consul/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.8.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-consul/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-consul/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-consul/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.1"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-consul/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.2-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-consul/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-M5"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-consul/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Connectors",
		"body": "Spring Cloud Connectors simplifies the process of connecting to services and gaining operating environment awareness in cloud platforms such as Cloud Foundry and Heroku, especially for Spring applications. It is designed for extensibility: you can use one of the provided cloud connectors or write one for your cloud platform, and you can use the built-in support for commonly-used services (relational databases, MongoDB, Redis, RabbitMQ) or extend Spring Cloud Connectors to work with your own services.\n\nNote\n\nThis project is [in maintenance mode](https://spring.io/blog/2019/02/15/introducing-java-cfenv-a-new-library-for-accessing-cloud-foundry-services), in favor of the newer [Java CFEnv](https://github.com/pivotal-cf/java-cfenv) project. We will continue to release security-related updates but will not address enhancement requests.\n\n[](#community-extensions)Community Extensions\n---------------------------------------------\n\n*   [Spring Cloud Connectors for SAP HANA Cloud Platform (HCP)](https://github.com/SAP/spring-cloud-sap)\n    \n*   [Spring Cloud Connectors for IBM Bluemix](https://github.com/IBM-Bluemix/bluemix-cloud-connectors)\n    \n*   [Spring Cloud Connectors for Pivotal Spring Cloud Services](https://github.com/pivotal-cf/spring-cloud-services-connector)\n    \n*   [Spring Cloud Connectors for Pivotal Gemfire](https://github.com/pivotal-cf/spring-cloud-gemfire-connector)\n    \n*   [Spring Cloud Connectors for Pivotal Single Sign-On Service](https://github.com/pivotal-cf/spring-cloud-sso-connector)\n    \n*   [Spring Cloud Connectors for Amazon S3](https://github.com/Orange-OpenSource/spring-cloud-s3-connectors)\n    \n*   [Spring Cloud Connectors for Hashicorp Vault](https://github.com/pivotal-cf/spring-cloud-vault-connector)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-connectors",
		"github": "http://github.com/spring-cloud/spring-cloud-connectors",
		"site": "https://spring.io/projects/spring-cloud-connectors",
		"slug": "spring-cloud-connectors",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/cloudfoundry-samples/spring-music",
				"order": 1,
				"title": "Spring Music",
				"description": "Sample application for connecting to persistence  services on Cloud Foundry with the Spring Framework and Spring Boot."
			}
		],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-connectors/docs/current/api/",
				"ref": "http://cloud.spring.io/spring-cloud-connectors/spring-cloud-connectors.html",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.0.9.RELEASE"
      }
		],
		"support": [
			{
				"branch": "2.0.x",
				"initialDate": "2017-10-27",
				"ossPolicyEnd": "2018-10-27",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2020-02-27",
				"commercialEnforcedEnd": "2022-12-01"
			}
		]
	},
	{
		"title": "Spring Cloud Config",
		"body": "Spring Cloud Config provides server and client-side support for externalized configuration in a distributed system. With the Config Server you have a central place to manage external properties for applications across all environments. The concepts on both client and server map identically to the Spring `Environment` and `PropertySource` abstractions, so they fit very well with Spring applications, but can be used with any application running in any language. As an application moves through the deployment pipeline from dev to test and into production you can manage the configuration between those environments and be certain that applications have everything they need to run when they migrate. The default implementation of the server storage backend uses git so it easily supports labelled versions of configuration environments, as well as being accessible to a wide range of tooling for managing the content. It is easy to add alternative implementations and plug them in with Spring configuration.\n\n[](#features)Features\n---------------------\n\nSpring Cloud Config Server features:\n\n*   HTTP, resource-based API for external configuration (name-value pairs, or equivalent YAML content)\n    \n*   Encrypt and decrypt property values (symmetric or asymmetric)\n    \n*   Embeddable easily in a Spring Boot application using `@EnableConfigServer`\n    \n\nConfig Client features (for Spring applications):\n\n*   Bind to the Config Server and initialize Spring `Environment` with remote property sources\n    \n*   Encrypt and decrypt property values (symmetric or asymmetric)\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\nAs long as Spring Boot Actuator and Spring Config Client are on the classpath any Spring Boot application will try to contact a config server on `[http://localhost:8888](http://localhost:8888)`, the default value of `spring.cloud.config.uri`. If you would like to change this default, you can set `spring.cloud.config.uri` in `bootstrap.[yml | properties]` or via system properties or environment variables.\n\n    @Configuration\n    @EnableAutoConfiguration\n    @RestController\n    public class Application {\n    \n      @Value(\"${config.name}\")\n      String name = \"World\";\n    \n      @RequestMapping(\"/\")\n      public String home() {\n        return \"Hello \" + name;\n      }\n    \n      public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n    \n    }\n\nThe value of `config.name` in the sample (or any other values you bind to in the normal Spring Boot way) can come from local configuration or from the remote Config Server. The Config Server will take precedence by default. To see this look at the `/env` endpoint in the application and see the `configServer` property sources.\n\nTo run your own server use the `spring-cloud-config-server` dependency and `@EnableConfigServer`. If you set `spring.config.name=configserver` the app will run on port 8888 and serve data from a sample repository. You need a `spring.cloud.config.server.git.uri` to locate the configuration data for your own needs (by default it is the location of a git repository, and can be a local `file:..` URL).",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud/spring-cloud-config",
		"site": "https://spring.io/projects/spring-cloud-config",
		"slug": "spring-cloud-config",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/configserver",
				"order": 1,
				"title": "Config Server",
				"description": ""
			},
			{
				"url": "https://github.com/spring-cloud-samples/customers-stores",
				"order": 2,
				"title": "Config Clients",
				"description": ""
			},
			{
				"url": "https://github.com/spring-cloud-samples/scripts/blob/master/demo/app.groovy",
				"order": 3,
				"title": "Minimal (Groovy) Client",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-config/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.8.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-config/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.9.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-config/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.5"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-config/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.6-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-config/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.3"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-config/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.4-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-config/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-config/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-RC1"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud Commons",
		"body": "Spring Cloud Commons delivers features as two libraries: Spring Cloud Context and Spring Cloud Commons. Spring Cloud Context provides utilities and special services for the ApplicationContext of a Spring Cloud application (bootstrap context, encryption, refresh scope and environment endpoints). Spring Cloud Commons is a set of abstractions and common classes used in different Spring Cloud implementations (eg. Spring Cloud Netflix vs. Spring Cloud Consul).\n\n[](#features)Features\n---------------------\n\n### [](#spring-cloud-context-features)Spring Cloud Context features:\n\n*   Bootstrap Context\n    \n*   `TextEncryptor` beans\n    \n*   Refresh Scope\n    \n*   Spring Boot Actuator endpoints for manipulating the `Environment`\n    \n\n### [](#spring-cloud-commons-features)Spring Cloud Commons features:\n\n*   `DiscoveryClient` interface\n    \n*   `ServiceRegistry` interface\n    \n*   Instrumentation for `RestTemplate` to resolve hostnames using `DiscoveryClient`",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud/spring-cloud-commons",
		"site": "https://spring.io/projects/spring-cloud-commons",
		"slug": "spring-cloud-commons",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-commons/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.4"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-commons/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.5-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-commons/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-commons/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-RC1"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": "2024-08-22"
			}
		]
	},
	{
		"title": "Spring Cloud - Cloud Foundry Service Broker",
		"body": "This project provides a framework for building a Spring Boot project to quickly implement a service broker for Cloud Foundry.\n\n**NOTE** New releases of this project are being developed with the name [Spring Cloud Open Service Broker](https://spring.io/projects/spring-cloud-open-service-broker).",
		"springBootConfig": "The recommended way to get started using Spring Cloud Open Service Broker in your project is with a dependency management system. One of the snippets below can be copied and pasted into your build.\n\nWith Maven:\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-cloudfoundry-service-broker</artifactId>\n            <version>${springCloudServiceBrokerVersion}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-cloudfoundry-service-broker</artifactId>\n            <version>${springCloudServiceBrokerVersion}</version>\n            <classifier>tests</classifier>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\nWith Gradle:\n\n    dependencies {\n        compile(\"org.springframework.cloud:spring-cloud-cloudfoundry-service-broker:1.0.2.RELEASE\")\n        testCompile(group: \"org.springframework.cloud\", name: \"spring-cloud-cloudfoundry-service-broker\", version: \"1.0.2.RELEASE\", classifier: \"tests\")\n    }```",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker/tree/1.0.x",
		"site": "http://spring.io/projects/spring-cloud-cloudfoundry-service-broker",
		"slug": "spring-cloud-cloudfoundry-service-broker",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-cloudfoundry-service-broker/docs/1.0.4.BUILD-SNAPSHOT/apidocs/",
				"ref": "https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker/tree/1.0.x",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.0.4.BUILD-SNASHOT"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-cloudfoundry-service-broker/docs/1.0.3.RELEASE/apidocs/",
				"ref": "https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker/tree/1.0.x",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "1.0.3.RELEASE"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud for Cloud Foundry",
		"body": "",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-cloud/spring-cloud-cloudfoundry",
		"site": "https://spring.io/projects/spring-cloud-cloudfoundry",
		"slug": "spring-cloud-cloudfoundry",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cloudfoundry/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.4.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cloudfoundry/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.3.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cloudfoundry/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.2"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cloudfoundry/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.3-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cloudfoundry/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.2"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cloudfoundry/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.3-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud CLI",
		"body": "Spring Boot CLI provides [Spring Boot](https://projects.spring.io/spring-boot) command line features for [Spring Cloud](https://github.com/spring-cloud). You can write Groovy scripts to run Spring Cloud component applications (e.g. `@EnableEurekaServer`). You can also easily do things like encryption and decryption to support Spring Cloud Config clients with secret configuration values. With the Launcher CLI you can launch services like Eureka, Zipkin, Config Server conveniently all at once from the command line (very useful at development time).\n\n[](#running-spring-cloud-services-in-development)Running Spring Cloud Services in Development\n---------------------------------------------------------------------------------------------\n\nThe Launcher CLI can be used to run common services like Eureka, Config Server etc. from the command line. To list the available services you can do `spring cloud --list`, and to launch a default set of services just `spring cloud`. To choose the services to deploy, just list them on the command line, e.g.\n\n$ spring cloud eureka configserver h2 kafka stubrunner zipkin\n\n[](#writing-groovy-scripts-and-running-applications)Writing Groovy Scripts and Running Applications\n---------------------------------------------------------------------------------------------------\n\nSpring Cloud CLI has support for most of the Spring Cloud declarative features, such as the `@Enable*` class of annotations. For example, here is a fully functional Eureka server\n\napp.groovy\n\n    @EnableEurekaServer\n    class Eureka {}\n\nwhich you can run from the command line like this\n\n$ spring run app.groovy",
		"springBootConfig": "To install, make sure you have [Spring Boot CLI](https://github.com/spring-projects/spring-boot) (2.0.0 or better):\n\n$ spring version\nSpring CLI v2.2.0.BUILD-SNAPSHOT\n\nE.g. for SDKMan users\n\n    $ sdk install springboot 2.2.0.BUILD-SNAPSHOT\n    $ sdk use springboot 2.2.0.BUILD-SNAPSHOT\n\nand install the Spring Cloud plugin\n\n    $ mvn install\n    $ spring install org.springframework.cloud:spring-cloud-cli:2.2.0.BUILD-SNAPSHOT",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-cloud/spring-cloud-cli",
		"site": "https://spring.io/projects/spring-cloud-cli",
		"slug": "spring-cloud-cli",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cli/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.4.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cli/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.5.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cli/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.2"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cli/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.3-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cli/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.1"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-cli/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.2-SNAPSHOT"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud Circuit Breaker",
		"body": "[](#introduction)Introduction\n-----------------------------\n\nSpring Cloud Circuit breaker provides an abstraction across different circuit breaker implementations. It provides a consistent API to use in your applications allowing you the developer to choose the circuit breaker implementation that best fits your needs for your app.\n\n### [](#supported-implementations)Supported Implementations\n\n*   [Resilience4J](https://github.com/resilience4j/resilience4j)\n    \n*   [Spring Retry](https://github.com/spring-projects/spring-retry)\n    \n\n[](#core-concepts)Core Concepts\n-------------------------------\n\nTo create a circuit breaker in your code you can use the `CircuitBreakerFactory` API. When you include a Spring Cloud Circuit Breaker starter on your classpath a bean implementing this API will automatically be created for you. A very simple example of using this API is given below\n\n    @Service\n    public static class DemoControllerService {\n    \tprivate RestTemplate rest;\n    \tprivate CircuitBreakerFactory cbFactory;\n    \n    \tpublic DemoControllerService(RestTemplate rest, CircuitBreakerFactory cbFactory) {\n    \t\tthis.rest = rest;\n    \t\tthis.cbFactory = cbFactory;\n    \t}\n    \n    \tpublic String slow() {\n    \t\treturn cbFactory.create(\"slow\").run(() -> rest.getForObject(\"/slow\", String.class), throwable -> \"fallback\");\n    \t}\n    \n    }\n\nThe `CircuitBreakerFactory.create` API will create an instance of a class called `CircuitBreaker`. The `run` method takes a `Supplier` and a `Function`. The `Supplier` is the code that you are going to wrap in a circuit breaker. The `Function` is the fallback that will be executed if the circuit breaker is tripped. The function will be passed the `Throwable` that caused the fallback to be triggered. You can optionally exclude the fallback if you do not want to provide one.\n\n### [](#circuit-breakers-in-reactive-code)Circuit Breakers In Reactive Code\n\nIf Project Reactor is on the class path then you can also use `ReactiveCircuitBreakerFactory` for your reactive code.\n\n    @Service\n    public static class DemoControllerService {\n    \tprivate ReactiveCircuitBreakerFactory cbFactory;\n    \tprivate WebClient webClient;\n    \n    \n    \tpublic DemoControllerService(WebClient webClient, ReactiveCircuitBreakerFactory cbFactory) {\n    \t\tthis.webClient = webClient;\n    \t\tthis.cbFactory = cbFactory;\n    \t}\n    \n    \tpublic Mono<String> slow() {\n    \t\treturn webClient.get().uri(\"/slow\").retrieve().bodyToMono(String.class).transform(\n    \t\tit -> cbFactory.create(\"slow\").run(it, throwable -> return Mono.just(\"fallback\")));\n    \t}\n    }\n\nThe `ReactiveCircuitBreakerFactory.create` API will create an instance of a class called `ReactiveCircuitBreaker`. The `run` method takes with a `Mono` or `Flux` and wraps it in a circuit breaker. You can optionally profile a fallback `Function` which will be called if the circuit breaker is tripped and will be passed the `Throwable` that caused the failure.",
		"springBootConfig": "The following starters are available with the Spring Cloud BOM\n\n*   Resilience4J - `org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j`\n    \n*   Reactive Resilience4J - `org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j`\n    \n*   Spring Retry - `org.springframework.cloud:spring-cloud-starter-circuitbreaker-spring-retry`",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud/spring-cloud-circuitbreaker",
		"site": "https://spring.io/projects/spring-cloud-circuitbreaker",
		"slug": "spring-cloud-circuitbreaker",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/spring-cloud-circuitbreaker-demo",
				"order": 1,
				"title": "Spring Cloud Circuit Breaker Demo",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-circuitbreaker/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.0.6.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-circuitbreaker/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.0.7.BUILD-SNASHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-circuitbreaker/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.0.3"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-circuitbreaker/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.0.4-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-circuitbreaker/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.1.3"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-circuitbreaker/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.1.4-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-circuitbreaker/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.0-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-circuitbreaker/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "3.0.0-RC1"
      }
		],
		"support": [
			{
				"branch": "1.0.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "2.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Bus",
		"body": "Spring Cloud Bus links nodes of a distributed system with a lightweight message broker. This can then be used to broadcast state changes (e.g. configuration changes) or other management instructions. AMQP and Kafka broker implementations are included with the project. Alternatively, any [Spring Cloud Stream](https://spring.io/projects/spring-cloud-stream) binder found on the classpath will work out of the box as a transport.\n\n[](#getting-started)Getting Started\n-----------------------------------\n\nAs long as Spring Cloud Bus AMQP and RabbitMQ are on the classpath any Spring Boot application will try to contact a RabbitMQ server on `localhost:5672` (the default value of `spring.rabbitmq.addresses`):\n\n    @Configuration\n    @EnableAutoConfiguration\n    @RestController\n    public class Application {\n    \n      @RequestMapping(\"/\")\n      public String home() {\n        return \"Hello World\";\n      }\n    \n      public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n      }\n    \n    }",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "http://github.com/spring-cloud/spring-cloud-bus",
		"site": "https://spring.io/projects/spring-cloud-bus",
		"slug": "spring-cloud-bus",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/customers-stores",
				"order": 1,
				"title": "Bus Clients",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-bus/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "3.0.2"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-bus/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.0.3-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-bus/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "3.1.2"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-bus/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "3.1.3-SNAPSHOT"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-bus/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "4.0.0-M5"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-bus/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "4.0.0-SNAPSHOT"
      }
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-11-26",
				"ossPolicyEnd": "2020-11-26",
				"ossEnforcedEnd": "",
				"commercialPolicyEnd": "2022-03-26",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.0.x",
				"initialDate": "2020-12-21",
				"ossPolicyEnd": "2022-05-19",
				"ossEnforcedEnd": "2022-05-19",
				"commercialPolicyEnd": "2023-09-19",
				"commercialEnforcedEnd": ""
			},
			{
				"branch": "3.1.x",
				"initialDate": "2021-11-30",
				"ossPolicyEnd": "2023-05-18",
				"ossEnforcedEnd": "2023-05-18",
				"commercialPolicyEnd": "2024-09-18",
				"commercialEnforcedEnd": ""
			}
		]
	},
	{
		"title": "Spring Cloud Azure",
		"body": "Spring Cloud Azure is an open-source project that provides seamless Spring integration with Azure services. It gives developers a Spring-idiomatic way to connect and consume Azure services, with only need few lines of configuration and minimal code changes. Once you’re ready to run your Spring app in the cloud, we recommend [Azure Spring Apps](https://azure.microsoft.com/en-us/services/spring-cloud/?utm_source=springcloudazure). Azure Spring Apps is a fully managed Spring Cloud service, built and supported by the same team as Spring Cloud Azure.\n\n[Spring Cloud Azure:6.0.0-beta.3](https://microsoft.github.io/spring-cloud-azure/6.0.0-beta.3/reference/html/index.html) has released, this is a milestone version to support Spring boot 3.\n\n[](#support)Support\n-------------------\n\n### [](#azure-support-tickets)Azure support tickets\n\nCustomers with an [Azure support plan](https://azure.microsoft.com/en-ca/support/options/) can open an [Azure support ticket](https://azure.microsoft.com/en-ca/support/create-ticket/). **We recommend this option if your problem requires immediate attention.**\n\n### [](#github-issues)GitHub issues\n\nWe use [GitHub Issues](https://github.com/Azure/azure-sdk-for-java/issues/new/choose) to track bugs, questions, and feature requests. GitHub issues are free, but **response time is not guaranteed**. See [GitHub issues support process](https://devblogs.microsoft.com/azure-sdk/github-issue-support-process/) for more details.\n\n[](#features)Features\n---------------------\n\nProject features include:\n\n[](#spring-cloud)Spring Cloud\n=============================\n\n*   Spring Cloud Stream Binder for [Azure Event Hubs](https://azure.microsoft.com/services/event-hubs/) (native API and Apache Kafka API)\n    \n*   Spring Cloud Stream Binder for [Azure Service Bus](https://azure.microsoft.com/services/service-bus/) Topic and Queue\n    \n*   Spring Resource Abstraction for [Azure Storage](https://azure.microsoft.com/services/storage/)\n    \n*   Spring Cache auto-configuration for [Azure Cache for Redis](https://azure.microsoft.com/services/cache/)\n    \n*   [Spring Cloud Functions in Azure](https://docs.microsoft.com/en-us/azure/java/spring-framework/getting-started-with-spring-cloud-function-in-azure)\n    \n*   Spring Cloud Config for [Azure App Configuration](https://docs.microsoft.com/azure/azure-app-configuration/) (Preview)\n    \n\n[](#spring-boot)Spring Boot\n===========================\n\n*   Azure support\n    \n*   Spring Boot Starter for [Azure Active Directory](https://azure.microsoft.com/services/active-directory/)\n    \n*   Spring Boot Starter for [Azure Key Vault](https://azure.microsoft.com/services/key-vault/)\n    \n*   Spring Boot Starter for [Azure Storage](https://azure.microsoft.com/services/storage/) store\n    \n*   Spring Boot Starter for [Azure Active Directory B2C](https://azure.microsoft.com/services/active-directory-b2c/)\n    \n*   Spring Boot Starter for [Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/)\n    \n*   Spring Boot Starter for [Azure Service Bus](https://azure.microsoft.com/services/service-bus/)\n    \n*   Spring Boot Starter for [Azure Service Bus](https://azure.microsoft.com/services/service-bus/) with JMS\n    \n*   Spring Boot Starter for [Azure Event Hubs](https://docs.microsoft.com/en-us/azure/event-hubs/)\n    \n\n[](#spring-data)Spring Data\n===========================\n\n*   Spring Data JPA - [Azure MySQL](https://azure.microsoft.com/services/mysql), [Azure PostgreSQL](https://azure.microsoft.com/services/postgresql/), [Microsoft SQL Server](https://docs.microsoft.com/azure/sql-database/)\n    \n*   Spring Data JDBC - [Azure MySQL](https://azure.microsoft.com/services/mysql), [Azure PostgreSQL](https://azure.microsoft.com/services/postgresql/), [Microsoft SQL Server](https://docs.microsoft.com/azure/sql-database/)\n    \n*   Spring Data MongoDB - Azure MongoDB (via [Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/))\n    \n*   Spring Data for Apache Cassandra - Azure Cassandra (via [Azure CosmosDB](https://azure.microsoft.com/services/cosmos-db/))\n    \n*   Spring Data Azure Cosmos DB - [Azure Cosmos DB](https://azure.microsoft.com/services/cosmos-db/)\n    \n*   Spring Data Redis - [Azure Cache for Redis](https://azure.microsoft.com/services/cache/)\n    \n\n[](#spring-integration)Spring Integration\n=========================================\n\n*   Inbound Channel Adapter and Message Handler for [Azure Event Hubs](https://azure.microsoft.com/en-ca/services/event-hubs/)\n    \n*   Inbound Channel Adapter and Message Handler for [Azure Service Bus](https://azure.microsoft.com/en-ca/services/service-bus/) Topic and Queue\n    \n*   Message Source and Message Handler for [Azure Storage](https://azure.microsoft.com/en-ca/product-categories/storage/) Queue\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\nThe Azure Support entry contains auto-configuration support for Azure managed services. It also provides the capability to automatically inject properties from Cloud Foundry into your applications using Azure managed services. Let us take Spring Boot Starter for Azure Service Bus as an example. All Spring Cloud for Azure artifacts are made available through Maven Central. You can bootstrap your application with [Spring Initializr](https://start.spring.io/) and add the `Azure Support` dependency. Then you can add the usual `azure-servicebus` dependency to your project and the Spring Boot auto-configuration will automatically configure your Spring application with Azure Service Bus.\n\n    <dependency>\n      <groupId>com.azure.spring</groupId>\n      <artifactId>spring-cloud-azure-starter</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.azure</groupId>\n      <artifactId>azure-messaging-servicebus</artifactId>\n    </dependency>\n\nAlternatively, you can add the full name of the Spring Boot Starter for Azure Service Bus.\n\n    <dependency>\n      <groupId>com.azure.spring</groupId>\n      <artifactId>spring-cloud-azure-starter-servicebus</artifactId>\n    </dependency>\n\n[](#run-your-spring-boot-applications)Run your Spring Boot applications\n-----------------------------------------------------------------------\n\nThe best way to run Spring Boot apps on Azure is to use [Azure Spring Apps](https://docs.microsoft.com/azure/spring-cloud/), a fully managed Spring Cloud service, jointly built and operated by Microsoft and Pivotal (VMware). It enables Java developers to easily build and run Spring-boot based microservices on Azure with no code changes. Follow this [tutorial](https://docs.microsoft.com/azure/spring-cloud/spring-cloud-tutorial-prepare-app-deployment) to prepare a Java Spring application for deployment in Azure Spring Apps.\n\nAdditionally, you can deploy a Spring Boot application on\n\n*   [Azure App Service on Linux](https://docs.microsoft.com/azure/java/spring-framework/deploy-spring-boot-java-app-with-maven-plugin)\n    \n*   [Azure Kubernetes Service](https://docs.microsoft.com/azure/java/spring-framework/deploy-spring-boot-java-app-on-kubernetes)",
		"springBootConfig": "",
		"status": "COMMUNITY",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-azure",
		"github": "https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring",
		"site": "https://spring.io/projects/spring-cloud-azure",
		"slug": "spring-cloud-azure",
		"order": 254,
		"samples": [
			{
				"url": "https://github.com/Azure-Samples/azure-spring-boot-samples",
				"order": 1,
				"title": "Spring Cloud Azure Code Samples",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.microsoft.com/azure/java/spring-framework",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.0"
      },
			{
				"api": "",
				"ref": "https://docs.microsoft.com/en-us/azure/java/spring-framework",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.1.7"
      },
			{
				"api": "",
				"ref": "https://docs.microsoft.com/azure/java/spring-framework",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.0.7"
      },
			{
				"api": "",
				"ref": "https://docs.microsoft.com/azure/java/spring-framework",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.0.0"
      },
			{
				"api": "",
				"ref": "https://aka.ms/spring/docs/4.2.0",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "4.2"
      },
			{
				"api": "",
				"ref": "https://aka.ms/spring/docs/4.3.0",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "4.3"
      },
			{
				"api": "",
				"ref": "https://aka.ms/spring/docs/4.4.0",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "4.4"
      },
			{
				"api": "",
				"ref": "https://aka.ms/spring/docs/4.4.1",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "4.4.1"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud for Amazon Web Services",
		"body": "**Spring Cloud for Amazon Web Services is a community-run project**. The website is [https://awspring.io/](https://awspring.io/) and the source repository is located at [https://github.com/awspring/spring-cloud-aws](https://github.com/awspring/spring-cloud-aws).\n\nSpring Cloud for Amazon Web Services, eases the integration with hosted Amazon Web Services. It offers a convenient way to interact with AWS provided services using well-known Spring idioms and APIs, such as the messaging or caching API. Developers can build their application around the hosted services without having to care about infrastructure or maintenance.\n\n[](#features)Features\n---------------------\n\n*   Spring Messaging API implementation for \\[SQS\\]([http://aws.amazon.com/sqs/](http://aws.amazon.com/sqs/)).\n    \n*   Spring Cache API implementation for \\[ElastiCache\\]([http://aws.amazon.com/elasticache/](http://aws.amazon.com/elasticache/)).\n    \n*   Annotation-based mapping of \\[SNS\\]([http://aws.amazon.com/sns/](http://aws.amazon.com/sns/)) endpoints (HTTP).\n    \n*   Access the resources by their logical name defined in a \\[CloudFormation\\]([http://aws.amazon.com/cloudformation/](http://aws.amazon.com/cloudformation/)) stack.\n    \n*   Automatic JDBC `DataSource` creation based on the logical name of an \\[RDS\\]([http://aws.amazon.com/rds/](http://aws.amazon.com/rds/)) instance.\n    \n*   Ant-style path matching `ResourceLoader` for \\[S3\\]([http://aws.amazon.com/s3/](http://aws.amazon.com/s3/)) buckets.\n    \n\n### [](#annotation-based-sqs-queue-listener)Annotation-based SQS Queue Listener\n\n    @MessageMapping(\"logicalQueueName\")\n    private void receiveMessage(Person person, @Header(\"SenderId\") String senderId) {\n        // ...\n    }\n\n### [](#annotation-based-sns-listener)Annotation-based SNS Listener\n\n    @Controller\n    @RequestMapping(\"/sns/receive\")\n    public class SnsEndpointController {\n    \n    @NotificationMessageMapping\n    public void receiveNotification(@NotificationMessage String message, @NotificationSubject String subject) {\n        // ...\n    }\n    \n    @NotificationSubscriptionMapping\n    public void confirmSubscription(NotificationStatus notificationStatus) {\n        notificationStatus.confirmSubscription();\n    }\n\n### [](#messaging-templates)Messaging Templates\n\n    snsTemplate.sendNotification(\"SnsTopic\", \"message\", \"subject\");\n    sqsTemplate.convertAndSend(\"Queue\", new Person(\"John\", \"Doe\"));",
		"springBootConfig": "",
		"status": "COMMUNITY",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "https://github.com/awspring/spring-cloud-aws",
		"site": "https://spring.io/projects/spring-cloud-aws",
		"slug": "spring-cloud-aws",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/aws-refapp",
				"order": 1,
				"title": "Reference Application",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-aws/docs/{version}/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.6.RELEASE"
      },
			{
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud-aws/docs/{version}/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.2.7.BUILD-SNASHOT"
      },
			{
				"api": "https://docs.awspring.io/spring-cloud-aws/docs/{version}/apidocs/index.html",
				"ref": "https://docs.awspring.io/spring-cloud-aws/docs/{version}/reference/html/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2.3.0"
      },
			{
				"api": "https://docs.awspring.io/spring-cloud-aws/docs/{version}/apidocs/index.html",
				"ref": "https://docs.awspring.io/spring-cloud-aws/docs/{version}/reference/html/index.html",
				"status": "SNAPSHOT",
				"current": false,
				"version": "2.3.1-SNAPSHOT"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud App Broker",
		"body": "Spring Cloud App Broker is a framework for building Spring Boot applications that implement the Open Service Broker API to deploy applications to a platform.\n\nThe [Open Service Broker API](https://www.openservicebrokerapi.org/) project allows developers to deliver services to applications running within cloud native platforms such as Cloud Foundry, Kubernetes, and OpenShift. Spring Cloud App Broker provides a framework based on Spring Boot that enables you to quickly create a service broker that deploys applications and services to the platform when managed services are provisioned.\n\nCurrently Cloud Foundry is supported as a target platform for service instance backing applications and services.",
		"springBootConfig": "The recommended way to get started using Spring Cloud App Broker in your project is with a dependency management system. One of the snippets below can be copied and pasted into your build.\n\nWith Maven:\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-app-broker-cloudfoundry</artifactId>\n            <version>1.5.3</version>\n        </dependency>\n    </dependencies>\n\nWith Gradle:\n\n    dependencies {\n        implementation 'org.springframework.cloud:spring-cloud-starter-app-broker-cloudfoundry:1.5.3'\n    }",
		"status": "ACTIVE",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud-app-broker",
		"github": "https://github.com/spring-cloud/spring-cloud-app-broker",
		"site": "https://spring.io/projects/spring-cloud-app-broker",
		"slug": "spring-cloud-app-broker",
		"order": 256,
		"samples": [
			{
				"url": "https://github.com/spring-cloud-samples/spring-cloud-app-broker-samples",
				"order": 1,
				"title": "Spring Cloud App Broker Samples",
				"description": "Sample applications for Spring Cloud App Broker"
			}
		],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-cloud-app-broker/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-app-broker/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.4.2"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-app-broker/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-app-broker/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "1.5.3"
      },
			{
				"api": "https://docs.spring.io/spring-cloud-app-broker/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-cloud-app-broker/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.5.4-SNAPSHOT"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud Alibaba",
		"body": "Spring Cloud Alibaba provides a one-stop solution for distributed application development. It contains all the components required to develop distributed applications, making it easy for you to develop your applications using Spring Cloud.\n\nWith Spring Cloud Alibaba, you only need to add some annotations and a small amount of configurations to connect Spring Cloud applications to the distributed solutions of Alibaba, and build a distributed application system with Alibaba middleware.\n\n[](#features)Features\n---------------------\n\n### [](#spring-cloud)Spring Cloud\n\n*   **Flow control and service degradation**：flow control, circuit breaking and system adaptive protection with [Alibaba Sentinel](https://github.com/alibaba/Sentinel/)\n    \n*   **Service registration and discovery**：instances can be registered with [Alibaba Nacos](https://github.com/alibaba/nacos/) and clients can discover the instances using Spring-managed beans. Supports Ribbon, the client side load-balancer via Spring Cloud Netflix\n    \n*   **Distributed Configuration**：using [Alibaba Nacos](https://github.com/alibaba/nacos/) as a data store\n    \n*   **Event-driven**：building highly scalable event-driven microservices connected with Spring Cloud Stream [RocketMQ](https://rocketmq.apache.org/) Binder\n    \n*   **Message Bus**: link nodes of a distributed system with Spring Cloud Bus RocketMQ\n    \n*   **Distributed Transaction**：support for distributed transaction solution with high performance and ease of use with [Seata](https://github.com/seata/seata)\n    \n*   **Dubbo RPC**：extend the communication protocols of Spring Cloud service-to-service calls by [Apache Dubbo RPC](https://dubbo.apache.org/en/)\n    \n\n### [](#spring-boot)Spring Boot\n\nAll the Spring Boot Starters are maintained in [Alibaba Cloud Spring Boot Project](https://github.com/alibaba/aliyun-spring-boot).\n\n*   Spring Boot Starter for [Alibaba Cloud Object Storage Service](https://www.aliyun.com/product/oss)\n    \n*   Spring Boot Starter for [Alibaba Cloud Short Message Service](https://www.aliyun.com/product/sms)\n    \n*   Spring Boot Starter for [Alibaba Cloud Redis](https://www.aliyun.com/product/kvstore)\n    \n*   Spring Boot Starter for [Alibaba Cloud RDS MySQL](https://www.aliyun.com/product/rds/mysql)\n    \n*   Spring Boot Starter for [Alibaba Cloud SchedulerX](https://cn.aliyun.com/aliware/schedulerx)\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\nThe easiest way to get started is by including the Spring Cloud BOM and then adding `spring-cloud-alibaba-dependencies` to your application’s classpath. If you don’t want to include all of the Spring Cloud Alibaba features you can add individual starters for the features you would like.\n\nThe `spring-cloud-alibaba-dependencies` dependency in pom:\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>{project-version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\nIf you want to use Spring Boot Starters for Alibaba Cloud services, you should add the Aliyun Spring Boot BOM to your pom.xml:\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>aliyun-spring-boot-dependencies</artifactId>\n                <version>{project-version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n### [](#run-your-spring-bootcloud-applications-on-alibaba-cloud)Run your Spring Boot/Cloud applications on Alibaba Cloud\n\n[Enterprise Distributed Application Service (EDAS)](https://www.aliyun.com/product/edas?spm=spring.io.topbar) is a platform as a service (PaaS) service for application hosting and microservice management, providing full-stack solutions such as application development, deployment, monitoring, and O&M. It supports Apache Dubbo, Spring Cloud, and other microservice runtime environments, helping you easily migrate applications to Alibaba Cloud.\n\nFollow this [tutorial](https://help.aliyun.com/document_detail/158047.html) to prepare a Java Spring Boot/Cloud application for deployment in EDAS.\n\n[MicroServices Engine (MSE)](https://www.aliyun.com/product/aliware/mse?spm=spring.io.topbar) is a microservices platform for the mainstream open source microservices frameworks Spring Cloud, including governance center and full managed registration/configuration center such as Zookeeper, Eureka and Nacos.\n\nYour application can enjoy the comprehensive microservices governance capability provided by the product without modifying the code and configuration through javaagent technology.\n\nMSE also provides highly available, operation and maintenance free clusters such as zookeeper, Nacos and Eureka, fully compatible with the standard interface of open source products by hosting registration / configuration center.\n\nFollow this [tutorial](https://help.aliyun.com/document_detail/139460.html) to build a Nacos Engine for service registry in MSE.",
		"springBootConfig": "",
		"status": "COMMUNITY",
		"description": "",
		"image": "",
		"featured": false,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/",
		"github": "https://github.com/alibaba/spring-cloud-alibaba",
		"site": "https://spring.io/projects/spring-cloud-alibaba",
		"slug": "spring-cloud-alibaba",
		"order": 255,
		"samples": [
			{
				"url": "https://github.com/alibaba/spring-cloud-alibaba/tree/master/spring-cloud-alibaba-examples",
				"order": 1,
				"title": "Spring Cloud Alibaba Code Samples",
				"description": ""
			},
			{
				"url": "https://github.com/fangjian0423/rocketmq-binder-demo",
				"order": 2,
				"title": "Spring Cloud Stream RocketMQ Binder & Spring Cloud Bus RocketMQ Samples",
				"description": ""
			},
			{
				"url": "https://github.com/aliyun/alibabacloud-microservice-demo",
				"order": 3,
				"title": "An Alibaba Cloud native microservice demo powered by Apache Dubbo and Spring Cloud Alibaba",
				"description": ""
			}
		],
		"documentation": [
			{
				"api": "https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html",
				"ref": "https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.1.2.RELEASE"
      },
			{
				"api": "https://spring-cloud-alibaba-group.github.io/github-pages/finchley/spring-cloud-alibaba.html",
				"ref": "https://spring-cloud-alibaba-group.github.io/github-pages/finchley/spring-cloud-alibaba.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.0.2.RELEASE"
      },
			{
				"api": "https://spring-cloud-alibaba-group.github.io/github-pages/edgware/spring-cloud-alibaba.html",
				"ref": "https://spring-cloud-alibaba-group.github.io/github-pages/edgware/spring-cloud-alibaba.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "1.5.1.RELEASE"
      },
			{
				"api": "https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html",
				"ref": "https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false,
				"version": "2.2.9.RELEASE"
      },
			{
				"api": "https://spring-cloud-alibaba-group.github.io/github-pages/2021/en-us/index.html",
				"ref": "https://spring-cloud-alibaba-group.github.io/github-pages/2021/en-us/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "2021.0.4.0"
      }
		],
		"support": []
	},
	{
		"title": "Spring Cloud",
		"body": "Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.\n\n[](#features)Features\n---------------------\n\nSpring Cloud focuses on providing good out of box experience for typical use cases and extensibility mechanism to cover others.\n\n*   Distributed/versioned configuration\n    \n*   Service registration and discovery\n    \n*   Routing\n    \n*   Service-to-service calls\n    \n*   Load balancing\n    \n*   Circuit Breakers\n    \n*   Global locks\n    \n*   Leadership election and cluster state\n    \n*   Distributed messaging\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\n### [](#generating-a-new-spring-cloud-project)Generating A New Spring Cloud Project\n\nThe easiest way to get started is visit [start.spring.io](http://start.spring.io), select your Spring Boot version and the Spring Cloud projects you want to use. This will add the corresponding Spring Cloud BOM version to your Maven/Gradle file when you generate the project.\n\n### [](#adding-spring-cloud-to-an-existing-spring-boot-application)Adding Spring Cloud To An Existing Spring Boot Application\n\nIf you an existing Spring Boot app you want to add Spring Cloud to that app, the first step is to determine the version of Spring Cloud you should use. The version you use in your app will depend on the version of Spring Boot you are using.\n\nThe table below outlines which version of Spring Cloud maps to which version of Spring Boot.\n\nTable 1. Release train Spring Boot compatibility  \n\nRelease Train\n\nBoot Version\n\n[2022.0.x](https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes) aka Kilburn\n\n3.0.x\n\n[2021.0.x](https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0-Release-Notes) aka Jubilee\n\n2.6.x, 2.7.x (Starting with 2021.0.3)\n\n[2020.0.x](https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes) aka Ilford\n\n2.4.x, 2.5.x (Starting with 2020.0.3)\n\n[Hoxton](https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes)\n\n2.2.x, 2.3.x (Starting with SR5)\n\n[Greenwich](https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes)\n\n2.1.x\n\n[Finchley](https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes)\n\n2.0.x\n\n[Edgware](https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes)\n\n1.5.x\n\n[Dalston](https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes)\n\n1.5.x\n\nWarning\n\nSpring Cloud Dalston, Edgware, Finchley, and Greenwich have all reached end of life status and are no longer supported.\n\nBug fixes and backwards compatible features are added to each release train via a service release (SR). Once you determine which version of Spring Cloud to use, you should use the latest service release for that release train. You can find the latest service release information on our [release notes page](https://github.com/spring-cloud/spring-cloud-release/wiki).\n\nNow that you know which release train to use and the latest service release for that release train you are ready to add the Spring Cloud BOM to your application.\n\n    <properties>\n        <spring.cloud-version>Hoxton.SR8</spring.cloud-version>\n    </properties>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud-version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    buildscript {\n      dependencies {\n        classpath \"io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE\"\n      }\n    }\n    \n    ext {\n      set('springCloudVersion', \"Hoxton.SR8\")\n    }\n    \n    \n    apply plugin: \"io.spring.dependency-management\"\n    \n    dependencyManagement {\n      imports {\n        mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"\n      }\n    }\n\nNote\n\nThe release train contains a `spring-cloud-dependencies` as well as the `spring-cloud-starter-parent`. You can use the parent as you would the `spring-boot-starter-parent` (if you are using Maven). If you only need dependency management, the \"dependencies\" version is a BOM-only version of the same thing (it just contains dependency management and no plugin declarations or direct references to Spring or Spring Boot). If you are using the Spring Boot parent POM, then you can use the BOM from Spring Cloud. The opposite is not true: using the Cloud parent makes it impossible, or at least unreliable, to also use the Boot BOM to change the version of Spring Boot and its dependencies.\n\nJust like Spring Boot, many Spring Cloud projects include starters that you can add as dependencies to add various cloud native features to your project. In many cases, many features are enabled purely by adding the starter to your classpath. The starter names are documented within the individual projects. Below is an example of how you would add a Spring Cloud Config Client and a Spring Cloud Netflix Eureka client to your application.\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-config</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        ...\n    </dependencies>\n\n    dependencies {\n      compile 'org.springframework.cloud:spring-cloud-starter-config'\n      compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'\n      //...\n    }\n\n### [](#getting-started-resources)Getting Started Resources\n\n*   [Beginner’s Guide To Spring Cloud](https://www.youtube.com/watch?v=aO3W-lYnw-o)\n    \n\n[](#main-projects)Main Projects\n-------------------------------\n\n### [](#spring-cloud-config)[Spring Cloud Config](https://spring.io/projects/spring-cloud-config)\n\nCentralized external configuration management backed by a git repository. The configuration resources map directly to Spring `Environment` but could be used by non-Spring applications if desired.\n\n### [](#spring-cloud-netflix)[Spring Cloud Netflix](https://spring.io/projects/spring-cloud-netflix)\n\nIntegration with various Netflix OSS components (Eureka, Hystrix, Zuul, Archaius, etc.).\n\n### [](#spring-cloud-bus)[Spring Cloud Bus](https://spring.io/projects/spring-cloud-bus)\n\nAn event bus for linking services and service instances together with distributed messaging. Useful for propagating state changes across a cluster (e.g. config change events).\n\n### [](#spring-cloud-cloudfoundry)[Spring Cloud Cloudfoundry](https://spring.io/projects/spring-cloud-cloudfoundry)\n\nIntegrates your application with Pivotal Cloud Foundry. Provides a service discovery implementation and also makes it easy to implement SSO and OAuth2 protected resources.\n\n### [](#spring-cloud-open-service-broker)[Spring Cloud Open Service Broker](https://spring.io/projects/spring-cloud-open-service-broker)\n\nProvides a starting point for building a service broker that implements the Open Service Broker API.\n\n### [](#spring-cloud-cluster)[Spring Cloud Cluster](http://github.com/spring-cloud/spring-cloud-cluster)\n\nLeadership election and common stateful patterns with an abstraction and implementation for Zookeeper, Redis, Hazelcast, Consul.\n\n### [](#spring-cloud-consul)[Spring Cloud Consul](https://spring.io/projects/spring-cloud-consul)\n\nService discovery and configuration management with Hashicorp Consul.\n\n### [](#spring-cloud-security)[Spring Cloud Security](https://spring.io/projects/spring-cloud-security)\n\nProvides support for load-balanced OAuth2 rest client and authentication header relays in a Zuul proxy.\n\n### [](#spring-cloud-sleuth)[Spring Cloud Sleuth](https://spring.io/projects/spring-cloud-sleuth)\n\nDistributed tracing for Spring Cloud applications, compatible with Zipkin, HTrace and log-based (e.g. ELK) tracing.\n\n### [](#spring-cloud-data-flow)[Spring Cloud Data Flow](https://spring.io/projects/spring-cloud-dataflow)\n\nA cloud-native orchestration service for composable microservice applications on modern runtimes. Easy-to-use DSL, drag-and-drop GUI, and REST-APIs together simplifies the overall orchestration of microservice based data pipelines.\n\n### [](#spring-cloud-stream)[Spring Cloud Stream](https://spring.io/projects/spring-cloud-stream)\n\nA lightweight event-driven microservices framework to quickly build applications that can connect to external systems. Simple declarative model to send and receive messages using Apache Kafka or RabbitMQ between Spring Boot apps.\n\n### [](#spring-cloud-stream-applications)[Spring Cloud Stream Applications](https://spring.io/projects/spring-cloud-stream-applications)\n\nSpring Cloud Stream Applications are out of the box Spring Boot applications providing integration with external middleware systems such as Apache Kafka, RabbitMQ etc. using the binder abstraction in Spring Cloud Stream.\n\n### [](#spring-cloud-task)[Spring Cloud Task](https://spring.io/projects/spring-cloud-task)\n\nA short-lived microservices framework to quickly build applications that perform finite amounts of data processing. Simple declarative for adding both functional and non-functional features to Spring Boot apps.\n\n### [](#spring-cloud-task-app-starters)[Spring Cloud Task App Starters](https://spring.io/projects/spring-cloud-task-app-starters)\n\nSpring Cloud Task App Starters are Spring Boot applications that may be any process including Spring Batch jobs that do not run forever, and they end/stop after a finite period of data processing.\n\n### [](#spring-cloud-zookeeper)[Spring Cloud Zookeeper](https://spring.io/projects/spring-cloud-zookeeper)\n\nService discovery and configuration management with Apache Zookeeper.\n\n### [](#spring-cloud-connectors)[Spring Cloud Connectors](http://github.com/spring-cloud/spring-cloud-connectors)\n\nMakes it easy for PaaS applications in a variety of platforms to connect to backend services like databases and message brokers (the project formerly known as \"Spring Cloud\").\n\n### [](#spring-cloud-starters)[Spring Cloud Starters](http://github.com/spring-cloud/spring-cloud-starters)\n\nSpring Boot-style starter projects to ease dependency management for consumers of Spring Cloud. (Discontinued as a project and merged with the other projects after Angel.SR2.)\n\n### [](#spring-cloud-cli)[Spring Cloud CLI](http://github.com/spring-cloud/spring-cloud-cli)\n\nSpring Boot CLI plugin for creating Spring Cloud component applications quickly in Groovy\n\n### [](#spring-cloud-contract)[Spring Cloud Contract](https://spring.io/projects/spring-cloud-contract)\n\nSpring Cloud Contract is an umbrella project holding solutions that help users in successfully implementing the Consumer Driven Contracts approach.\n\n### [](#spring-cloud-gateway)[Spring Cloud Gateway](https://spring.io/projects/spring-cloud-gateway)\n\nSpring Cloud Gateway is an intelligent and programmable router based on Project Reactor.\n\n### [](#spring-cloud-openfeign)[Spring Cloud OpenFeign](https://spring.io/projects/spring-cloud-openfeign)\n\nSpring Cloud OpenFeign provides integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.\n\n### [](#spring-cloud-pipelines)[Spring Cloud Pipelines](https://spring.io/projects/spring-cloud-pipelines)\n\nSpring Cloud Pipelines provides an opinionated deployment pipeline with steps to ensure that your application can be deployed in zero downtime fashion and easilly rolled back of something goes wrong.\n\n### [](#spring-cloud-function)[Spring Cloud Function](http://github.com/spring-cloud/spring-cloud-function)\n\nSpring Cloud Function promotes the implementation of business logic via functions. It supports a uniform programming model across serverless providers, as well as the ability to run standalone (locally or in a PaaS).\n\n[](#release-trains)Release Trains\n---------------------------------\n\nSpring Cloud is an umbrella project consisting of independent projects with, in principle, different release cadences. To manage the portfolio a BOM (Bill of Materials) is published with a curated set of dependencies on the individual project. Go [here](https://github.com/spring-cloud/spring-cloud-release/wiki/Release-Train-Naming-Convention) to read about the Release Train naming conventions.",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Provides a set of tools for common patterns in distributed systems. Useful for building and deploying microservices.",
		"image": "spring-cloud.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-cloud",
		"github": "http://github.com/spring-cloud",
		"site": "https://spring.io/projects/spring-cloud",
		"slug": "spring-cloud",
		"order": 6,
		"samples": [
			{
				"title": "Config Server",
				"description": "",
				"url": "https://github.com/spring-cloud-samples/configserver",
				"order": 1
			},
			{
				"title": "Service Registry",
				"description": "",
				"url": "https://github.com/spring-cloud-samples/eureka",
				"order": 2
			},
			{
				"title": "Circuit Breaker Dashboard",
				"description": "",
				"url": "https://github.com/spring-cloud-samples/hystrix-dashboard",
				"order": 3
			},
			{
				"title": "Business Application",
				"description": "(Customers and Stores)",
				"url": "https://github.com/spring-cloud-samples/customers-stores",
				"order": 4
			},
			{
				"title": "OAuth2 Authorization Server",
				"description": "",
				"url": "https://github.com/spring-cloud-samples/authserver",
				"order": 5
			},
			{
				"title": "OAuth2 SSO Client",
				"description": "",
				"url": "https://github.com/spring-cloud-samples/sso",
				"order": 6
			},
			{
				"title": "Integration Test Samples",
				"description": "",
				"url": "https://github.com/spring-cloud-samples/tests",
				"order": 7
			},
			{
				"title": "Spring Cloud Contract Samples",
				"description": "",
				"url": "https://github.com/spring-cloud-samples/spring-cloud-contract-samples",
				"order": 8
			}
		],
		"documentation": [
			{
				"version": "Hoxton.BUILD-SNAPSHOT",
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud/docs/Hoxton.BUILD-SNAPSHOT/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "Hoxton.SR12",
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2020.0.6",
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2020.0.7-SNAPSHOT",
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2022.0.0-SNAPSHOT",
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2021.0.5",
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2021.0.6-SNAPSHOT",
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2022.0.0-RC1",
				"api": "",
				"ref": "https://docs.spring.io/spring-cloud/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring Boot",
		"body": "Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\".\n\nWe take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.\n\nIf you’re looking for information about a specific version, or instructions about how to upgrade from an earlier release, check out [the project release notes section](https://github.com/spring-projects/spring-boot/wiki#release-notes) on our wiki.\n\n[](#features)Features\n---------------------\n\n*   Create stand-alone Spring applications\n    \n*   Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)\n    \n*   Provide opinionated 'starter' dependencies to simplify your build configuration\n    \n*   Automatically configure Spring and 3rd party libraries whenever possible\n    \n*   Provide production-ready features such as metrics, health checks, and externalized configuration\n    \n*   Absolutely no code generation and no requirement for XML configuration\n    \n\n[](#getting-started)Getting Started\n-----------------------------------\n\n*   Super quick — try the [Quickstart Guide](https://spring.io/quickstart).\n    \n*   More general — try [Building an Application with Spring Boot](https://spring.io/guides/gs/spring-boot/)\n    \n*   More specific — try [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/).\n    \n*   Or search through all our guides on the [Guides](https://spring.io/guides) homepage.\n    \n\n[](#talks-and-videos)Talks and videos\n-------------------------------------\n\n*   [It’s a Kind of Magic: Under the Covers of Spring Boot](https://content.pivotal.io/springone-platform-2017/its-a-kind-of-magic-under-the-covers-of-spring-boot-brian-clozel-st%C3%A9phane-nicoll)\n    \n*   [What’s New in Spring Boot 2.0](https://content.pivotal.io/springone-platform-2017/whats-new-in-spring-boot-2-0-phillip-webb-madhura-bhave)\n    \n*   [Introducing Spring Boot 2.0 webinar](https://content.pivotal.io/webinars/mar-13-introducing-spring-boot-2-0-webinar)\n    \n*   [Test Driven Development with Spring Boot](https://content.pivotal.io/springone-platform-2017/test-driven-development-with-spring-boot-sannidhi-jalukar-madhura-bhave)\n    \n*   [From Zero to Hero with Spring Boot 2.0](https://content.pivotal.io/springone-platform-2017/from-zero-to-hero-with-spring-boot-brian-clozel)\n    \n\nYou can also join the [Spring Boot community on Gitter](https://gitter.im/spring-projects/spring-boot)!",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "Takes an opinionated view of building Spring applications and gets you up and running as quickly as possible.",
		"image": "spring-boot.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-boot",
		"github": "http://github.com/spring-projects/spring-boot",
		"site": "http://spring.io/projects/spring-boot",
		"slug": "spring-boot",
		"order": 1,
		"samples": [
			{
				"title": "Sagan",
				"description": "The Spring Boot application behind the spring.io website",
				"url": "https://github.com/spring-io/sagan",
				"order": 1
			},
			{
				"title": "Initializr",
				"description": "start.spring.io, powered by Spring Boot",
				"url": "https://github.com/spring-io/initializr",
				"order": 2
			}
		],
		"documentation": [
			{
				"version": "2.3.12.RELEASE",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.4.13",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "3.0.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.5.14",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.6.13",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.6.14-SNAPSHOT",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.7.5",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "2.7.6-SNAPSHOT",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "3.0.0-RC2",
				"api": "https://docs.spring.io/spring-boot/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-boot/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "1.5.x",
				"initialDate": "2017-01-30",
				"ossEnforcedEnd": "2019-08-06",
				"ossPolicyEnd": "2019-08-06",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2020-11-06"
			},
			{
				"branch": "2.0.x",
				"initialDate": "2018-03-01",
				"ossEnforcedEnd": "2019-03-01",
				"ossPolicyEnd": "2019-03-01",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2020-06-01"
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-10-30",
				"ossEnforcedEnd": "2019-10-30",
				"ossPolicyEnd": "2019-10-30",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2021-01-30"
			},
			{
				"branch": "2.2.x",
				"initialDate": "2019-10-16",
				"ossEnforcedEnd": "2020-10-16",
				"ossPolicyEnd": "2020-10-16",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2022-01-16"
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-05-15",
				"ossEnforcedEnd": "2021-05-20",
				"ossPolicyEnd": "2021-05-20",
				"commercialEnforcedEnd": "2022-08-20",
				"commercialPolicyEnd": "2022-08-20"
			},
			{
				"branch": "2.4.x",
				"initialDate": "2020-11-12",
				"ossEnforcedEnd": "2021-11-18",
				"ossPolicyEnd": "2021-11-18",
				"commercialEnforcedEnd": "2023-02-23",
				"commercialPolicyEnd": "2023-02-18"
			},
			{
				"branch": "2.5.x",
				"initialDate": "2021-05-20",
				"ossEnforcedEnd": "2022-05-19",
				"ossPolicyEnd": "2022-05-19",
				"commercialEnforcedEnd": "2023-08-24",
				"commercialPolicyEnd": "2023-08-19"
			},
			{
				"branch": "2.6.x",
				"initialDate": "2021-11-17",
				"ossEnforcedEnd": "2022-11-24",
				"ossPolicyEnd": "2022-11-24",
				"commercialEnforcedEnd": "2024-02-24",
				"commercialPolicyEnd": "2024-02-24"
			},
			{
				"branch": "2.7.x",
				"initialDate": "2022-05-19",
				"ossEnforcedEnd": "2023-11-18",
				"ossPolicyEnd": "2023-11-18",
				"commercialEnforcedEnd": "2025-02-18",
				"commercialPolicyEnd": "2025-02-18"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2022-11-24",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-11-24",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-02-24"
			}
		]
	},
	{
		"title": "Spring Batch",
		"body": "A lightweight, comprehensive batch framework designed to enable the development of robust batch applications vital for the daily operations of enterprise systems.\n\nSpring Batch provides reusable functions that are essential in processing large volumes of records, including logging/tracing, transaction management, job processing statistics, job restart, skip, and resource management. It also provides more advanced technical services and features that will enable extremely high-volume and high performance batch jobs through optimization and partitioning techniques. Simple as well as complex, high-volume batch jobs can leverage the framework in a highly scalable manner to process significant volumes of information.\n\n[](#features)Features\n---------------------\n\n*   Transaction management\n    \n*   Chunk based processing\n    \n*   Declarative I/O\n    \n*   Start/Stop/Restart\n    \n*   Retry/Skip\n    \n*   Web based administration interface ([Spring Cloud Data Flow](https://cloud.spring.io/spring-cloud-dataflow))\n    \n\n[](#books)Books\n---------------\n\n*   **Michael T. Minella**: [The Definitive Guide to Spring Batch](http://www.amazon.com/dp/1484237234)\n    \n*   **Michael T. Minella**: [Pro Spring Batch](http://www.amazon.com/dp/1430234520)\n    \n*   **Arnaud Cogoluegnes, Thierry Templier, Gary Gregory, Olivier Bazoud**: [Spring Batch in Action](http://www.amazon.com/dp/1935182951)\n    \n\n[](#video-training)Video Training\n---------------------------------\n\n*   **Michael T. Minella**: [Learning Spring Batch](http://shop.oreilly.com/product/0636920044673.do) O’Reilly Publishing\n    \n*   **Michael Hoffman**: [Getting Started with Spring Batch](https://www.pluralsight.com/courses/getting-started-spring-batch) Pluralsight\n    \n*   **Kevin Bowersox**: [Spring Batch](https://www.linkedin.com/learning/spring-spring-batch) LinkedIn Learning\n    \n\n[](#videos)Videos\n-----------------\n\n*   [Spring Batch (Michael Minella)](https://www.youtube.com/watch?v=CYTj5YT7CZU)\n    \n*   [Introduction to Spring Integration and Spring Batch](https://www.youtube.com/watch?v=LLOxLQ_ztcg)\n    \n*   [JSR-352, Spring Batch, And You](https://www.youtube.com/watch?v=yKs4yPs-5yU)\n    \n*   [Integrating Spring Batch and Spring Integration](https://vimeo.com/73164179)\n    \n*   [ETE 2012 - Josh Long - Behind the Scenes of Spring Batch](https://www.youtube.com/watch?v=O3kY-Bt8h48)\n    \n*   [Building for Performance with Spring Integration & Spring Batch](https://www.youtube.com/watch?v=xFGo-eai7ag)\n    \n*   [Java Batch JSR-352](https://www.youtube.com/watch?v=qmLr8vI4ofs)\n    \n*   [Batch Processing and Integration on Cloud Foundry](https://www.youtube.com/watch?v=3QBrf3B6aA8)\n    \n*   [Spring Batch Performance Tuning](https://www.youtube.com/watch?v=4unuv-oKkCA)\n    \n*   [Data Processing With Microservices](https://www.youtube.com/watch?v=COzkPkHZMG8)\n    \n*   [Cloud-Native Batch Processing with Spring Batch 4](https://www.youtube.com/watch?v=-Icd-s2JoAw)\n    \n*   [High Performance Batch Processing](https://www.youtube.com/watch?v=J6IPlfm7N6w)\n    \n*   [Batch Processing in 2019](https://www.youtube.com/watch?v=bhFBtNiZYYY)",
		"springBootConfig": "Spring Boot provides a `spring-boot-starter-batch` dependency. Check out the dedicated [reference documentation section on Batch Applications](https://docs.spring.io/spring-boot/docs/current/reference/html/howto-batch-applications.html).",
		"status": "ACTIVE",
		"description": "Simplifies and optimizes the work of processing high-volume batch operations.",
		"image": "spring-batch.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-batch",
		"github": "http://github.com/spring-projects/spring-batch",
		"site": "https://spring.io/projects/spring-batch",
		"slug": "spring-batch",
		"order": 13,
		"samples": [
			{
				"title": "20+ Spring Batch samples",
				"description": "",
				"url": "https://github.com/spring-projects/spring-batch/tree/master/spring-batch-samples",
				"order": 1
			}
		],
		"documentation": [
			{
				"version": "4.2.8.RELEASE",
				"api": "https://docs.spring.io/spring-batch/4.2.x/api/index.html",
				"ref": "http://docs.spring.io/spring-batch/4.2.x/reference/html/index.html",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "4.3.7",
				"api": "https://docs.spring.io/spring-batch/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-batch/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "5.0.0-RC2",
				"api": "https://docs.spring.io/spring-batch/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-batch/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "4.1.x",
				"initialDate": "2018-10-29",
				"ossEnforcedEnd": "2019-10-29",
				"ossPolicyEnd": "2019-10-29",
				"commercialEnforcedEnd": "2021-02-28",
				"commercialPolicyEnd": "2021-02-28"
			},
			{
				"branch": "4.2.x",
				"initialDate": "2019-10-02",
				"ossEnforcedEnd": "2021-05-20",
				"ossPolicyEnd": "2021-05-20",
				"commercialEnforcedEnd": "2022-09-20",
				"commercialPolicyEnd": "2022-09-20"
			},
			{
				"branch": "4.3.x",
				"initialDate": "2020-10-28",
				"ossEnforcedEnd": "2023-05-18",
				"ossPolicyEnd": "2023-05-18",
				"commercialEnforcedEnd": "2024-09-18",
				"commercialPolicyEnd": "2024-09-18"
			}
		]
	},
	{
		"title": "Spring Authorization Server",
		"body": "Spring Authorization Server is a framework that provides implementations of the [OAuth 2.1](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-05) and [OpenID Connect 1.0](https://openid.net/specs/openid-connect-core-1_0.html) specifications and other related specifications. It is built on top of [Spring Security](https://spring.io/projects/spring-security) to provide a secure, light-weight, and customizable foundation for building OpenID Connect 1.0 Identity Providers and OAuth2 Authorization Server products.\n\n[](#resources)Resources\n-----------------------\n\n*   [Getting Help](https://docs.spring.io/spring-authorization-server/docs/current/reference/html/getting-help.html)\n    \n*   [Getting Started](https://docs.spring.io/spring-authorization-server/docs/current/reference/html/getting-started.html)\n    \n*   [Feature List](https://docs.spring.io/spring-authorization-server/docs/current/reference/html/overview.html#feature-list)",
		"springBootConfig": "",
		"status": "ACTIVE",
		"description": "",
		"image": "spring-security.svg",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-security",
		"github": "https://github.com/spring-projects/spring-authorization-server",
		"site": "https://spring.io/projects/spring-authorization-server",
		"slug": "spring-authorization-server",
		"order": 9,
		"samples": [],
		"documentation": [
			{
				"api": "https://docs.spring.io/spring-authorization-server/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-authorization-server/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true,
				"version": "0.3.1"
      },
			{
				"api": "https://docs.spring.io/spring-authorization-server/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-authorization-server/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "0.4.0-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-authorization-server/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-authorization-server/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false,
				"version": "1.0.0-SNAPSHOT"
      },
			{
				"api": "https://docs.spring.io/spring-authorization-server/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-authorization-server/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "0.4.0-RC1"
      },
			{
				"api": "https://docs.spring.io/spring-authorization-server/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-authorization-server/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false,
				"version": "1.0.0-RC1"
      }
		],
		"support": []
	},
	{
		"title": "Spring for Android",
		"body": "This project is no longer active and has reached end of life.",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "Provides key Spring components for use in developing Android applications.",
		"image": "spring-android.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-android",
		"github": "http://github.com/spring-projects/spring-android",
		"site": "https://spring.io/projects/spring-android",
		"slug": "spring-android",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "2.0.0.M3",
				"api": "http://docs.spring.io/spring-android/docs/2.0.0.M3/api/",
				"ref": "http://docs.spring.io/spring-android/docs/2.0.0.M3/reference/html",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": []
	},
	{
		"title": "Spring AMQP",
		"body": "The Spring AMQP project applies core Spring concepts to the development of AMQP-based messaging solutions. It provides a \"template\" as a high-level abstraction for sending and receiving messages. It also provides support for Message-driven POJOs with a \"listener container\". These libraries facilitate management of AMQP resources while promoting the use of dependency injection and declarative configuration. In all of these cases, you will see similarities to the JMS support in the Spring Framework.\n\nThe project consists of two parts; spring-amqp is the base abstraction, and spring-rabbit is the RabbitMQ implementation.\n\n[](#features)Features\n---------------------\n\n*   Listener container for asynchronous processing of inbound messages\n    \n*   RabbitTemplate for sending and receiving messages\n    \n*   RabbitAdmin for automatically declaring queues, exchanges and bindings",
		"springBootConfig": "[Spring Boot Autoconfiguration for Spring AMQP (RabbitMQ)](https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.messaging.amqp)",
		"status": "ACTIVE",
		"description": "Applies core Spring concepts to the development of AMQP-based messaging solutions.",
		"image": "spring-amqp.svg?v=2",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-amqp,spring-rabbit,spring-rabbitmq",
		"github": "http://github.com/spring-projects/spring-amqp",
		"site": "http://spring.io/projects/spring-amqp",
		"slug": "spring-amqp",
		"order": 255,
		"samples": [
			{
				"title": "Spring AMQP samples",
				"description": "",
				"url": "https://github.com/spring-projects/spring-amqp-samples",
				"order": 1
			}
		],
		"documentation": [
			{
				"version": "3.0.0-SNAPSHOT",
				"api": "https://docs.spring.io/spring-amqp/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-amqp/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.3.17-SNAPSHOT",
				"api": "https://docs.spring.io/spring-amqp/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-amqp/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.3.16",
				"api": "https://docs.spring.io/spring-amqp/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-amqp/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			},
			{
				"version": "2.4.8-SNAPSHOT",
				"api": "https://docs.spring.io/spring-amqp/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-amqp/docs/{version}/reference/html/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "2.4.7",
				"api": "https://docs.spring.io/spring-amqp/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-amqp/docs/{version}/reference/html/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "3.0.0-RC1",
				"api": "https://docs.spring.io/spring-amqp/docs/{version}/api/",
				"ref": "https://docs.spring.io/spring-amqp/docs/{version}/reference/html/",
				"status": "PRERELEASE",
				"current": false
			}
		],
		"support": [
			{
				"branch": "2.2.x",
				"initialDate": "2019-10-01",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2020-10-01",
				"commercialEnforcedEnd": "2022-08-19",
				"commercialPolicyEnd": "2022-02-01"
			},
			{
				"branch": "2.3.x",
				"initialDate": "2020-10-28",
				"ossEnforcedEnd": "2022-05-19",
				"ossPolicyEnd": "2022-05-19",
				"commercialEnforcedEnd": "2023-08-24",
				"commercialPolicyEnd": "2023-09-19"
			},
			{
				"branch": "2.4.x",
				"initialDate": "2021-11-15",
				"ossEnforcedEnd": "2024-12-31",
				"ossPolicyEnd": "2024-12-31",
				"commercialEnforcedEnd": "2026-12-31",
				"commercialPolicyEnd": "2026-04-30"
			},
			{
				"branch": "2.1.x",
				"initialDate": "2018-10-15",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2019-10-15",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2021-02-15"
			},
			{
				"branch": "3.0.x",
				"initialDate": "2022-11-21",
				"ossEnforcedEnd": "",
				"ossPolicyEnd": "2023-11-21",
				"commercialEnforcedEnd": "",
				"commercialPolicyEnd": "2025-03-21"
			}
		]
	},
	{
		"title": "Spring IO Platform",
		"body": "[](#end-of-life)End of Life\n---------------------------\n\nThe Platform will reach the end of its supported life on 9 April 2019. Maintenence releases of both the Brussels and Cairo lines will continue to be published up until that time. Users of the Platform are encourage to start using Spring Boot’s dependency management directory, either by using `spring-boot-starter-parent` as their Maven project’s parent, or by importing the `spring-boot-dependencies` bom.\n\n[](#overview)Overview\n---------------------\n\nSpring IO is a cohesive, versioned platform for building modern applications. It is a modular, enterprise-grade distribution that delivers a curated set of dependencies while keeping developers in full control of deploying only the parts they need. Spring IO is 100% open source, lean, and modular.\n\n[](#features)Features\n---------------------\n\n*   One platform, many workloads - build web, integration, batch, reactive or big data applications\n    \n*   Radically simplified development experience with Spring Boot\n    \n*   Production-ready features provided out of the box\n    \n*   Curated and harmonized dependencies that just work together\n    \n*   Modular platform that allows developers to deploy only the parts they need\n    \n*   Support for embedded runtimes, classic application server, and PaaS deployments\n    \n*   Depends only on Java SE, and supports Groovy, Grails and some Java EE\n    \n*   Works with your existing dependency management tools such as Maven and Gradle\n    \n*   The Spring IO Platform is certified to work on JDK 7 and 8 \\[[1](#_footnotedef_1 \"View footnote.\")\\]\n    \n\n* * *\n\n[1](#_footnoteref_1). While the Spring IO Platform supports JDK 7 and 8, many individual Spring projects also support older JDK versions. Please refer to the [individual projects' documentation](http://spring.io/docs) for the specific minimum requirements.",
		"springBootConfig": "",
		"status": "END_OF_LIFE",
		"description": "Provides a cohesive, versioned platform for building modern applications. It is a modular, enterprise-grade distribution that delivers a curated set of dependencies.",
		"image": "logo-io-platform.png",
		"featured": true,
		"stackOverflow": "https://stackoverflow.com/questions/tagged/spring-io",
		"github": "http://github.com/spring-io/platform",
		"site": "https://spring.io/projects/platform",
		"slug": "platform",
		"order": 255,
		"samples": [],
		"documentation": [
			{
				"version": "Brussels-BUILD-SNAPSHOT",
				"api": "",
				"ref": "https://docs.spring.io/platform/docs/Brussels-BUILD-SNAPSHOT/reference/htmlsingle/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "Cairo-SR7",
				"api": "",
				"ref": "https://docs.spring.io/platform/docs/Cairo-SR7/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": true
			},
			{
				"version": "Cairo-BUILD-SNAPSHOT",
				"api": "",
				"ref": "https://docs.spring.io/platform/docs/Cairo-BUILD-SNAPSHOT/reference/htmlsingle/",
				"status": "SNAPSHOT",
				"current": false
			},
			{
				"version": "Brussels-SR17",
				"api": "",
				"ref": "https://docs.spring.io/platform/docs/Brussels-SR17/reference/htmlsingle/",
				"status": "GENERAL_AVAILABILITY",
				"current": false
			}
		],
		"support": []
	}
]
